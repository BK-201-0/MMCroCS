[
    {
        "nl_input": "The query requires applying shot noise corruption to images, which involves generating a noisy image by simulating photon noise using a Poisson distribution. The provided function `shot_noise` meets this requirement by scaling the input image, applying Poisson noise, clipping the result, and returning the corrupted image.",
        "url": "bf4f16738e1373b1734389fb368c4035"
    },
    {
        "nl_input": "The query requires converting a comma-delimited string into a list of strings. The input may be either a string or a list, and the function should return a list split by commas if it's a string, or return the original list if already a list. If the input is neither, an empty list should be returned.",
        "url": "bef112878733e2d59a2929a7920b88a7"
    },
    {
        "nl_input": "The query seeks a function that returns the index of the last dimension of a tensor `x`, using a provided `default_dim` if `x` has no defined shape. The solution must handle cases where `x` may not have a shape attribute by returning the `default_dim`.",
        "url": "123635b9b49cfe244f1f03b3cf7a2181"
    },
    {
        "nl_input": "The query requires a function that processes a document by iterating through its sentences, extracting features from tokens, and applying a tagger to assign labels. It involves a tagging operation on NLP documents using feature lists from tokens.",
        "url": "588db07117735817741eca7dee7745a4"
    },
    {
        "nl_input": "The query requires a function that computes the minimum value within segments of an array based on provided indices, returning the minimums for each segment efficiently using NumPy operations.",
        "url": "0ac06c72778fbae3d211690a5144ee35"
    },
    {
        "nl_input": "The query requires a function that sets the console window title using a message parameter, specifically utilizing `ctypes` and `SetConsoleTitleW` on Windows platforms.",
        "url": "adb202dabb7da58b5d21780a6344bf64"
    },
    {
        "nl_input": "Find the greatest common divisor (GCD) of all elements in the array `x`, which represents the largest real number `h` such that every element in `x` is an integer multiple of `h`.",
        "url": "7a0e230522dc1bfb6f427d5c55f1b354"
    },
    {
        "nl_input": "The query requires a Python generator function that processes an iterable of strings and yields each string converted to lowercase. It emphasizes compatibility with Python 3 generators and utilizes type hints for input and output types. The function should be simple, efficient, and follow Pythonic conventions.",
        "url": "718ca45cd2a8aeb3d6d3c93b5772846b"
    },
    {
        "nl_input": "The query requires a function that converts bytes to Unicode. The preferred solution checks if the input is of type `bytes` (or `str` in Python 2), and if so, decodes it using UTF-8 encoding; otherwise, it returns the input unchanged.",
        "url": "0fd02d1357d249743abe621c23164a46"
    },
    {
        "nl_input": "The query requires a function that wraps the result of another function in a list if it is not already an iterable, ensuring that the output is always iterable. This is achieved by checking whether the result has an `__iter__` attribute and returning it as-is if true, otherwise wrapping it in a list.",
        "url": "1cf347f32e0553e66342c5b228b6d453"
    },
    {
        "nl_input": "The query requires a function that performs linear interpolation between two data points [X, Y] at a given value x, using the linear interpolation formula to estimate y based on proportionality within the range defined by X and Y.",
        "url": "80c2dd99d1070a015466e83c6bbaca96"
    },
    {
        "nl_input": "The query requires a function that converts GraphQL objects into a JSON-formatted dictionary, where each query is assigned a key like \"q0\", \"q1\", etc., and the final result is returned as a JSON string.",
        "url": "30ec3c40428cf0142b78086fcf52ab34"
    },
    {
        "nl_input": "The query requires determining the maximum integer ID from a database of objects. The relevant code retrieves all object IDs, checks if the database is empty, and returns the maximum value using Python's `max()` function.",
        "url": "af9699e529fc3f759e3b88f38e727526"
    },
    {
        "nl_input": "The query seeks a function that updates a dictionary by extending, rather than replacing, existing key-value pairs. The desired behavior is to merge two dictionaries recursively, preserving and adding to existing keys instead of overwriting them entirely.",
        "url": "6d3492893fe452efa23b2aa871bb96ba"
    },
    {
        "nl_input": "The query requires calculating the number of quartets using a combination formula \"n choose k\", which determines whether splits in data should be exhaustively or randomly sampled based on their nesting level.",
        "url": "08fedeb109d03a7efb9a793b2faf11e3"
    },
    {
        "nl_input": "The query requires creating a multi-level index from specified columns of a dataframe, ensuring unique combinations of values across those columns. It involves extracting column data, zipping them into tuples, and forming a `MultiIndex` with appropriate names for each level. The process emphasizes uniqueness and proper indexing structure for hierarchical data organization.",
        "url": "640aa848a8c64fde652dc858267e207e"
    },
    {
        "nl_input": "The query requires testing a multiprocessing setup by starting a process, allowing it to run for a set duration (5 seconds), and then stopping it. Additionally, it involves running multiple processes in parallel using multithreading with a thread pool that maps processes to run concurrently.",
        "url": "305d82a1849c66873989c4284d69ab1d"
    },
    {
        "nl_input": "The query requires a function that deletes characters behind the cursor, with support for a numeric argument to kill (cut) the characters instead of simple deletion. The functionality should involve buffer manipulation and finalization after the operation.",
        "url": "6d0e43840f9291ed29bad306bcad084b"
    },
    {
        "nl_input": "The query requires a function to pretty print an object in YAML format with proper indentation and UTF-8 encoding. It aims to display structured data in a human-readable form, specifically using YAML syntax.",
        "url": "77ef270248a249d46314cb1cc698b63b"
    },
    {
        "nl_input": "The query checks whether voice connection (VC) functionality is available in the bot. The relevant code verifies this by checking if PyNaCl and libopus dependencies are loaded, which are required for voice support in Discord bots.",
        "url": "b5a7289d2fab611cfcc7c4ed4b850c0f"
    },
    {
        "nl_input": "Ajouter un message de log de type INFO consiste \u00e0 enregistrer une information dans les journaux d\u2019ex\u00e9cution du programme. Cela implique d\u2019utiliser une m\u00e9thode ou fonction qui transmet un texte au niveau INFO du syst\u00e8me de logging, souvent avec un pr\u00e9fixe ou format particulier pour structurer le message.",
        "url": "96e946ca05b4d59e5a6276c0b3af415b"
    },
    {
        "nl_input": "The query seeks a Decision Tree implementation that uses a `DecisionTreeClassifier` with specified parameters (`random_state=0`, `max_depth=4`) and modifies the `predict` method to return raw probability outputs instead of class labels. The focus is on model explanation via probabilities, specifically for binary classification (selecting the positive class probability using `[:, 1]`).",
        "url": "c3435338c01b1a188567decfc5fc0927"
    },
    {
        "nl_input": "The query requires finding the index of an element in a reversed sequence. The correct implementation calculates the index by determining the length of the sequence, subtracting the index found in the reversed list, and adjusting by 1. This logic ensures the position reflects the element's location in the original sequence when traversed in reverse order.",
        "url": "a81aae6b2b81cacc3595226458d367e8"
    },
    {
        "nl_input": "The query requires a function that checks whether a given data type (`dtype`) is a numeric type. The function should return `True` if the `dtype` is a numeric type, using NumPy's type hierarchy to determine this. It focuses on verifying numeric type compatibility, specifically utilizing NumPy's `dtype` and type-checking capabilities.",
        "url": "0682dad1c78a66e735141f7465044213"
    },
    {
        "nl_input": "The query requires computing the shape of a dataset in the format (rows, cols). The relevant code should return the number of rows and columns from the dataset's structure.",
        "url": "03902bd67078aa4474f8a53295175922"
    },
    {
        "nl_input": "The query requires a function that determines whether a given platform is Unix-like, identifying it by checking if the platform name starts with \"linux\", \"darwin\", or \"cygwin\". If no platform is provided, it defaults to `sys.platform`. The function performs case-insensitive matching and returns a boolean result.",
        "url": "8251bcf4cb40c1528106d1b53d5f5d85"
    },
    {
        "nl_input": "The query requires checking whether a given key is the hash key of a specific object or class, specifically by comparing it using `==` against the `hash_key` attribute of `query_on`. The key must be an instance of `BaseCondition` with the equality operation specified.",
        "url": "92ac75d4fe43a04ecb953753efd02c0e"
    },
    {
        "nl_input": "The query requires functionality to process and clean up text by removing unnecessary whitespace, such as spaces, tabs, and empty text nodes, potentially for further processing or analysis.",
        "url": "e4a076b56da21a4b5fe16b2735022613"
    },
    {
        "nl_input": "The query requires a function that attempts to parse a date string formatted in ISO 8601. It should return a boolean indicating success or failure and provide an error message if the format is invalid. The function should handle both date-only and date-time strings appropriately.",
        "url": "fb219ccbaa6021dddb6fd7adce3cc214"
    },
    {
        "nl_input": "The query requires a function that returns a new list containing only the unique elements from the input list, preserving their original order. The function should ensure that duplicates are removed and that the order of appearance in the original list is maintained in the resulting list.",
        "url": "a62a2755f5b02fde0ea76637776e4739"
    },
    {
        "nl_input": "The query seeks to determine whether a given value is a byte string or a Unicode string. It requires a function that can accurately distinguish between the two types, returning `True` if the value is either a byte string or a Unicode string, and `False` otherwise. The solution should handle type checking in a way that is compatible with both Python 2 and Python 3.",
        "url": "26c958614bee5fc1c19896b5f0551f81"
    },
    {
        "nl_input": "The query requires a function that converts an object into a masked array using the `masked_array` constructor from the `ma` module, passing in `data`, `mask`, and `fill_value` attributes from the object.",
        "url": "0773ccccc7a4410b99a67a524e967ef2"
    },
    {
        "nl_input": "The query requires a function to trim leading and trailing spaces from a given string. The function should remove all whitespace characters, including spaces and tabs, from both ends of the input string and return the resulting trimmed string.",
        "url": "59c94f3828b90b2607f5aa28822b7c61"
    },
    {
        "nl_input": "Create a function that returns a new datetime object set to the first day of the month based on the input date or datetime value.",
        "url": "29ccc9cc8cfe03ed5a7d60a2087692cd"
    },
    {
        "nl_input": "The query requires functionality to close or disconnect all active connections. The relevant code should handle tasks such as closing a database connection, stopping a session, or disconnecting a websocket. It should ensure clean termination of connections and may include logging or preventing further reconnection attempts.",
        "url": "0276eac263fca46f864f24050a9ea3e9"
    },
    {
        "nl_input": "The query requires obtaining the local IPv4 address of the current device. Among the provided code options, the function `_get_local_ip` is the most relevant as it retrieves the local IP by querying socket information for the hostname. The other functions are related to IP handling but do not directly fulfill the requirement of obtaining the local IP address.",
        "url": "0424d5e9fb2e0ef43c6f3ae42a6c2316"
    },
    {
        "nl_input": "The query requires creating a directory for a topic in the current environment. The code should check if the directory exists and create it if necessary, using functions similar to `ensure_dir_exists` or `mkdir`. Additionally, setting up a Conda environment with specified dependencies may be relevant for initializing the environment within the created directory.",
        "url": "92c4f725f0d1d243dd04b7d28c2f983f"
    },
    {
        "nl_input": "The query requires adding SGI MIPS C++ build variables to a construction environment, including setting the C++ compiler to 'CC', using '-LANG:std' as a compilation flag, and defining shared object settings. The solution involves modifying environment variables within a `generate` function for compatibility with SCons building.",
        "url": "d86c7ef069bae9bd25b1719469eaa20e"
    },
    {
        "nl_input": "The query requires a function that resizes an image while preserving its aspect ratio. The provided code includes a function that scales the image width and calculates the new height based on the original aspect ratio, ensuring the resized image maintains proportional dimensions.",
        "url": "1374156da8327d67bd9b7097f1cd1692"
    },
    {
        "nl_input": "Return the index of the nth match of a pattern in a list of strings.",
        "url": "7d6d4d30261325455aae41d30721f891"
    },
    {
        "nl_input": "Return True if the input `dtype` is a real floating-point data type. The function checks whether the base type of the given `dtype` is a subclass of `np.floating`.",
        "url": "a5fcb7627c23a69f2c2c9416c128e1f5"
    },
    {
        "nl_input": "The query requires creating a BigQuery table by supplying a callback function that modifies a `google.cloud.bigquery.Table` object. The caller must provide the dataset, schema, table name, callback, and SQL statement. The table is created using the BigQuery client after applying the callback mutation.",
        "url": "32b013a3ed613334012d04e2cfcc7a7a"
    },
    {
        "nl_input": "The query requests a simple Python function to compute the Nth Fibonacci number. The provided code includes a function named `software_fibonacci` that correctly calculates Fibonacci numbers using iteration, making it suitable for this task.",
        "url": "215b9f753c4bedbf5e252691c757d9ae"
    },
    {
        "nl_input": "The query requires a Python function that converts a string representation of a date into a corresponding `date` object. The function should handle both string inputs and direct `date` objects, returning the appropriate date output.",
        "url": "dfec582c3aa4ec5eaafa97cc052f017e"
    },
    {
        "nl_input": "The query requires a function that retries an HTTP request upon failure, handling exceptions and implementing delays between retries. It should support timeout configuration, logging, and propagate specific HTTP responses like 406 without retrying. The logic must track consecutive errors and switch URLs if necessary.",
        "url": "1e5bac42bcbc9caf07b1a590df790c7d"
    },
    {
        "nl_input": "The query requires a function to read a JSON file and return its contents, with support for ordered keys. The preferred implementation uses `json.load()` with an `OrderedDict` hook to preserve key order, ensuring structured data retrieval from the file.",
        "url": "a0a2b0aaa72c7779cfe2be0738354f8c"
    },
    {
        "nl_input": "The query requires a function that replaces all occurrences of specified symbols in a string `input` based on a mapping provided by a dictionary `repls`. The replacements should be applied correctly using regular expressions to handle special characters, ensuring each matched symbol is substituted with its corresponding value from the mapping.",
        "url": "85d3c78c884351b4ba1ab4b9bbd83d89"
    },
    {
        "nl_input": "The query requires a function to perform a cross join between two dataframes, combining all rows from both dataframes without any matching condition. The result should include all columns from both dataframes in the order they were added.",
        "url": "347fd8e0a2fd4e7d60db3a5ab300aee6"
    },
    {
        "nl_input": "The query requires a function that takes a list of lists as input and returns a single flat list containing all the elements from the nested lists. The conversion should handle general nested structures without specific type restrictions, and it should produce a consolidated list with all items at the top level.",
        "url": "a585673f9c5f7a80e31dda59ae292d9a"
    },
    {
        "nl_input": "The query requires writing a colored string to standard output. The code defines functions to print or write a string with specified foreground and background colors, ensuring it is flushed immediately and color settings are reset afterward.",
        "url": "96a6f76f819c942ab3d6ea2451f8f2f3"
    },
    {
        "nl_input": "The query requires removing incompatible objects from the global namespace based on the current platform. Specifically, it checks if the platform is not Java or CLI and then deletes specified unavailable names from the globals and updates `__all__` accordingly.",
        "url": "db80e58cf17dd98d1e3e4ff2cdfd5bb0"
    },
    {
        "nl_input": "The query requires a function that prints a formatted message to the console with a prefix composed of a good status indicator (`PR_GOOD_CC`), a timestamp from `get_time_stamp()`, the input text, and a reset code (`PR_NC`). The output should be immediately flushed to ensure timely display.",
        "url": "e2aa9367d8be0f1d00d8b3baa409dd7a"
    },
    {
        "nl_input": "The query requires checking whether a specified image file is valid. The code should attempt to open and load the image within a try/except block to catch any IO errors, indicating validity based on successful loading. Additional checks like file existence or type are not the focus.",
        "url": "78471e6efe57a56cdcbd6dc99918d5e9"
    },
    {
        "nl_input": "The query requires a function to flush or invalidate all items from a cache. Among the provided code options, one of them implements a `Flush` method that removes all entries from the cache by clearing both the `_age` structure and the `_hash` dictionary, effectively evicting all cached items.",
        "url": "0669053426216dbed5fb7b5c5d5f0e2b"
    },
    {
        "nl_input": "The query requires a function that prints error messages with proper formatting, including support for ANSI color codes on POSIX systems. It should display the error message with \"[ERRO]\" prefix, and handle color coding differently based on the operating system.",
        "url": "e018e33b4b9bfadcd5b2801d5f2bb07b"
    },
    {
        "nl_input": "The query seeks a function that removes (pops) multiple specified keys from a dictionary-like object, returning a new dictionary containing the removed key-value pairs. It involves extracting a code implementation that handles popping multiple keys at once from a dictionary.",
        "url": "76651b46ae4fa8a26688ff91f2822a35"
    },
    {
        "nl_input": "The query requires a function that retrieves a specified attribute for a given field on a model class. The function should locate the field by name within the model's fields and return the desired attribute value.",
        "url": "4d40e0af146c3ed90744e11883779b2f"
    },
    {
        "nl_input": "The query requires a function that calls a callable with provided arguments and keyword arguments, handling any type errors that occur during the call. The function should attempt to invoke the callable, catch `TypeError` exceptions, fix them using a helper function (`fix_type_error`), and re-raise the corrected exception. The goal is to ensure proper error handling during callable execution while preserving correct behavior when no errors occur.",
        "url": "20241a259de49265645c61a4331ec435"
    },
    {
        "nl_input": "Create a function that maps rows of data to a structured table based on provided headers, dynamically aligning row elements with corresponding header names. The mapping should allow for transformation of both header and body content, supporting structured output generation.",
        "url": "4bf3b9d30f1dc43cd9a257f7c001464b"
    },
    {
        "nl_input": "The query requires a function to round a number to a specified number of significant figures. The function should take two arguments: the number to be rounded and the number of significant figures. It returns the rounded result according to the specified significant figures, using Python's `round` function in combination with logarithmic calculations to determine the correct decimal place for rounding.",
        "url": "fcee00bb04d97a1c4b375046f0e3f094"
    },
    {
        "nl_input": "The query checks whether a specified network interface exists in the running configuration of a device. The relevant code retrieves the configuration, parses it, and searches for lines that define the specified interface. If such lines exist, it confirms the presence of the interface.",
        "url": "7752c2898f7c89e4e3bbdcc1d36f55ee"
    },
    {
        "nl_input": "The query requires a function to validate whether a given input is a non-empty string. The function should handle cases where the input may be empty, contain only whitespace, or not be a string at all, raising appropriate errors and returning a boolean result.",
        "url": "4c267ab3b1fbf3f4c4270f715d93e37c"
    },
    {
        "nl_input": "The query requires a function that removes trailing whitespace and replaces multiple spaces with a single space in a given string.",
        "url": "c2470f0a06ff47da7848e58f4b1660bb"
    },
    {
        "nl_input": "The query requires checking whether a passed variable is a tuple that contains exactly two elements, both of which must be either integers or floats. The validation includes confirming the variable's type as a tuple, its length, and the types of its individual elements.",
        "url": "78a1d1468f072b1981c8d8674ce82a8f"
    },
    {
        "nl_input": "The query seeks to identify the last RQ job that ran, based on an RQ ID and origin. It involves fetching job details using a connection derived from the RQ origin, indicating a need to retrieve and possibly validate the most recent job execution status or data.",
        "url": "44da2dcc6b77c92c6d2ded457f0dff61"
    },
    {
        "nl_input": "The query requires a function to decode a value from a serialized stream by reading its length and then extracting the corresponding data. The correct implementation involves decoding the length first, then using it to read and return the associated value from the stream.",
        "url": "3ac89cc6e7278682dcf430aa32e4074e"
    },
    {
        "nl_input": "The query requires a function that rotates a list `l` in-place by a specified number of `steps`, effectively modifying the original list without creating a new one. It should handle edge cases such as empty lists and large step values by using modulo operation.",
        "url": "707569fdd77ebde2ce9e44aeb15df944"
    },
    {
        "nl_input": "The query requires a function to convert a NumPy array into a formatted string representation, including the data type and shape of the array.",
        "url": "d0df2377b019e7963fd32ca8ad6667b7"
    },
    {
        "nl_input": "The query requires a function that returns a dictionary mapping each item in a list to the indices at which it appears. The dictionary should have items as keys and lists of indices as values.",
        "url": "f663b65182d638f4a50a8edd8d907ce2"
    },
    {
        "nl_input": "The query requires a function to add executable permissions to a specified file. The desired functionality involves retrieving the current file mode, then updating it to include user execute permission (`S_IXUSR` or `S_IEXEC`). The third code snippet does not match the requirement as it focuses on making a file readable, not executable.",
        "url": "e398c233699ff803f1d5a5d64f31d77c"
    },
    {
        "nl_input": "The task requires checking whether a given string starts with any of the prefixes in a provided list. If it does, return True; otherwise, return False.",
        "url": "848410ee09fccd5cd9d637b91b29dab9"
    },
    {
        "nl_input": "Helper function to check if a parent directory exists for a given item.",
        "url": "ca432f95f8726269ef3e7f30fd1a43ef"
    },
    {
        "nl_input": "Find all indices of the value `val` in the list `m`.",
        "url": "94119862fe17106353860bbfe1d89231"
    },
    {
        "nl_input": "The query requires a function to recursively iterate through and flatten nested lists of arbitrary depth, returning a single-level list containing all the values.",
        "url": "d77464bbd1d4690e450af59886ceb745"
    },
    {
        "nl_input": "The query requires functionality to handle a double-click event on a square in a map, triggering an action associated with the selected square. The code should detect the node at the clicked position and post an event containing details about the node and its location.",
        "url": "18a4c302730948b48a653fb99dfe5f4f"
    },
    {
        "nl_input": "The query requires a recursive implementation of Depth-First Search (DFS) to detect connected components in a graph. The provided code includes a suitable `dfs_recursive` function that takes a graph, a starting node, and a `seen` array to track visited nodes, recursively visiting all nodes in the connected component.",
        "url": "a0a4bfd06d70e1443c66598deeeef9f6"
    },
    {
        "nl_input": "Find the longest common substring shared among all strings in a given list of strings.",
        "url": "08a0e7248e853cbfb87305700f081955"
    },
    {
        "nl_input": "The query requires a function that processes data by replacing non-printable characters with dots, using a method similar to the `_dotify` function provided in the code. It should take input data and return a string where each character is either preserved or substituted with a dot if not printable.",
        "url": "78ab1db794bcc9dca29d020e49f51eb6"
    },
    {
        "nl_input": "Convert a 3x3 matrix into a 6-element list, where the first three elements are the diagonal entries of the matrix, and the next three elements correspond to the off-diagonal entries (0,1), (1,2), and (0,2), respectively, as described in Tauxe (1998).",
        "url": "7d7c9d0f3deb7edef22d856213841fb9"
    },
    {
        "nl_input": "The query requires a function to reshape a multidimensional array into a one-dimensional vector. The provided code includes functions that either manually flatten the array using loops or utilize NumPy's reshape method to achieve the desired transformation efficiently.",
        "url": "cdbc3b94d8dc579d2fdda174b7d41881"
    },
    {
        "nl_input": "The query requires a function to register a model with a lemmatizer, associating it with its grammatical category. The function `register_modele` fulfills this by adding the model to the lemmatizer's dictionary under the model's grammatical category key.",
        "url": "66f6db21565028d4fad0f3cfa2faa44a"
    },
    {
        "nl_input": "The query requires a helper function to render a list of dictionaries as an HTML display object. The provided code includes a function `_render_table` which takes `data` and optional `fields`, and returns an HTML representation using `datalab.utils.commands.HtmlBuilder.render_table`, fulfilling the requirement.",
        "url": "521b584906bc8240a28beac05fa8a4dd"
    },
    {
        "nl_input": "The query requires a function that converts a millisecond accuracy timestamp into a datetime object, accounting for the milliseconds. The provided code includes such a function `ms_to_datetime`, which uses `utcfromtimestamp` and adjusts the microseconds to reflect the millisecond precision.",
        "url": "b17378f402d83c02a4e7bf5b967bca23"
    },
    {
        "nl_input": "The query requires a function that converts a string from snake case to camel case by splitting the input text at underscores, capitalizing subsequent parts, and joining them together without separators.",
        "url": "c954b335d705a71796714fc13a69018b"
    },
    {
        "nl_input": "Retrieve a specific line from an open file by its zero-based index, returning the line if found.",
        "url": "abc96f2c92b62e0900fb5359682ed0f1"
    },
    {
        "nl_input": "The query requires a function that retrieves a global variable by its name. The ideal solution involves inspecting the call stack to find the variable in the local namespaces of previous frames, returning its value if found, or `None` otherwise. It emphasizes dynamic variable lookup across scopes without relying on predefined mappings or external objects.",
        "url": "a0327bfe2ebddf93ceabf0d5ccb9f890"
    },
    {
        "nl_input": "The query requires a function that takes a string and a dictionary, then replaces all occurrences of each key in the dictionary with its corresponding value in the string.",
        "url": "248a51a67e1e4f407628e9ccafebb8d6"
    },
    {
        "nl_input": "The query seeks to identify and warn about the presence of NaN values in a NumPy array or similar data structure, indicating a concern for data integrity or preprocessing steps where missing values might impact further operations like plotting or analysis.",
        "url": "ad5bd51b70e1f23385706f6e87a1af60"
    },
    {
        "nl_input": "The query requires a mechanism to invoke an unbound method as if it were bound, ensuring observer management code is executed in the same way as for bound methods. The solution involves creating a bound method dynamically using the descriptor protocol (`__get__`) and then invoking it with the provided arguments.",
        "url": "efb9ec101eb27e6bc1248d7878ee42a9"
    },
    {
        "nl_input": "The query requires a function to convert a list into a string by joining its elements with a specified separator. The given examples show that the function `list_to_str` takes a list and an optional separator, converts each element to a string, and joins them using the separator. The default separator is a comma.",
        "url": "bde3fb5a6302302752336ef6267a3877"
    },
    {
        "nl_input": "The query requires a function to split a string into a list of substrings based on a specified length. The input string is divided into equal parts, with each part (except possibly the last) having the given length. None of the provided codes should be used as-is; instead, extract and describe the functionality needed.",
        "url": "76cd4a4bb3cb411efcd7e36430af7631"
    },
    {
        "nl_input": "The query requires an order-preserving sorting function that sorts a list based on a key while maintaining the original order for elements with equal keys. The function should ensure stable sorting where the input order is preserved among items with the same key value.",
        "url": "4aace1140f498da16c231c1d664bc11c"
    },
    {
        "nl_input": "The query requires creating a directory for a topic in the current environment. The code should ensure the directory is created if it does not already exist, using functions similar to `ensure_dir_exists` or `mkdir`.",
        "url": "92c4f725f0d1d243dd04b7d28c2f983f"
    },
    {
        "nl_input": "The query requires a function to sanitize a string by removing all non-alphanumeric characters, replacing them with underscores, and trimming any excessive underscores from the beginning and end of the string.",
        "url": "67e48b1877d796ea66fb7448c13e582f"
    },
    {
        "nl_input": "The query requires a function that renames the leaf labels of a Newick tree from numbers to corresponding sample names. It involves parsing the tree structure, identifying leaf nodes labeled with numbers, and replacing those labels with appropriate sample names from a list or dictionary. The function should return the modified tree in a suitable format, preserving its topology while updating the tip labels accurately.",
        "url": "a35d426aad387434705c007efdc6f5d8"
    },
    {
        "nl_input": "The query requires a function that computes the greatest common divisor (GCD) for a sequence of numbers, specifically designed to handle floating-point values using a numerical tolerance to ensure accurate results.",
        "url": "ea16c18890317cf7a6b4d6a0d1d42fbd"
    },
    {
        "nl_input": "The query seeks to determine if an object \"quacks like a list,\" meaning it should identify objects that behave like sequences (e.g., lists, tuples, sets) but exclude strings or Unicode strings. The goal is to check for list-like behavior without relying solely on type inheritance.",
        "url": "1cf7b63ec959e949becf181328c3cd52"
    },
    {
        "nl_input": "The query requires a function that splits a string into a list using commas or spaces as delimiters. The function should handle both comma-separated and space-separated input, returning a list of elements stripped of any surrounding whitespace. It may also accommodate edge cases like single-element strings or non-string inputs by returning the original or empty lists accordingly.",
        "url": "83b708851d8a2b1f85ac0c32273ee690"
    },
    {
        "nl_input": "The query requires retrieving the SQL data type (e.g., VARCHAR) of a database column from a given table. The relevant code should expose a method that, when provided with a table and column name, returns the corresponding SQL data type, ideally in uppercase format.",
        "url": "9a59c46a79ec9a1b3731b4548cca5a35"
    },
    {
        "nl_input": "The query requires a function that computes the high median of a dataset. The correct implementation sorts the data and returns the higher of the middle values when the dataset length is odd, or the latter of the two central values when even.",
        "url": "997b00081c660133f7a1864bfcd2e171"
    },
    {
        "nl_input": "Convert arrays containing Python `datetime` and `timedelta` objects into NumPy `datetime64` and `timedelta64` types following pandas conventions for handling date and time data.",
        "url": "82304e3180b3ef100b8e39ece9ac1d39"
    },
    {
        "nl_input": "The query requires a helper function to convert a coordinate into a dictionary format for logging purposes. The function should take a coordinate object with attributes `zoom`, `column`, and `row`, and return a dictionary with keys `z`, `x`, and `y` respectively, using `int_if_exact` to ensure integer values.",
        "url": "f67b0373a9f046509fad8d0562410c39"
    },
    {
        "nl_input": "The query requires a function that can split a number into nearly equal parts, where the number of parts is specified by a group parameter. It involves dividing the number using divmod and distributing the remainder across the groups to form chunks. The relevant code defines a function `most_even` that returns these chunks.",
        "url": "5cf5cc55de5757c435dcdbdd195fa0d1"
    },
    {
        "nl_input": "The query requires a function that flattens all dimensions of a tensor except the last one. The desired behavior is to reshape the input tensor into a 2D tensor where the first dimension is the product of all original dimensions except the last, and the second dimension remains unchanged.",
        "url": "72a8ef07c2b3b7ac06dd53c3280aa1f4"
    },
    {
        "nl_input": "The query requires a function that returns the nth value of an array, handling cases where the index may be out of bounds by returning a NaN value. The provided code includes such a function named `_nth`, which uses `iloc` for indexing and catches `KeyError` or `IndexError` exceptions to return `np.nan` when the index is invalid.",
        "url": "95fe08e717d93da59f9b5c17579ef66e"
    },
    {
        "nl_input": "The query seeks a function to style text with ANSI codes and automatically reset the styling at the end. It should accept the text, styles, and an optional reset flag, returning the styled text with a reset code unless specified otherwise.",
        "url": "4a001865bf994287cdf1092a7be76350"
    },
    {
        "nl_input": "Given a date object, the task requires returning the first day of the month. The correct implementation involves creating a new date with the same year and month as the input, but setting the day to 1. This is demonstrated by returning `datetime.date(date.year, date.month, 1)`.",
        "url": "74483d2e3e4816f59f302670fc2add82"
    },
    {
        "nl_input": "The query requires a function to run tests, potentially using `unittest`, `nose`, or `py.test/tox` frameworks, with support for verbosity and handling missing dependencies.",
        "url": "12a70ddb1c8efce59ed94b4732ccce1b"
    },
    {
        "nl_input": "The query requests a method to compute the unit vector of a given vector. The relevant code normalizes a vector by dividing it by its Euclidean length, resulting in a unit vector.",
        "url": "f40fe1d1e953f62337812550e43f7ebc"
    },
    {
        "nl_input": "The query requires a function that extracts the year from a given date string formatted as `%m/%d/%Y`. If the input is invalid, it should return 0.",
        "url": "6c997aefc629ec3ddb36fa1869964c25"
    },
    {
        "nl_input": "The query requires a function that returns the top n elements with the highest ranking from a given dictionary, using the dictionary's values to determine the order. This functionality is fulfilled by the first code snippet provided.",
        "url": "4ffacc05681c3e55136ae1aca8a91b26"
    },
    {
        "nl_input": "The query seeks a function to convert data into JSON format, potentially involving template rendering or protocol buffer objects. It emphasizes handling data transformation with possible indentation, serialization, and custom JSON encoding. The focus is on generating HTTP JSON responses, converting proto objects to JSON, and dumping JSON with special handling for NaN values and custom defaults.",
        "url": "0aa7b5cc50b7b2fc58973bcd7bb80020"
    },
    {
        "nl_input": "Given a list of rows and a column name, find the row with the maximum numerical value in that column and return it as a single-element list. This ensures consistency with other function return types.",
        "url": "b28453d2e0b8222a369ff53ddfa194a9"
    },
    {
        "nl_input": "The query requires a function that replaces multiple substrings in a string. It should accept the input string and a collection of search-replace pairs, then return the modified string with all specified replacements performed sequentially.",
        "url": "5cc38f990774f5e46761e330e30ba551"
    },
    {
        "nl_input": "The query requires a function that opens a file and reads its content as a string. The function should take a file path or name as input, open the file in read mode, and return its contents. Multiple implementations are provided, all fulfilling this requirement with slight variations in syntax and path handling.",
        "url": "e49d4cb2c549747b334ad86c75fed3c3"
    },
    {
        "nl_input": "The query seeks a function that recursively returns all child objects within nested lists of strings. The desired functionality involves traversing a hierarchical structure and extracting elements into a flattened list format, preserving the order of appearance while eliminating nesting levels.",
        "url": "f56f6544f22eb714a280494b428d028c"
    },
    {
        "nl_input": "The query seeks a function to compute the fast median using the 50th percentile for a masked array, handling empty data by returning a masked value. It requires efficient computation, proper handling of empty input, and compatibility with masked arrays.",
        "url": "86a3784ce948451d6f92d9d8027f66e0"
    },
    {
        "nl_input": "The query requires a function to kill or terminate a process using a `Popen` object. The function should check if the process is alive, terminate it gracefully, and confirm that it has been terminated. Proper process handling includes calling `terminate()` and waiting for completion with `communicate()`, or using OS-level signals like `os.killpg()` with `SIGTERM`.",
        "url": "ff5650a6fb621a5dd82d24d3fdc0acc1"
    },
    {
        "nl_input": "If the pair exists in the search list, return its index; otherwise, return -1. The code should check each element in the list for equality with the pair and return the corresponding index upon match.",
        "url": "ede2661d49f95400193f400c777d9bb7"
    },
    {
        "nl_input": "The query requires a function to select rows from a table where the specified field evaluates to `True`. The function should allow an optional `complement` parameter to invert the selection condition.",
        "url": "6d691369f43d77bf61e57088cbb540aa"
    },
    {
        "nl_input": "The query requires checking the syntax validity of a given URL. The relevant code provides a function `url_syntax_check` that verifies whether the input is a non-empty string and then checks if the URL is valid using `Check(url).is_url_valid()`. It ensures proper handling of edge cases such as empty or non-string inputs.",
        "url": "2aee16e7ce75310a4402b9b751615bed"
    },
    {
        "nl_input": "The query seeks to format and set a title string, particularly handling platform-specific behaviors for setting console titles. It involves replacing specific tokens in the title string and applying text formatting. The code references methods for formatting the title string and conditionally setting console titles on Windows using `ctypes`.",
        "url": "bc4cedef2d13710f541bee8a0b25cc9b"
    },
    {
        "nl_input": "The query seeks techniques for signal filtering using Python. It references methods for downsampling arrays, applying an FFT bandpass filter to data, and convolving a 2D image with a Gaussian kernel. These operations are commonly used in digital signal and image processing tasks such as noise reduction, frequency analysis, and smoothing.",
        "url": "86780644487ad34f70f295b2b0d48f74"
    },
    {
        "nl_input": "The query requires a function to compute the cumulative distribution function (CDF) of a normal distribution. Among the provided codes, one defines `normcdf`, which aligns with this requirement. The function takes an input array `x` and returns the CDF values, optionally in log space if the `log` parameter is set to True.",
        "url": "ea825e032e07f3974f9144799bf7ae57"
    },
    {
        "nl_input": "The query seeks to determine the contribution of a receiver in a tree diagram, likely within a decision tree context. From the provided code snippets, there is a function related to a decision tree that returns a model configured with a specified depth and random state. The model's prediction method is customized to return raw probability outputs for class 1. However, none of the other functions explicitly relate to calculating or describing a receiver's contribution in a tree diagram. Therefore, while there is relevant information about decision trees, the specific requirement of identifying the receiver's contribution remains unfulfilled based on the given code.",
        "url": "e7c7a5c899b079bc11587820e4bc5bc0"
    },
    {
        "nl_input": "The query requires a function to retrieve an item by its ID, where the item is identified by matching the `id` attribute of elements in a collection. It involves searching for an element with a specific ID and returning its corresponding value or object.",
        "url": "9bc06fc86f744f32effbee5c3fb819f1"
    },
    {
        "nl_input": "The query requires a function composition mechanism that sequentially applies a list of preprocessing functions to input data, passing the output of each function as the input to the next one. It focuses on composing functions in a pipeline fashion, particularly for use in data processing or transformation workflows.",
        "url": "3489959eeae90ba054249170c05b205f"
    },
    {
        "nl_input": "The query requires a function to convert a binary address into IPv4 format. The provided code includes a method `_get_ipv4_from_binary` that correctly uses `socket.inet_ntop` and `struct.pack` to achieve this conversion. This function takes a binary address as input and returns the corresponding IPv4 string representation.",
        "url": "8df29dc77c73b7c88e379a59e99ce43c"
    },
    {
        "nl_input": "The query requires a function to print log messages to standard error, potentially with color formatting. The function should prepend a label (e.g., script name) and support additional formatting options. Error-specific printing is also relevant, possibly with different styling on POSIX systems.",
        "url": "336b9bafdd37d354437a6c0bf18ca5ba"
    },
    {
        "nl_input": "The query requires retrieving a list of table names from an SQLite database. The provided functions `get_table_names` and `get_tablenames` both execute the SQL query `\"SELECT name FROM sqlite_master WHERE type='table'\"` to fetch the table names, which matches the requirement. The third function, `column_names`, is unrelated as it retrieves column names from a specific table using `PRAGMA table_info`. \n\n**List of table names in the database:**  \n- `get_table_names`\n- `get_tablenames`",
        "url": "b08c3d745d6f7e646d2b3ccf262f3d81"
    },
    {
        "nl_input": "The query requires a function that checks the existence of a resource in a remote database by sending a request and evaluating the response status code to determine if it exists (e.g., status 200 OK). The function should return a boolean value indicating existence.",
        "url": "02bd43c82e1cda155a1f8e42686f5917"
    },
    {
        "nl_input": "The query requires a function to retrieve a single system variable from a CCU or Homegear system. The function should accept parameters for the remote source and variable name, and properly interface with the server to fetch the variable value.",
        "url": "864a4dafef1292703051736e4cad33c7"
    },
    {
        "nl_input": "The query requires obtaining the full remote import path used in Go source file import statements. The correct code should return the joined path of the remote root and package, or just the remote root if no package is specified.",
        "url": "9c7eee617072fa977274be4dcd7f6281"
    },
    {
        "nl_input": "The query requires a function that deletes all files matching a specified glob pattern using `glob.glob()` to find the files and `os.remove()` to delete them.",
        "url": "28ecff7f6156dd9d5d8dd360941562f7"
    },
    {
        "nl_input": "The query requires a function that converts a list of values into a single string, with each element separated by a comma. The function should handle the conversion of non-string elements to strings and join them using a specified separator, defaulting to a comma if none is provided.",
        "url": "c94f78d28d8b78bbf30d3d201d9059b3"
    },
    {
        "nl_input": "The query requires a function that reads a stream, discards the data read, and returns the total size of the data read. The function should process the stream in chunks to handle large data efficiently.",
        "url": "c3f7e9b39fe78dfbe1d4bccc994e122e"
    },
    {
        "nl_input": "The query requires a function that outputs a string to the console (stdout). The provided code includes functions that print directly to stdout, either using `print()` or `target.write()`, both of which fulfill the requirement of writing output to the console.",
        "url": "828984305b0d337fae5e014dce303d6e"
    },
    {
        "nl_input": "Divide a number into a list of integers as evenly as possible, distributing the remainder across the groups.",
        "url": "9802db16c86d0ad727009b0976a80804"
    },
    {
        "nl_input": "The query requires a function that sends a file via FTP. The provided code includes a method `_send_file` that establishes an FTP connection, logs in, and uploads a file in binary mode, fulfilling the requirement.",
        "url": "b930dc0a570db92902aafa697c7c432a"
    },
    {
        "nl_input": "The query addresses a scenario where Java Collections are no longer directly iterable when accessed via JPype. The provided workaround functions `_listify` and `listlike` aim to convert or check if an object can be treated as a list, ensuring compatibility with Python iteration protocols. These functions facilitate handling Java collections seamlessly in Python code.",
        "url": "9e445111477bc6119a47621daa6fed03"
    },
    {
        "nl_input": "The query requires a function that rounds a floating-point number to a specified precision. The desired functionality includes handling the rounding operation with a parameter for the number of decimal places and returning the correctly rounded result as a float or formatted string, without causing errors on invalid input.",
        "url": "dde986d7cf845f71dfa4d9e8aba699a2"
    },
    {
        "nl_input": "The query requires converting a given date or datetime object into a Unix timestamp in milliseconds. The code should handle either a `date` or `datetime` input, convert it to a time tuple, and then scale the resulting seconds (since epoch) by multiplying by 1000 to obtain milliseconds. Accuracy in handling time zones and microseconds is important for precision.",
        "url": "c45019dbaf87a4dda8ed93145a8d72d9"
    },
    {
        "nl_input": "The query requires a function to return a list of distinct values from an input list while preserving the original order. The solution must not rely on `collections.OrderedDict` and should be compatible with Python 2.6.",
        "url": "328596b5f38ea5aea10ae6d53e289f18"
    },
    {
        "nl_input": "The query seeks to understand the functionality of retrieving property values, focusing on reading properties either through a property name or file. It emphasizes handling unreadable attributes and locating properties within an object or file path.",
        "url": "4db783ef8b2b3e7c49e8863ce241b880"
    },
    {
        "nl_input": "The query requires a function to compute the factor and offset of a linear regression model using the least squares method. It involves calculating these parameters based on provided data series, handling potential division by zero, and adjusting for step and start values in the series.",
        "url": "bf587f6399e742e7aba0f76f6ecacae3"
    },
    {
        "nl_input": "The query requires a function that removes an element once from different data structures: list, set, or dictionary. The removal should be done in-place, handling each type appropriately\u2014using `remove()` for sets and lists, and `del` or `pop()` for dictionaries. It should return the removed element.",
        "url": "0a08a131b7f20c6ae80cbd8db43c9210"
    },
    {
        "nl_input": "The query describes a logout process that removes the current session from the cache. It specifically involves clearing the session and setting the `auth0_key` in the cache to `None`. The expected behavior is a clean session termination, ensuring no residual session data remains in memory or cache storage.",
        "url": "6b1aedce31fc54b676ef475bbccca0f4"
    },
    {
        "nl_input": "The query requires a function that retrieves the background color in an RGB tuple format, likely for processing cell or image background colors. The most relevant code provides a method `_get_background_color` that extracts a background color from cell attributes and converts it to an RGB tuple normalized to 0-1 values.",
        "url": "85dfbd57feec7e7e4e52db546ce843e9"
    },
    {
        "nl_input": "The query requires the probability density function (PDF) of a normal distribution. The PDF describes how the probability is distributed over the values of a random variable with a normal distribution, characterized by its mean `mu` and standard deviation `std`. The provided code includes a function that computes the PDF using these parameters.",
        "url": "f5cbc71ac811b41099e04e17f8e31c77"
    },
    {
        "nl_input": "The query requires retrieving the MachineGuid value from the Windows registry path HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Cryptography. The relevant code uses Python's winreg module to access the registry, open the specified key, and retrieve the \"MachineGuid\" value. No other codes provided are related to this registry reading task.",
        "url": "e3bf9172dd49a9a59f04d9306fdbf881"
    },
    {
        "nl_input": "The query requires a function that returns the top-level element of a document sub-tree containing the YAML serialization of a Python object. The function should convert the object into a YAML-formatted string and wrap it in a structure that represents the top-level of a document tree.",
        "url": "f80d296aa7ce2fb9662847a78d719948"
    },
    {
        "nl_input": "The query seeks a function to fit exponential decay data. The relevant code defines `exp_fit_fun` with parameters `x`, `a`, `tau`, and `c`, returning `a * np.exp(-x / tau) + c`, which models exponential decay with an offset `c`.",
        "url": "ce8760834322972b4fa83206ed10c958"
    },
    {
        "nl_input": "The query requires a function to remove decoded instructions from the instruction cache. The provided code includes a function `invalidate_cache(cpu, address, size)` that deletes entries from the instruction cache within a specified address range, matching the requirement.",
        "url": "c8cfb7fd4310c734636a046495ee2078"
    },
    {
        "nl_input": "The query requires a function that reads the first line of a file and returns it stripped of newline characters. If the file contains more than one line, a default value should be returned. The implementation should handle files in binary mode and decode them using UTF-8.",
        "url": "c506dda59325d20d5965f344e05d1d0e"
    },
    {
        "nl_input": "Return the amount of characters in this token list.",
        "url": "45e6a2312d51a32582aceb7c2ab19780"
    },
    {
        "nl_input": "The query seeks a function to find the closest matching key (or key-value pair) in a dictionary where all keys are strings, using fuzzy matching based on a similarity threshold. It requires handling approximate key matches and returning the closest key and/or corresponding value.",
        "url": "227eced7ff543a599d686706f73f1699"
    },
    {
        "nl_input": "Read a file with one item per line, removing duplicates by storing the entries in a set. Return the de-duplicated collection as a set of strings. The function should read the file line by line, strip any trailing whitespace (like newline characters), and add each item to a set for automatic deduplication.",
        "url": "af678636432a410c764ca9cb0a1afa68"
    },
    {
        "nl_input": "The query requires a function that outputs a string to the console (stdout), with support for customizing text color and background, as well as controlling the end character and output stream. The function should handle immediate flushing of the output buffer and restoring default colors after printing.",
        "url": "828984305b0d337fae5e014dce303d6e"
    },
    {
        "nl_input": "The query requires a function that can import a class or function based on its absolute path. The provided code includes a function `import_by_path` which takes a string path, partitions it into module and class names, imports the module dynamically, and returns the desired class or function via `getattr`. This mechanism supports dynamic importing based on fully-qualified paths.",
        "url": "355e9f8613c706128bec8cc335909375"
    },
    {
        "nl_input": "The query requires a utility that conditionally prints output based on a `verbose` flag being set to `True`. Among the provided code options, the relevant implementation uses a function that checks the `verbose` argument and only proceeds with printing if it is `True`, ensuring controlled and optional output logging.",
        "url": "c2e5110262917b6ebfe935a20ae47862"
    },
    {
        "nl_input": "The query requires implementing an element-wise softplus activation function on the input. The softplus function is a smooth approximation of the ReLU function, typically defined as $ \\text{softplus}(x) = \\log(1 + e^x) $. The correct code should apply this transformation to each element of the input tensor independently.",
        "url": "23005309942f0a6b09cddbb10972e548"
    },
    {
        "nl_input": "The query requires an iterator function that reads a file line by line, parsing each line as JSON. It should yield JSON objects one at a time, processing each line individually rather than loading the entire file.",
        "url": "041dfc26ca25ef267899427de19315e1"
    },
    {
        "nl_input": "A simple and reliable peak finder function that identifies all indices of maximum values in a list or array, returning them as an iterator. The implementation should be straightforward, without complex dependencies or additional helper functions.",
        "url": "a81da6bde809fcb933671792c5feb2ca"
    },
    {
        "nl_input": "The query requires a function that removes trailing zeroes from an indexable collection of numbers. The relevant code defines a method `__remove_trailing_zeros` that takes a collection, finds the last non-zero element from the end, and returns the collection up to that point, effectively stripping any trailing zeros.",
        "url": "18282b3d8bec1a731e59daf433dfd841"
    },
    {
        "nl_input": "The query seeks a function that computes the maximum value of an array along a specified axis, supporting NumPy operations and maintaining dimensionality if required. It involves using or implementing a max reduction operation with support for axis and keep-dimension parameters.",
        "url": "a35ad1a4dd29efc1322f1abb1af58fc6"
    },
    {
        "nl_input": "The query requires a function to compute a hash of an iterable of arbitrary length using constant O(1) memory. The hash should combine the type of the iterable and its elements in a memory-efficient way.",
        "url": "264508a3cfd0a1c3ebd6eda1a8efe7c6"
    },
    {
        "nl_input": "The query requires checking whether a flyweight object with a specified key has already been created. This is achieved by verifying the existence of the key in the object's key collection or instance dictionary, as demonstrated by methods like `check_key` and `has_key` in the provided code examples.",
        "url": "1f298b72446c9d426a3f72d16b7519dd"
    },
    {
        "nl_input": "The query requires a function to copy each element of a collection into a new list, ensuring deep copying. Among the provided codes, the second one satisfies this by iterating through elements and invoking their `copy` method, returning a new instance with copied elements. Other functions are for list conversion and chunking, not matching the requirement.",
        "url": "a99ed37d53f472069723258e200ebd61"
    },
    {
        "nl_input": "The query requires a function that retrieves the value of a cell at a specified row and column. The function should take row and column names as input and return the corresponding cell value from a matrix structure using row and column indices.",
        "url": "8dec57e52e7ed4372e59774ea788a4cb"
    },
    {
        "nl_input": "The query requires a function to convert a list into a string by joining its elements, ideally with a customizable separator. The provided code includes a function `list_to_str` that fulfills this requirement by converting each element to a string and joining them using the specified separator, defaulting to a comma if none is provided.",
        "url": "38ff90082d85c5f7fea097765e369093"
    },
    {
        "nl_input": "The query requires removing a resource instance from an internal cache. The provided code demonstrates how to achieve this by using the `__delitem__` method, which removes a resource from the cache based on its type and internal key via `get_cache_internal_key()`. Additionally, there is a `cleanup` method that deletes all instances and plugins in a loop, offering broader cache-clearing functionality.",
        "url": "bf6a4144ae873567dfbd61579c2bba94"
    },
    {
        "nl_input": "The query requires running unit tests. The provided code options support executing Python unit tests either using `unittest`, `tox`, or `py.test`, with options for verbosity and environment configuration.",
        "url": "7bd4b3dfbcd3512c6c868dd135577546"
    },
    {
        "nl_input": "The query requires a function to convert a string into a list by splitting it using a separator, stripping whitespace from each item, and removing empty values. If the resulting list is empty, a `ValueError` should be raised. Additionally, there is a utility for sanitizing strings in an iterable by stripping whitespace or preserving non-string items.",
        "url": "1e5368f3b43db029f24ec30a718ddd75"
    },
    {
        "nl_input": "Create a new Image instance of specified size filled with a solid color. The function should take parameters for size and fill color, and return the newly created image with the provided background color.",
        "url": "e2f935a5471d0c81e26004ffca00f05d"
    },
    {
        "nl_input": "The query requires a string hashing function using the djb2 algorithm that ensures consistency across Python 2 and 3, as well as persistence between runs. The provided code includes a suitable implementation of the djb2 hash function, `_string_hash`, which meets these requirements.",
        "url": "92cd3b014d092cfeac9dedc5c78bc968"
    },
    {
        "nl_input": "The query requires attaching a callback to the group pubsub. The relevant code demonstrates how to subscribe to a pubsub channel using `subscribe` and assign a callback function to handle updates.",
        "url": "c6a79937f94ef8bf784d0ba67544fc5d"
    },
    {
        "nl_input": "The query requires displaying all available logging information. The provided code snippets involve logging mechanisms using `logger.info`, `print_log`, and a custom `pout` function that may write to standard output or log files. These functions format and output log messages, some with color support or prefixes. The goal is to extract and describe logging-related functionality from the given code.",
        "url": "b1185ffd3684956e7a014023d1d730e1"
    },
    {
        "nl_input": "The query requires converting a list of Python Unicode strings into a Java String array using the `javabridge` library. It involves creating an object array in the Java environment, populating it with UTF-encoded strings from the Python list, and returning the resulting Java array.",
        "url": "cb7ea10fe8e12a61d1c4426495277b2b"
    },
    {
        "nl_input": "The query requires executing a command within the active virtual environment. The command should be installed in the virtualenv and properly invoked with arguments, ensuring that the execution handles paths and escaping correctly. Additionally, it implies checking whether an executable exists in the system PATH before running it.",
        "url": "4b6a114bab89cc57079b686d158c8dc2"
    },
    {
        "nl_input": "The query requires a function to retrieve a set by name, potentially creating it if specified. The provided code includes a method `_get_set` that fulfills this requirement by using a type identifier 'set' and a default empty set. No file operations or additional parameters are needed for this specific task.",
        "url": "4a5f1c5d94b495eb1d55bb70bfb4e935"
    },
    {
        "nl_input": "The query requires a function that uses PIL to determine the bounding box of a rendered image, handling edge cases like empty pages and compensating for coordinate system differences between images and PDFs. It also involves converting pixel units to PDF points and returning the final bounding box in the correct format.",
        "url": "cf3ce037b96a42e72d396298a671ad3f"
    },
    {
        "nl_input": "The query requires a function that parses a format string to identify and extract substitution patterns, specifically using regular expressions to locate content within parentheses. It involves processing a string for dynamic replacements based on identified patterns.",
        "url": "5727620d57aa415b320a2caf400e156f"
    },
    {
        "nl_input": "Process an iterable of dictionaries, removing the specified key from each dictionary if it exists. The operation should be performed in-place on the dictionaries within the iterable.",
        "url": "9c7542a2ddb9b898a1ef814aa988a382"
    },
    {
        "nl_input": "The query requires initializing the state of an object, setting a start time for the state, and potentially handling object creation and saving functionality. The focus is on managing internal object state during initialization and tracking when the state begins.",
        "url": "9ebd199a3bad6857c594078352fc308a"
    },
    {
        "nl_input": "{\n  \"requirement\": \"Return a dictionary of distances keyed by the keys in the given dict.\"\n}",
        "url": "bee73c442bef215e9afdbde513dea74f"
    },
    {
        "nl_input": "The query seeks a function that returns the bounds of a window or region as a tuple in the format (x, y, w, h). The provided code examples demonstrate similar functionality in different contexts, such as returning rectangle dimensions, extracting regions from images, and calculating bounding boxes. The main requirement is to retrieve spatial bounds in a tuple format representing position and size.",
        "url": "bfcfd9614f0ea2bb08b2f413845cfe91"
    },
    {
        "nl_input": "The query requires a function to delete a specified file from the local filesystem. The function should check if the file exists before attempting deletion to avoid errors. No directory removal or pattern-based deletion is required. The simplest solution involves using `os.remove()` after confirming the file's existence with `os.path.exists()`.",
        "url": "17728e7096342292cd488ebca0d9b0cd"
    },
    {
        "nl_input": "The query requires a function that checks if a given string `x` is a valid date in the format YYYYMMDD. If the string represents a valid date, return `True`; otherwise, return `False`. The validation should strictly ensure the input matches the required format without allowing extra characters or invalid dates.",
        "url": "8dce08e6c99c22329f7a299e12d01400"
    },
    {
        "nl_input": "The query requires a function to safely convert a single number to an integer, ensuring type safety and handling potential conversion errors gracefully. The function should raise a descriptive error if the conversion is not possible.",
        "url": "cb150b8a0bfcc950bb207c95077778d3"
    },
    {
        "nl_input": "The query requires a function to format a given timestamp into a UTC datetime string in the ISO 8601 format: `YYYY-MM-DDTHH:MM:SS.000Z`, suitable for use with Elasticsearch.",
        "url": "bec2bb3dbbcb3542f275f94bece9fff6"
    },
    {
        "nl_input": "The query requires a function to convert Markdown content into plain text. The provided code uses the `markdown` library to convert the Markdown content into HTML and then applies an `html_to_text` function (not explicitly defined) to extract the text. Additionally, there is a function to read text from a file, which may be used to load the Markdown content before conversion. Overall, the goal is to process Markdown input and return its plain text representation.",
        "url": "a98a0d961b4a5dfb134ed7d96517dc6a"
    },
    {
        "nl_input": "Return an ISO 8601 formatted string representation of a given datetime object.",
        "url": "42dabaf1c6f12b6da12ac8fbb5b231fe"
    },
    {
        "nl_input": "The query requires a function to convert a string to bytes in Python 3, handling different input types and encoding appropriately.",
        "url": "e5d70952cf637a2fa0cd1455199a8e33"
    },
    {
        "nl_input": "The query requires a function to parse an integer from a value, robustly handling cases where the input may contain commas or non-integer characters. The function should ignore formatting cruft, strip commas, and convert the value to an integer. It should also handle integers, floats, and string representations of numbers consistently, returning a clean integer result when possible.",
        "url": "ce0452492d46cab7a6354fbcfb785abf"
    },
    {
        "nl_input": "The query requires a function that reads the contents of a text file. The provided code includes three variations of such a function, each opening and reading a file from a given path. These functions return the content of the file as a string. The key requirement is to extract the functionality that reads text from a file and returns it, which all three implementations fulfill.",
        "url": "c17f502f4969f974e5c6e15cb098c59e"
    },
    {
        "nl_input": "Given a list of rows and a column name, find the row with the maximum numerical value in that column and return it as a single-element list.",
        "url": "b28453d2e0b8222a369ff53ddfa194a9"
    },
    {
        "nl_input": "The query requires a function to normalize a list of numbers by dividing each element by the total sum of the list. The normalization should return a new list with scaled values.",
        "url": "b81fe6522b305a5caff1b0ff9b17acdc"
    },
    {
        "nl_input": "Start the Django development server, optionally specifying a port. The server is started using `python manage.py runserver` with the provided port argument. Additionally, there is logic for serving static files during development and handling static file configurations when debugging is enabled or when explicitly allowing insecure serving.",
        "url": "694887945fe811afedbc4b26d3d370ef"
    },
    {
        "nl_input": "The query seeks to determine the file extension for an ABI3-compliant extension, which is platform-dependent. The code checks available extensions and returns `.pyd` on Windows or an extension containing `.abi3` on Unix systems.",
        "url": "013baf410fba66902adf797b55ac8aa1"
    },
    {
        "nl_input": "The query requires a function that removes empty text utterances from a list. The provided code defines a function `remove_empty_text` that filters out utterances with empty or whitespace-only text, returning only those with non-empty content.",
        "url": "5ca8d1be36d4955478ff4ef72fbc653a"
    },
    {
        "nl_input": "The query seeks to determine whether any of the specified files exist. It involves checking the existence of one or more files, with possible handling of file paths and potential errors during the check.",
        "url": "0a26527d2153f952031786977dfda90c"
    },
    {
        "nl_input": "The query highlights that `kwarg` values always have defaults. It emphasizes ensuring that keyword arguments in functions are assigned default values, typically through dictionary-like operations to handle optional parameters gracefully. This is evident from the provided code patterns using `setdefault` and conditional checks for `None` or empty values.",
        "url": "b7b9cfe9bc7611c1ad042e6257d5ab3d"
    },
    {
        "nl_input": "The query requires a function that reads and iterates through each image file in a given directory, yielding both the image data and its corresponding file path. It specifically involves processing image files using OpenCV's `imread` function after joining the directory path with the filename. The traversal should be done sequentially for all image files in the provided directory structure.",
        "url": "711c408a26e009e46a957a3bc5891670"
    },
    {
        "nl_input": "The query requires a function that parses a URL and extracts the hostname. The function should take a string URL as input and return the hostname as a string. The provided code uses `urllib.parse.urlparse` to parse the URL and extract the network location (`netloc`), removing any port number if present. If no network location is found, it returns an empty string.",
        "url": "13343f8f3c5515600e035d8cca7abd84"
    },
    {
        "nl_input": "The query involves implementing a slicing operation on an array, where the slice starts at a specified index and spans a given size. The code should return a subarray based on these parameters.",
        "url": "d2b5b746f02bfe0d8d6ff1f510e1828e"
    },
    {
        "nl_input": "The query requires determining the SQL typename needed to store a given FieldDefinition. The relevant code provides methods to extract data types as strings, either through `simpleString()` for field data types or via a helper function `getTypeStr` that handles type representation, including custom types and built-in type names.",
        "url": "af0980ef65b107138b9164f39686a882"
    },
    {
        "nl_input": "The query requires calculating the fill similarity between two regions in an image based on their bounding box sizes and the total image size. The similarity metric is derived from the difference between the combined bounding box area and the sum of individual areas, normalized by the image size.",
        "url": "ce8ba68fe6e18f6be13595643c857111"
    },
    {
        "nl_input": "The query requires functionality to remove a specific `Series` from a chart. The relevant code provides a method `remove_series` that removes a given series from the chart's collection, ensuring at least one series remains. It also sets the series' chart reference to `None`.",
        "url": "67cf3739e350f2ea5801335c51b59d6b"
    },
    {
        "nl_input": "The query requires retrieving all column names and their corresponding data types from a dataset or table structure, returning them as a list of tuples in the format (column_name, data_type).",
        "url": "1001aab66e7872b45d9825d901ea4412"
    },
    {
        "nl_input": "The query requires a function to convert a ctypes float pointer array into a NumPy array. The function should accept a pointer and length, validate the input type, and use NumPy's `fromiter` method for conversion.",
        "url": "ce6eacb4f12ded20e034e69bafe8d36c"
    },
    {
        "nl_input": "Take a list of values, iterate through each, and if a value is a string, strip its whitespace. If an item is not a string, leave it unchanged. Return the resulting list with strings stripped of whitespace and non-strings intact.",
        "url": "c5e0bd41ae3189370dbad3a0bf904d17"
    },
    {
        "nl_input": "The query requires converting input values into a list of scalars by handling various input types such as strings, dictionaries, and non-iterable values. It involves coercion logic to ensure each value is processed into a standardized list format suitable for further operations involving a lookup field.",
        "url": "2acfd946899b1082d7f65b3960457769"
    },
    {
        "nl_input": "The query requires a function to generate a random datetime within a specified range. The provided code includes a method `_rnd_datetime` that generates a random datetime between a start and end timestamp by converting them to UTC timestamps, using `random.randint`, and then converting back.",
        "url": "7d26da2177ec3962d36d304e92d85b02"
    },
    {
        "nl_input": "The query seeks a function that pads a given string or value `x` with leading zeros to a specified `width`, ensuring the output string has the desired fixed length. The function should handle non-string inputs by converting them to strings first.",
        "url": "ec71b8a5543bb8262f46f32c31348dea"
    },
    {
        "nl_input": "The query requires a function that converts a list into a space-separated string and inserts it into a dictionary. The provided codes only include functions for converting a list to a string with a separator and converting a list of key-value pairs into a dictionary, but none combine both operations as required.",
        "url": "a318fa43339d6fa4ed9b949a5b77562e"
    },
    {
        "nl_input": "The query requires initializing a noise variable. The provided code includes functions for generating different types of noise, such as normal noise and shot noise, which can be used to fulfill this requirement.",
        "url": "f1f28c0dd35c71a830aa7cbc94c40f10"
    },
    {
        "nl_input": "The query requires retrieving an iterable of column names for a specified table or view from a database. The relevant code should interact with the database schema, such as using SQL queries or database-specific commands to extract column information.",
        "url": "d7658ee7d6f5d6fb22fece433d0eb088"
    },
    {
        "nl_input": "Converts camelCase or PascalCase strings to snake_case by inserting underscores before uppercase letters and converting the entire string to lowercase.",
        "url": "78f9639da029a80f29cbed10f796c01c"
    },
    {
        "nl_input": "The query requires creating a conda environment within a specified sandbox directory using a list of dependencies and optional command-line options. A function to accomplish this constructs the appropriate `conda create` command, logs relevant information, and executes the command to set up the environment.",
        "url": "372b930fd10719406ee97e024c0a53a1"
    },
    {
        "nl_input": "Add a new column to the current database table using the `add_column` function, which takes a connection and a column definition as parameters. The function executes an Alembic DDL statement to alter the table structure and updates the metadata to reflect the change.",
        "url": "fc0fba0d26d93f6bd9c23bc1314f2d81"
    },
    {
        "nl_input": "The query requires a function that checks whether a specified key exists in a datastore, returning `True` if the key exists and `False` otherwise. The function should accept the key as a parameter and perform a membership check against the datastore's keys.",
        "url": "cca5dd52a3d19626fff09249a49c1508"
    },
    {
        "nl_input": "The query seeks a debugging aid that produces an ASCII-art representation of a tree structure starting from a given node. The output should visually depict the hierarchy using indentation or prefixes, helping to trace parent-child relationships in a readable format.",
        "url": "11cf04105fcbba8990217a87a8578844"
    },
    {
        "nl_input": "The query requires a function that computes the natural logarithm of input values and returns the result as a NumPy array.",
        "url": "167edd67f1adeb4d6c5cfb29e50e9308"
    },
    {
        "nl_input": "The query requires a redraw event handler for a figure panel that prevents redundant updates. It involves a method that checks if an update is already in progress, and if not, it updates the figure panel using the current figure data.",
        "url": "081aa8089b7e676937cd3affc2e08cd8"
    },
    {
        "nl_input": "Apply a Gaussian blur to the input data using parameters such as kernel size and sigma values. The blur should be applied by convolving the data with a Gaussian kernel, either directly or through separated 1D kernels, ensuring smoothing in both horizontal and vertical directions.",
        "url": "7e9213011cfc7c3f677806f277665dc3"
    },
    {
        "nl_input": "The query requires a function to set the value of a checkbox based on the provided input, where the checkbox is checked if the value is true and unchecked otherwise. The correct implementation involves setting the checkbox state using `setChecked` with `Qt.Checked` or `Qt.Unchecked` depending on the input value.",
        "url": "529e86a0567df6183fe381968569a669"
    },
    {
        "nl_input": "Convert dictionary keys and values into native strings using a function that ensures all key-value pairs are represented as strings. The solution should process a dictionary and return a new dictionary with stringified keys and values.",
        "url": "5e241db72862fc70c36e7e20ad5edea0"
    },
    {
        "nl_input": "The query requires a function that returns the fully qualified name of an object by combining its module and name attributes. The function should handle cases where the module attribute may be absent.",
        "url": "50fd86592c25f16bbc23c5961ad15dea"
    },
    {
        "nl_input": "The query requires a function to read and load data from a JSON file. The desired functionality includes opening the file in read mode and using the `json.load` method to parse its contents. Optionally, it may involve handling ordered data using `OrderedDict` or logging functionality for debugging purposes.",
        "url": "218ac30809c3bdc7d261a5ea19802ace"
    },
    {
        "nl_input": "Check whether a given value is a scalar, including numeric types and zero-dimensional arrays.",
        "url": "8970a4c2fc876814d02a1c6e13dc45be"
    },
    {
        "nl_input": "The query requires a function to swap rows `i` and `j` in a matrix. The provided code defines `_swap_rows(i, j)` which creates a permutation matrix `L` to swap the specified rows and updates the matrix `A` using this permutation. This function modifies the internal state of the object by updating `_L` and `_A`.",
        "url": "d0357f86ddf7b0105d9d1b1b69314584"
    },
    {
        "nl_input": "The query requires a test function that can execute automated tests using `unittest`, support verbosity levels, and discover test cases from a specified directory. It should return the test results in a detailed format.",
        "url": "2aec19bb1e81428966e9d71583289404"
    },
    {
        "nl_input": "The query requires a simple Python function to compute the Nth Fibonacci number. The function should use basic iteration with variables to track the sequence and return the result for the specified position.",
        "url": "215b9f753c4bedbf5e252691c757d9ae"
    },
    {
        "nl_input": "The query requires a function to convert a datetime object to a timestamp with millisecond accuracy. Among the provided code options, the appropriate function is `datetime_to_ms(dt)`, which calculates the total seconds using UTC time and adds the millisecond component from the microseconds.",
        "url": "ba63741c151123bfce637e652480a02a"
    },
    {
        "nl_input": "The query seeks to determine the deepest level of nesting within a list of lists. It requires a function that can recursively analyze each element in the list, check if it contains nested lists, and return the maximum depth encountered during traversal. The solution should handle varying levels of nesting and ignore non-list elements when calculating depth.",
        "url": "54daf1d9eb3d92a38eb85fd0febb6a26"
    },
    {
        "nl_input": "The query requires an iterator that reads a string in fixed-size chunks without line buffering, returning each chunk upon iteration. It emphasizes that buffering is managed externally, and the main task is to yield reasonably sized portions of the input string sequentially.",
        "url": "b66381638399324a2212ecf9179e9699"
    },
    {
        "nl_input": "The query requires a function to remove duplicates from a list while preserving the original order of elements. The function should efficiently track seen items using a set and return a new list with duplicates removed.",
        "url": "74f3af5ff87a388959abca8a236acf5c"
    },
    {
        "nl_input": "The query requires a function to move the cursor to a specific line in a text editor buffer. The cursor should be positioned at the start of the given line number, accounting for zero-based indexing by subtracting 1 from the line number and using `translate_row_col_to_index` to compute the correct position.",
        "url": "85bf8f526e4cc0590ecb0b556389c65a"
    },
    {
        "nl_input": "The query requires starting a Pdb (Python debugger) instance at the calling frame, with its standard output routed to `sys.__stdout__`. This allows debugging to occur without interference from any redirection of `sys.stdout`, ensuring that debugger output is sent directly to the original standard output stream.",
        "url": "0a05a5da32b1fb72cca49d13dc8e3410"
    },
    {
        "nl_input": "Normalize a list of numbers by dividing each element by the sum of the list, ensuring the resulting sum is 1. For example, `normalize([1, 2, 1])` should return `[0.25, 0.5, 0.25]`.",
        "url": "f9b02c7991372e2168cda998af17b5df"
    },
    {
        "nl_input": "Renames a specified column in a DataFrame. Takes the DataFrame, current column name, and new column name as parameters. Modifies the column name in place by updating the DataFrame's columns list. Only changes the first occurrence of the column name.",
        "url": "8afe30c3c1d7a21a89370867722d657a"
    },
    {
        "nl_input": "The query requires functionality to validate and expand IP address ranges. This includes handling both single IP addresses and network ranges, with the ability to parse and generate all host IPs within a given network. The solution should utilize Python's `ipaddress` module for accurate validation and expansion of IPv4 or IPv6 addresses.",
        "url": "4e29078b31bdc20c9249a66228a95f11"
    },
    {
        "nl_input": "The query requires converting a NumPy array into a string format suitable for database storage. The provided code includes functions that either serialize the array into bytes or convert it into a string representation with metadata such as shape and data type, ensuring it can be stored or reconstructed later.",
        "url": "85791d7ca6694ef78a7d42f79c958ef6"
    },
    {
        "nl_input": "The query requires a function that removes stopwords from a list of words. The function checks each word, converts it to lowercase, and includes it in the output list only if it is not present in a predefined list of stopwords.",
        "url": "6ce9ae857507f7292c65caae0d829141"
    },
    {
        "nl_input": "Asegurar la existencia de un directorio: Verifica si un directorio existe y, en caso contrario, lo crea.",
        "url": "ffb454a23a874db7b8ba84dec008ffc9"
    },
    {
        "nl_input": "The query requires a function that checks whether the input is a 2D NumPy array of boolean type. The provided code includes a function `is_bool_matrix` that correctly performs this check by verifying the input's type, dimensionality, and data type.",
        "url": "8a3b1c52b2ad77e9fd817568f4cec12c"
    },
    {
        "nl_input": "The query requires a description of the approximate size of a queue. Among the provided code options, the relevant implementation is a method that acquires a mutex lock, calls an internal `_qsize` function, releases the lock, and returns the result. This indicates a thread-safe approach to retrieving the queue's size. However, the result is noted as not reliable. \n\n**Description (within 80 words):**  \nThe query seeks the approximate, potentially unreliable size of a queue, likely in a thread-safe context, where the size is retrieved by acquiring a mutex lock, calling an internal method, and then releasing the lock.",
        "url": "66ad16d7b38f79a6e991c2f96f9a6395"
    },
    {
        "nl_input": "The query requires a function to join elements of an iterable into a comma-separated string, converting each element to a string type before joining. The function `commajoin_as_strings` meets this requirement by using `six.text_type` to ensure each item is a string and then joins them with a comma.",
        "url": "d5cd6bdee354cd4c13e1317060fe6702"
    },
    {
        "nl_input": "The query requires a function to push an item onto a heap while maintaining the heap invariant. Among the provided codes, the function `heappush_max` achieves this by appending the item to the heap and then calling `_siftdown_max` to restore the heap property. The other functions are unrelated to heap insertion.",
        "url": "b7ef5c01f2bb54150c1e764f1b5301aa"
    },
    {
        "nl_input": "The query seeks a function that retries a given operation until it no longer raises an `EINTR` (interrupted system call) error. The desired behavior includes catching the specific error, continuing the loop if it's `EINTR`, and raising it otherwise to stop execution.",
        "url": "b5df8b3347e8f9eddcd0ec1aa6e25197"
    },
    {
        "nl_input": "The query seeks to evaluate the probability density function (pdf) at the peak value within a specified range, typically normalized between low and high values. It involves computing the pdf for a Gaussian distribution at a specific point (the peak), using mean and standard deviation parameters.",
        "url": "0b331f2127c3538176983a9640cb177f"
    },
    {
        "nl_input": "The query requires a Python function that removes comments starting with `#` from a given line of code, ensuring that quoted strings containing `#` are not affected. The function should return the cleaned line without the comment portion.",
        "url": "e9606c2ede25ed01dadee38b936b292b"
    },
    {
        "nl_input": "The query seeks a simple method to determine if a URL is relative or absolute. The relevant code checks if the URL starts with a fragment identifier (`#`), contains a scheme (`://`), or begins with `//`, returning `True` for relative URLs and `False` for absolute ones.",
        "url": "a7c751f435108eb653de787c9016c077"
    },
    {
        "nl_input": "The query requires inserting multiple items into a temporary table in bulk. The relevant code should handle batch insertion efficiently, potentially using methods like `executemany` or similar database operations that support inserting a collection of records at once.",
        "url": "c4bbbb9264cf558138ca7d49ad446d86"
    },
    {
        "nl_input": "The query requires a function that checks whether all elements in an array satisfy a given test condition. It should return `True` if all elements pass the test, and `False` otherwise. The function may need to handle multi-dimensional arrays recursively.",
        "url": "46e171604d456aab34ab6b4d624435a2"
    },
    {
        "nl_input": "The query requires a function that calculates and returns the total memory byte size of a given Numpy array as an integer. The calculation should consider the array's shape and data type, multiplying the total number of elements by the byte size of each element.",
        "url": "f0456030f3cb36953670e94276edb1d5"
    },
    {
        "nl_input": "The query requires a function to remove specific problematic characters from a string, replacing them with an underscore. The targeted characters include punctuation and whitespace such as colons, commas, parentheses, spaces, pipes, semicolons, and apostrophes.",
        "url": "be5711e9db130456deb244ee94eed831"
    },
    {
        "nl_input": "The query requires obtaining the Excel worksheet reference for X values in a chart, specifically excluding the column label. The correct code defines a method that computes the range of rows for a given series and returns the corresponding cell range in Excel notation (e.g., \"Sheet1!$A$2:$A$5\"). This reference points to the data column (column A) starting just below the header row.",
        "url": "25e289a769f7ae896c02b2c308474c4e"
    },
    {
        "nl_input": "The query requires a function that generates a random string of a specified length, using uppercase letters and digits. It must return a string of customizable length, defaulting to 10 if not provided.",
        "url": "d0012fec75a957ee2d77e2ac6478bdee"
    },
    {
        "nl_input": "The query requires a function to convert a structured NumPy array into a Table. The provided code examples include conversions involving NumPy arrays but none directly implement the structured array to table transformation. The desired functionality likely involves serializing or transforming structured array data into a tabular format with appropriate type handling.",
        "url": "4193356c3a00f554a415099595307044"
    },
    {
        "nl_input": "The query requires handling HTTP responses for unauthorized access, specifically identifying or managing a 403 Forbidden status code. It involves examining functions related to HTTP response handling, error raising for non-OK statuses, and resource existence checks via HTTP methods like HEAD. The focus is on detecting and responding to unauthorized access scenarios in web applications.",
        "url": "d5eeb1f8ad1e4d020d24cce0e3083342"
    },
    {
        "nl_input": "The query requires a functionality to stop or interrupt a progressing task or process, potentially involving thread handling, kernel interruption, or disabling a stop button after click. It focuses on safely terminating operations and managing execution states like `_progressing`, `_stop`, and `_reading`.",
        "url": "66112d5d1ef6700a828265dbc4da86d6"
    },
    {
        "nl_input": "The query requires a progress bar functionality that can be updated, displayed, and eventually stopped. It should reflect progress as both a ratio and a percentage, update with each tick, display a visual indicator (like a '+'), and include the capability to stop the progress tracking smoothly.",
        "url": "9402a316375e935cabce06eadf9d542a"
    },
    {
        "nl_input": "The query seeks a serialized representation of a column, including attributes such as schema, table, name, and type, suitable for local caching purposes.",
        "url": "7720471d366176807aa531dadb064217"
    },
    {
        "nl_input": "The query seeks to determine the default WSGI handler used by the runner. The relevant code defines a method `get_handler` that returns an instance of `StaticFilesHandler`, wrapping the internal WSGI application. This handler serves static files during development and is tied to Django\u2019s built-in WSGI setup.",
        "url": "3f2207516acc039310a03d719345bbd1"
    },
    {
        "nl_input": "The query requires a function that converts a time string in the format `%H:%M:%S` into integer seconds. The input is a string representing time in hours, minutes, and seconds, and the output should be the total number of seconds equivalent to that time.",
        "url": "64d9dc81c20e31b854e0eab01dee6498"
    },
    {
        "nl_input": "The query seeks to restore the scrollbar position after the main window becomes visible. The relevant code retrieves a stored scrollbar position from options and applies it to the treewidget, ensuring the scrollbar returns to its previous state when the window is displayed.",
        "url": "00b975fe0f0c6867c45f8b890f4fe429"
    },
    {
        "nl_input": "Converts a sequence of string identifiers into a sequence of integer identifiers.",
        "url": "6eaf6a5e1e5f229137f1cf2cf2bfdaca"
    },
    {
        "nl_input": "The query requires a function to remove duplicates from an iterable while preserving the original order of elements. The function should return a new list with only unique items, maintaining the order in which they first appeared.",
        "url": "215a474be7e5886d15c8a3a59eb1b842"
    },
    {
        "nl_input": "The query requires a pre-order depth-first traversal implementation for processing hierarchical data structures like trees or graphs, where nodes or elements are visited recursively before their children. The functionality should capture depth information during traversal, potentially calculating or tracking the depth of nested structures using a recursive approach.",
        "url": "7f09c0c1fb655aa7be69dd12ae8b3459"
    },
    {
        "nl_input": "The query requires a function that checks or ensures a file is readable. The provided code includes functions related to file readability, permission setting, and validation. A function named `make_file_readable` modifies file permissions to make it readable if it is not a symbolic link. Another function `is_readable` tests whether a file pointer can read a specified number of bytes, confirming readability. These functions fulfill the need to handle or verify file readability in Python.",
        "url": "ace76e2287f89f73f0d302ad68c6b28d"
    },
    {
        "nl_input": "The query requires a function to convert a string from snake case to camel case by splitting the input text at underscores and capitalizing subsequent words.",
        "url": "c954b335d705a71796714fc13a69018b"
    },
    {
        "nl_input": "The query requires a function to colorize text using a specified color. The input includes a color and a text string, and the output should apply the given color to the text using terminal ANSI codes or a similar coloring mechanism.",
        "url": "b0187a0236d4299c56f0154fb18e9680"
    },
    {
        "nl_input": "Given a valid Python module path, extract the method name passed and retrieve the corresponding method from the module. Ensure the method exists within the specified module.",
        "url": "4a9b986374bae09d4078e1f195a5d2c4"
    },
    {
        "nl_input": "The query seeks a function that converts bytes into an integer, supporting both big and little endian byte orders and handling signed integers, similar to Python's built-in `int.from_bytes` method. It emphasizes functionality for converting byte sequences into numeric values with specified endianness and sign.",
        "url": "aad5675e5e47b94c38b92c39e101b732"
    },
    {
        "nl_input": "The query requires checking whether a given data type (`dtype`) is a subclass of NumPy's datetime types, specifically `numpy.datetime64` or `numpy.timedelta64`. The solution involves using `np.issubdtype()` to determine if the provided dtype inherits from these datetime types.",
        "url": "a1bda233eb59bf9da775dcb1ca1b62c7"
    },
    {
        "nl_input": "The query requires a function that returns a dictionary of key-value pairs from `os.environ` for a given list of keys, where missing keys are assigned a default value. The function should use `os.environ.get()` with a specified default (e.g., `_UNDEFINED`).",
        "url": "40a703bc56a740baa9b642c07f243912"
    },
    {
        "nl_input": "Return a tuple that contains (width, height). Pass in a URL to an image and find out its size without loading the whole file. If the image width and height cannot be found, the tuple will contain None values.",
        "url": "cf303e12e0a23ea3d8cf9d64a44bb720"
    },
    {
        "nl_input": "The query requires a function that retrieves a configuration value from a main config object if it exists, returning a default value otherwise. It also allows for optional type conversion of the retrieved value.",
        "url": "386feb46f7695b77a7a29cf6c0dc5ac9"
    },
    {
        "nl_input": "The query requires functionality to set foreground and background colors along with text intensity. The provided code includes methods related to color handling, such as setting console colors with Colorama, retrieving background colors, and a placeholder for a color-setting function. However, a complete implementation for setting both colors and intensity is not directly available among the snippets.",
        "url": "7f7b530bb1644e7ff3a20d39b9f6d9fa"
    },
    {
        "nl_input": "The query requires a function that writes a string to a file. The provided code includes functions that write data to a file in binary mode and another that writes JSON content. The main requirement is to save textual data into a file, potentially with specific formatting or encoding.",
        "url": "cfe10971d3e9565b10d9a8da615d0b58"
    },
    {
        "nl_input": "The query requires a utility function to sort file tabs alphabetically. The function should handle sorting of tab text in a natural order, potentially involving custom key sorting and maintaining original indexes when necessary.",
        "url": "65c25e4888533db2382a5501c97b7fe7"
    },
    {
        "nl_input": "The query requires reconstructing an image from a TensorFlow Example by decoding it using `tf.image.decode_image`, ensuring the shape is set correctly. The relevant code decodes an image with specified channels and data type, then sets its shape according to `_shape`. Other provided codes for URL image fetching and region extraction are not directly relevant.",
        "url": "ee6f7f25b60a54d1abdd6b0904517c41"
    },
    {
        "nl_input": "The query requires adding SGI MIPS C++ builders and construction variables to an environment. This involves setting the C++ compiler to `'CC'`, using `-LANG:std` as the C++ flag, specifying shared object handling, and ensuring static and shared objects are treated the same. The goal is to configure the build environment for SGI MIPS C++ compilation.",
        "url": "d86c7ef069bae9bd25b1719469eaa20e"
    },
    {
        "nl_input": "The query seeks a proximal operator that projects onto the zero set, which is achieved by the `prox_zero` function. This function returns an array of zeros with the same shape and data type as the input, effectively projecting any input to zero.",
        "url": "fe2927654759fba2b7cfee8b53e498ca"
    },
    {
        "nl_input": "The query requires converting a date or datetime object into a Unix timestamp in milliseconds. The code should handle date/datetime objects, convert them to a time tuple, and then calculate the timestamp in milliseconds using calendar.timegm. Adjustments for microseconds are also relevant if high precision is needed.",
        "url": "c45019dbaf87a4dda8ed93145a8d72d9"
    },
    {
        "nl_input": "The query requires a function to retrieve the parent directory of a given filename or file path. The desired functionality involves using operating system path utilities to extract the directory name, and potentially handling absolute paths or returning a default value if necessary.",
        "url": "d4c1f44c7bd93d72431c1636e15a2c94"
    },
    {
        "nl_input": "The query requires a function that takes a multi-dimensional array as input and returns a one-dimensional array containing all the elements from the original array. The output array should have the same elements in a flattened structure, regardless of their initial nesting level.",
        "url": "6c2f0cae41d4a8defbd80e5fc9ecf368"
    },
    {
        "nl_input": "The query requires functionality to read and process JSON data from a file or URL. This includes opening the file or URL, reading its contents, decoding and parsing the JSON data, and returning it in a usable format. The implementation may involve reading entire files, streaming line-by-line, or handling remote URLs using libraries like `json` and `urllib`.",
        "url": "22b581c617befce3a934d35f780c7538"
    },
    {
        "nl_input": "The query requires forcing the compilation of an expression specifically for the SQLite target. The relevant code demonstrates a `compile` function that utilizes `to_sqlalchemy` from the `ibis.sql.alchemy` module, indicating the conversion of an expression into SQLite-compatible SQL using SQLAlchemy.",
        "url": "1c31b5225729722e73162d729a8a9e91"
    },
    {
        "nl_input": "The query requires a function to patch modules with gevent, falling back to multithreading if gevent is unavailable. It involves checking for gevent and grequests existence, logging a warning if missing, and applying monkey patching before proceeding. The function should return the appropriate execution mode (GEVENT or MULTITHREAD).",
        "url": "b2d8c9ff02a806e11c86616df579b848"
    },
    {
        "nl_input": "The query requires a function that returns a list of synsets for a given word after lemmatization. The suitable code defines `has_synset`, which uses `lemmatize` to process the word and then retrieves its synsets using WordNet (`wn.synsets`).",
        "url": "ef50ba41894d62298e768a8a40286eeb"
    },
    {
        "nl_input": "The query requires identifying the longest ORF from a list based on sequence length. The relevant code sorts the ORFs by sequence length in descending order and returns the first entry, which corresponds to the longest ORF.",
        "url": "88b2e5b638d21e4cad0678aa5548008d"
    },
    {
        "nl_input": "The query requires a function that returns the name of the current Git branch by executing a Git command. It involves calling `git rev-parse --symbolic-full-name HEAD` and processing the output to extract the branch name.",
        "url": "313f3e2f971c34ffd53caa9c21f4515c"
    },
    {
        "nl_input": "The query requires extracting data from a URL and parsing it using JSON. It involves opening a URL connection, reading the response data, decoding it as UTF-8, and converting it into a JSON object for further processing.",
        "url": "d9b236e9fcf20fa21ca7851c87a14c84"
    },
    {
        "nl_input": "The query requires a function that exits the program or shell session after performing cleanup operations, such as closing resources or connections, and may involve command execution.",
        "url": "552e6841d09f58e5e1c8fb096c977099"
    },
    {
        "nl_input": "The query requires testing a multiprocessing setup by starting a process, allowing it to run for a set duration (e.g., 5 seconds), and then stopping it. Additionally, it involves running multiple processes in parallel using a thread pool, distributing the workload across available threads. The focus is on concurrency control and process management.",
        "url": "305d82a1849c66873989c4284d69ab1d"
    },
    {
        "nl_input": "The query requires functionality to save the current session to a file, ensuring that if a session was previously saved, it is properly overridden. The implementation should serialize session data, likely using a file-based storage mechanism, and handle any existing saved session by replacing it with the current state.",
        "url": "426b13c860e6d3db831d7782b6af8328"
    },
    {
        "nl_input": "Create an (n+1)-dimensional one-hot encoded array from an n-dimensional integer categorical array. The one-hot encoding should convert each integer into a binary vector where only the position corresponding to the integer is 1, and all others are 0. The function should support specifying the output data type, with a default of `np.float32`.",
        "url": "c5ab7e6fd56d3fb3273938700034235b"
    },
    {
        "nl_input": "The query requires a function that truncates a decimal value to a specified number of decimal places without rounding, preserving the exact value up to the given precision.",
        "url": "a9f00f4b4472333451594b653fd3ddf4"
    },
    {
        "nl_input": "The query requires a function to close or terminate a child subprocess. It involves checking if the subprocess exists, sending a termination signal (such as SIGTERM), and ensuring proper cleanup by confirming the process is no longer alive after termination.",
        "url": "12a0563f902fd7a97c3632a9db804067"
    },
    {
        "nl_input": "The query seeks a function to check if a given value is an integer, long integer, or float. It requires identifying whether the input belongs to any of these numeric types, covering both Python 2 and Python 3 standards for integer types, and ensuring that floats are considered valid as well.",
        "url": "11f24e28ca5d6dfbed610eec3da9c58d"
    },
    {
        "nl_input": "The query seeks a function to raise or bring forward a specified figure window. The relevant code provides a function `raise_figure_window` that takes a figure number or object, retrieves the associated figure, and raises its window.",
        "url": "67b7ab9b728b03a77afa0fe61d8517e2"
    },
    {
        "nl_input": "The query requires a function that checks whether all elements in a given list are equal. The function should return `True` if all elements are the same, and `False` otherwise. It must handle empty lists and ensure the input is a list.",
        "url": "2d9deba8d6ccb83eaf09c795b1e77e6a"
    },
    {
        "nl_input": "The query requires a function that encodes a list of strings into a single string. The encoding should process each string by prefixing it with its length followed by a colon, and concatenate all such processed strings into one output string.",
        "url": "f796b43787cd30bb20850ab43571b623"
    },
    {
        "nl_input": "The query requires a function to read a public RSA key from a PEM file. The provided code includes a function `import_public_rsa_key_from_file` which opens the file in binary mode and uses `serialization.load_pem_public_key` to load the key.",
        "url": "15c537891f0dde8802ff6c44a92ad71e"
    },
    {
        "nl_input": "Retrieve the contents of an object stored in Amazon S3 and return it as a decoded string using the specified encoding.",
        "url": "6b951991361dc39522cbc34fb09ce7bc"
    },
    {
        "nl_input": "The query requires a function that counts how many times a given method has been wrapped by checking for the presence of a `__aspects_orig` attribute recursively. The count increases each time the attribute exists, and the process continues until it no longer exists.",
        "url": "0ce77b0ad69c4b908a250a40ad5ce9dd"
    },
    {
        "nl_input": "The query requires a function to write data to a FITS file. The function should accept data and a file name, create a FITS HDU with the data, and save it to disk. Overwriting an existing file should be allowed, and a log message confirming the write operation should be included.",
        "url": "34b2636593edbd5cd8975c050f2db4ac"
    },
    {
        "nl_input": "The query requires an iterator that reads a string in fixed-size chunks, without line buffering, returning each chunk upon iteration. The implementation uses a generator to yield data from the input string in 1024-byte increments, ensuring reasonable chunk sizes regardless of buffering strategy.",
        "url": "b66381638399324a2212ecf9179e9699"
    },
    {
        "nl_input": "The query requires a function to kill or terminate a process, specifically by using a `Popen` object. The function should check if the process is alive, terminate it gracefully, and confirm that it has been terminated. Additionally, proper cleanup of resources related to the process is expected.",
        "url": "ff5650a6fb621a5dd82d24d3fdc0acc1"
    },
    {
        "nl_input": "Convert a UTC datetime object to the corresponding Unix timestamp, representing the number of seconds since January 1, 1970, 00:00:00 UTC.",
        "url": "e81cce5fd2d39302c2607c85226f94d8"
    },
    {
        "nl_input": "The query requires a function that removes and returns an element at a specified index from a list, with the ability to handle default indexing (such as removing the last item when no index is provided). The function should modify both a list and an associated dictionary structure to maintain consistency.",
        "url": "e13e58839609a1526153c3e30429efd5"
    },
    {
        "nl_input": "The query requires a function that loads a module based on a given version. The correct module is determined using a mapping of supported libraries by version. If the module has not been previously loaded, it should be imported dynamically using its name. Other functions related to dependency checking or installing packages are irrelevant to this task.",
        "url": "cd7a724a7a438604f3c2ad7be5002c74"
    },
    {
        "nl_input": "The query requires a function to convert a string into a sanitized list by splitting it using a separator, stripping whitespace from each item, and filtering out empty or `None` values. It also validates that the resulting list is not empty, raising an error otherwise.",
        "url": "1e5368f3b43db029f24ec30a718ddd75"
    },
    {
        "nl_input": "The query requires a function to transparently unzip a file handle. The input may be a string path or an existing handle, which should be processed using appropriate gzip methods. The result should return the opened handle after decompression, supporting further reading operations.",
        "url": "4df8b32d822042305892bf4e9ffbf95a"
    },
    {
        "nl_input": "The query describes a scenario where an action is triggered when a new item in a drop-down list is selected. The relevant code should handle the selection of a value, potentially involving logging and updating the UI or model based on that selection.",
        "url": "bbc7873866d390e8731cc146e44f537d"
    },
    {
        "nl_input": "The query requires a function to compute the standard deviation of a set of values, optionally accepting a precomputed mean. It should handle sample data by calculating the mean if not provided and applying the sample standard deviation formula.",
        "url": "058eaf9c0c5351b7b551170db3cfeb8a"
    },
    {
        "nl_input": "The query requires a function that calculates and returns the time difference in milliseconds between the current time and a given `start_time`. The function should utilize datetime operations to accurately compute the elapsed time.",
        "url": "d49558a22ad4625b2bbd4e37fe9b2f37"
    },
    {
        "nl_input": "Adds a supplied dictionary as a new entity via a POST request to the \"connections\" endpoint. If the HTTP response status is not 201, a ServiceRegistryError is raised. On success, the decoded response is returned.",
        "url": "043f36a47ed7073d2532d69e54bbd43d"
    },
    {
        "nl_input": "The query requires a function that returns the indices of all occurrences of the maximum value in an array. It emphasizes efficiency by leveraging `x.max()` for performance, particularly with NumPy arrays, and handles multiple maximum values by returning all corresponding indices as a generator.",
        "url": "b63b959eb91b99f3a70976d46e49ae48"
    },
    {
        "nl_input": "Check whether all elements in `x` are instances of any type in the given list `types`. The validation applies to each element individually, ensuring that each belongs to at least one of the specified types.",
        "url": "5ab579ff3b2ee7681b98e2869ba83148"
    },
    {
        "nl_input": "The query requires a helper method to check if a given set of types contains exactly one element, which is the `AnyObject` type. The method should return `True` if the set meets this condition, and `False` otherwise.",
        "url": "ddc17c866549c6ed7d51235989c860c8"
    },
    {
        "nl_input": "The query requires a function to serialize a NumPy array into YAML format. The provided code includes a function `numpy_to_yaml` that converts a NumPy array into a YAML sequence using the `representer`, fulfilling the requirement.",
        "url": "68912019b18c412305b0cdb7486fec01"
    },
    {
        "nl_input": "The query seeks to calculate the covariance between two spatial points using a `Vario2d`-based model. It involves extracting covariance information from a function that computes the covariance matrix for two points, returning the off-diagonal element representing their covariance.",
        "url": "1cc6545a29dbb49958711e7c2b5d549f"
    },
    {
        "nl_input": "The query requires comparing two strings after collapsing all contiguous whitespace into a single space. The comparison should ignore differences in the number or type of whitespace characters, as long as they form contiguous blocks, and only consider the resulting normalized strings for equality.",
        "url": "5b70ae74acdc38b5b21bbe84441c0c9d"
    },
    {
        "nl_input": "The query requires checking if a specific dependency module is installed and available. It involves verifying the presence of a given executable in the system's PATH environment variable, ensuring that required dependencies are properly set up before proceeding with execution.",
        "url": "84e2d66751e0a8ee1b8ae1a7abcdbac3"
    },
    {
        "nl_input": "The query requires a function to serialize a Python object into a JSON string. The ideal solution should handle complex objects, potentially including custom serialization or the use of external libraries. It may also include optional parameters like indentation for pretty-printing and should ensure valid JSON output that aligns with standard serialization practices.",
        "url": "fb7d849f7856e91684a22299e34b8e2d"
    },
    {
        "nl_input": "The query requires a function that returns one value if a condition evaluates to TRUE and another value if it evaluates to FALSE. The provided code includes a function `_if` that takes a logical test, a value for true, and a value for false, returning the appropriate value based on the evaluation of the condition.",
        "url": "2552c85beba28c28615849a68c3cbdde"
    },
    {
        "nl_input": "The query requires a function that reads a Python object from a specified YAML file. The function should open the file, read its contents, and parse the YAML data into a Python object.",
        "url": "fbbe03581abc8a6791e6650ce07ec9ba"
    },
    {
        "nl_input": "The query requires a function to round a given time down to the nearest half-hour mark. For example, if the time is 1:17 PM, it should be rounded down to 1:00 PM; if it's 1:35 PM, it should be rounded down to 1:30 PM. The datetime object's minute value should be adjusted to the closest lower multiple of 30.",
        "url": "7ef0b3dda0b7af841693956bd803333a"
    },
    {
        "nl_input": "The query requires a function to detach all tracked classes and objects, restoring original constructors and clearing tracking lists. The function should thoroughly remove all tracked instances and references, effectively resetting the state of the system to its initial condition without residual links or stored objects.",
        "url": "c6cd16b1f8c53bd52a696c9afd132194"
    },
    {
        "nl_input": "The query requires checking whether a specified JSON element is present for a given task. The solution should accept a service, task, and property name, then return `True` if the property exists in the task's response from the service. If an error occurs during retrieval, it should handle the exception gracefully and return `False`.",
        "url": "e8395d634fd7e19cbe150042998fd059"
    },
    {
        "nl_input": "The query requires a function that splits a string into parts at multiple specified characters. Only the first code achieves this by iterating through the string and splitting whenever a character matches one in the splitters set. The other codes split by length, not by characters.",
        "url": "7d09bf15750d9a6d6c96b7cee93c93a3"
    },
    {
        "nl_input": "The query requires a function that can remove or reset elements within a specified range, from `start` to `stop`. The most relevant code provides a method that sets values to `NOT_SET` within the given range, effectively emptying or clearing that portion of the data structure.",
        "url": "df5d600ef0977e23ecd997c06192235b"
    },
    {
        "nl_input": "The query requires a function to convert an ARRAY string retrieved from a database back into a Numpy array. The input is a string representation of the array, and the output should be a properly reconstructed Numpy array object.",
        "url": "7ab4dcc303b95f41a8e282a1be11765c"
    },
    {
        "nl_input": "The query seeks an internal function to handle the pickling problem in Python 2. The provided code includes functions for saving and loading Python objects using `pickle` and `dill`, which can help overcome compatibility issues in Python 2.",
        "url": "6f49a9d3d5434a4da776633e29108547"
    },
    {
        "nl_input": "The query requires a function that handles string input in both Python 2 and Python 3. It should use `input()` for Python 3 and `raw_input()` for Python 2, ensuring compatibility across versions. The function must accept an optional prompt parameter and return the user's input as a string.",
        "url": "080fc0fc8b3ab53b0bf658fa8b4f0b09"
    },
    {
        "nl_input": "The query requires building command-line argument parsers using Python's `argparse` module. It involves setting up a default parser with custom formatting and program name, defining a function to add specific command-line arguments (like `--check` and positional `component`), and parsing tuple strings for input handling.",
        "url": "3f4199e0fe99241698056724f54fe656"
    },
    {
        "nl_input": "The query requires functionality to extract and format specific columns from a row, and to print tabular data with proper alignment and formatting. It involves column selection, row indexing, and structured table output with dynamic column sizing.",
        "url": "c90da7779a167e77043c04ce9292eb6e"
    },
    {
        "nl_input": "The query requires a function that, given a datetime object `t`, returns the day number of the last day of the month. The function should compute and return the numerical day (e.g., 30 or 31) representing the last day of the month in which `t` falls.",
        "url": "820668a155ea53034787f1042a2328c0"
    },
    {
        "nl_input": "The query seeks a function that takes a nested list as input and returns a flattened list containing all the elements. The provided code includes two implementations of such a function, one using recursion to handle deeply nested lists, and another using list comprehension for flattening.",
        "url": "746e950661be8d29bb8cf497c2bb802a"
    },
    {
        "nl_input": "The query requires identifying the HTTP request method implementation within the provided code snippets. The `_request` function accepts an `method` parameter specifying the HTTP method (e.g., GET, POST), indicating how HTTP requests are executed in the interface.",
        "url": "81f78b855d5b8fe9705ac46615003bea"
    },
    {
        "nl_input": "The query seeks a helper method that checks whether a given set of types contains exactly one element, which must be the `AnyObject` type. The method should return a boolean value indicating the result of this check.",
        "url": "ddc17c866549c6ed7d51235989c860c8"
    },
    {
        "nl_input": "The query requires converting a 4x4 NumPy row-major matrix to a flat column-major array of type GLfloat. The transformation involves transposing the matrix, flattening it into a 1D array of 16 elements, and then casting it to a GLfloat array. The provided code correctly implements this by transposing the input matrix, flattening it, and converting it into a tuple of GLfloat values.",
        "url": "59d8da7afcf5b0e96574ac4215a35798"
    },
    {
        "nl_input": "The query requires a function to remove the legend from a plot. The provided code includes a function `remove_legend` that sets `ax.legend_ = None` and redraws the plot, effectively removing the legend. Other functions are unrelated, as they handle plotting finalization or series removal.",
        "url": "84f9940c4dee76cc18b2c7cf263add76"
    },
    {
        "nl_input": "The query requires a function to parse a string representation of a tuple into an actual tuple, handling cases where the input may already be a tuple. The provided code includes a function `_parse_tuple_string` that converts a comma-separated string into a tuple of integers, leaving existing tuples unchanged.",
        "url": "971e5642fa7223efcc06c337dca4248b"
    },
    {
        "nl_input": "The query requires a Python function that converts a string representation of a date into a corresponding `date` object. The function should handle both string inputs and direct `date` objects, returning the appropriate date output.",
        "url": "dfec582c3aa4ec5eaafa97cc052f017e"
    },
    {
        "nl_input": "Generate x and y NumPy arrays representing the range spanning \u00b14 standard deviations from the mean of a Gaussian distribution, suitable for plotting the distribution curve.",
        "url": "8d2a0bf0c1937e144da08f9d53432914"
    },
    {
        "nl_input": "The query requires a function that can trigger a specified event or action in another component or area, optionally passing parameters. It implies a system where different areas or components can communicate and interact through triggers. The core requirement is to invoke a named trigger on a target with arbitrary parameters, suggesting an event-driven or modular architecture.",
        "url": "93fd9d04ea0ba686378532352580da58"
    },
    {
        "nl_input": "The query requires a method to ensure that the YAML dumper uses a multi-line string style when necessary. Specifically, it should check for newlines in the data and use the `|` style for scalar strings if present. This functionality is achieved by customizing the string presenter function in the YAML dumper.",
        "url": "d04afb88b8e76370816e10e2ef0489ce"
    },
    {
        "nl_input": "The query requires a function that ensures a given function is only callable once. Any subsequent calls should have no effect.",
        "url": "e3cab059569d3c5bbd974a42e0a7a488"
    },
    {
        "nl_input": "The query requires creating a Graphviz graph from text input. The relevant code accepts a text string to generate a Graphviz Source object in SVG format and returns the rendered output as a UTF-8 decoded string, effectively converting input text into a visual graph using Graphviz.",
        "url": "c492f4d1b811b4b2f599b2b594ef2fa4"
    },
    {
        "nl_input": "The query requires a method to retrieve the next value from an iterable structure, advancing the iteration state and updating remaining count upon successful retrieval.",
        "url": "1cd8598eada8e6213ad9a5841079e3a4"
    },
    {
        "nl_input": "The query seeks to instantiate a new `Document` object from a collection, using a method that allows passing of arguments and keyword arguments, including the collection itself. It involves creating an instance of a document class with flexible initialization parameters.",
        "url": "4bae73fa2bdaf7b167050bf6b5c09902"
    },
    {
        "nl_input": "Given a segment (rectangle) and an image, the task is to extract the corresponding subimage defined by the rectangle's coordinates and dimensions. The provided code includes a function `region_from_segment` that correctly performs this operation using array slicing with the rectangle values `(x, y, w, h)` to return the subimage from the input image.",
        "url": "adf1e40be190a7d6a349c02a10d5a420"
    },
    {
        "nl_input": "Formats a number with a specified number of decimal places, using a period as the decimal separator and optionally including commas for thousands.",
        "url": "6c190d35f3b002574675f1e3ab001e73"
    },
    {
        "nl_input": "The query requires a `decode` function that accepts a `bytearray` and a `raw` flag, returning a decoded value. The function should handle decoding bytes using a specified format, potentially involving buffer conversion and structured unpacking.",
        "url": "57a4c6f385e589e91cd6625dab4b410e"
    },
    {
        "nl_input": "The query requires a function to fetch an image from a given URL and convert it into a Pillow Image object. The process involves downloading the image data using a GET request, then opening and returning the image using Pillow's `Image.open()` method.",
        "url": "927f00ae21352b1a481fdb3b3a998709"
    },
    {
        "nl_input": "The query requires applying a 2D Gaussian convolution to an image using a 1D Gaussian kernel. The provided code demonstrates how to perform this operation by convolving the image with the 1D kernel along each axis (first along rows, then columns) using `scipy.ndimage.filters.correlate1d`.",
        "url": "e9c213af9e538bd916581d4896dba6bb"
    },
    {
        "nl_input": "The query requires verifying that a mock object was called exactly once. It involves checking the call count of the mock and raising an assertion error if the count is not precisely one, ensuring the mock's usage meets the expected single invocation condition.",
        "url": "283407ebde908befdeb4f9e9a180dcad"
    },
    {
        "nl_input": "The query requires a function to compute the L2 norm of an array, defined as the square root of the dot product of the vector with itself. The input is an array, and the output should be its corresponding L2 norm value.",
        "url": "6eae45bb8c323c115cf65c7a07fdcc89"
    },
    {
        "nl_input": "The query seeks to lock a connection to prevent its use elsewhere. The relevant code involves a `lock` method that acquires a lock and sets a locked state, ensuring exclusive access by blocking other uses of the connection.",
        "url": "816895340ccbbbb54d93a01f6a2e90d8"
    },
    {
        "nl_input": "The query requires calculating the MD5 hash of a file. The relevant code reads the file in binary mode and uses the `hashlib.md5()` function to compute the hash, returning its hexadecimal digest. This approach ensures accurate hashing by reading the entire file content.",
        "url": "26bc7d3a200bdf0ca8e1859c261311a2"
    },
    {
        "nl_input": "The query requires obtaining a `ctypes` void pointer to a memory-mapped region. The relevant code casts a pointer to a `c_uint8` buffer of a memory-mapped object into a `c_void_p` type, providing access to the raw memory address.",
        "url": "fec232c19895c2355a9c5e0943bd3500"
    },
    {
        "nl_input": "Return a DataFrame containing rows where the values in the specified column `col_name` of `df` are duplicated.",
        "url": "71ac2d55c8dc09493dd8ee9bf38f707a"
    },
    {
        "nl_input": "The query requires a function to validate email addresses using Django's core validators. It attempts to validate the given email string and returns `True` if valid, otherwise `False` when a `ValidationError` is raised.",
        "url": "c6194fe5a34f0e66d7c6f7108b41e3c2"
    },
    {
        "nl_input": "The query requires a function that can load a floating-point value from a given memory address. If the second argument starts with an asterisk (`*`), it should be treated as an indirect memory address. The solution must handle memory access and float value retrieval correctly.",
        "url": "036b4c02ed9098fec68a728552683cf6"
    },
    {
        "nl_input": "Create an object of a given class with specified content members.",
        "url": "06e514824a4cbc11df6792c766d1107e"
    },
    {
        "nl_input": "The query requires converting a list of Python Unicode strings into a Java String array using the `javabridge` library. It involves creating an object array in the Java environment and populating it with UTF-encoded string elements from the Python list.",
        "url": "cb7ea10fe8e12a61d1c4426495277b2b"
    },
    {
        "nl_input": "The query requires a function to return a list of distinct values from a given list, preserving the original order. The solution must not rely on `collections.OrderedDict` and should be compatible with Python 2.6.",
        "url": "328596b5f38ea5aea10ae6d53e289f18"
    },
    {
        "nl_input": "The query requires a function that removes all spaces and newline characters from a string, returning the cleaned string as the output.",
        "url": "ffaf50749737d70a6ecb6ce9b0f9ac24"
    },
    {
        "nl_input": "The query requires a function that checks whether a specified key exists in a datastore, returning `True` if the key exists and `False` otherwise. The function should accept the key as a parameter and utilize existing methods or properties to determine key existence.",
        "url": "cca5dd52a3d19626fff09249a49c1508"
    },
    {
        "nl_input": "The query requires identifying the last row or column of a square matrix. The relevant code involves determining the last index based on dimensions, swapping rows, or retrieving the last entry from a table. The focus is on operations that access or manipulate the final row or column in a structured data format.",
        "url": "cffe83a2e89929847264ed6d72d2bfca"
    },
    {
        "nl_input": "The query requires a function to split a multiline string into a list of non-blank lines, with each line stripped of leading and trailing whitespace. Only lines containing text after stripping should be included in the resulting list.",
        "url": "aea5c1280e87fefede7936dd80701640"
    },
    {
        "nl_input": "The query requires a function to remove all namespaces from an XML document, specifically processing elements in the document tree by modifying their tags to eliminate namespace prefixes. It involves iterating through elements and cleaning up namespace annotations for a fully stripped output.",
        "url": "4897101b66976544fdacfbf2e9c0905c"
    },
    {
        "nl_input": "Ends an indentation block and ensures a new line is added if not already done.",
        "url": "42b3324ffb7137bc277bcb02f986b8c2"
    },
    {
        "nl_input": "The query seeks a function to convert structured data such as lists, tuples, or objects into a string representation, with support for custom formatting, separators, and handling of special cases like single-element tuples. It aims to display structured information in a readable string format.",
        "url": "8d8f80a0b950b795f1c8a086acdd7118"
    },
    {
        "nl_input": "The query requires a function to print a list of lists (table) in a formatted tabular layout with aligned columns, headers, and separator rows. It should compute column widths based on the maximum content length and display rows with proper spacing and borders. Example output includes headers, a separator line, and data rows enclosed within pipes (`|`).",
        "url": "fdf9c3138a50fcd116a6a649d76c6fd5"
    },
    {
        "nl_input": "The query requires extracting the domain part of a URL. The desired functionality involves parsing the URL to retrieve the network location (netloc) and may involve removing any port number that follows it. The result should return only the domain name, ensuring clean and accurate extraction from the provided URL input.",
        "url": "e252a286af69716cea212276bf27704f"
    },
    {
        "nl_input": "The query requires moving a turtle forward by a specified step. The relevant code should update the turtle's position based on its current rotation angle using trigonometric functions, ensuring the movement aligns with the direction it is facing. Additionally, the brush should remain active during this movement to draw the path.",
        "url": "a90e229ae60bf14f33825c5a2076279a"
    },
    {
        "nl_input": "The query requests the power state of a server. The relevant code retrieves the power state using a method that queries the system's power status and maps it to a readable value.",
        "url": "4df736d409ad256e418ff40790a155c7"
    },
    {
        "nl_input": "The query requires a function to print system information, including details like version and MAC addresses. The implementation should utilize asynchronous calls to retrieve system and interface data from a provided `Device` object.",
        "url": "a9ce795a398353c1a729dd88e9f36571"
    },
    {
        "nl_input": "The query requires a function that processes a stored procedure call, returning the first row of the result or `None` if there are no results. It should accept parameters for the procedure name, arguments, and an optional row factory.",
        "url": "3517a110d923d3d76980623ab8f32f0a"
    },
    {
        "nl_input": "Process an iterable of dictionaries, and for each dictionary, remove the entry associated with the specified key if it exists. The operation should be performed in-place, modifying the original dictionaries without raising errors if the key is not present.",
        "url": "9c7542a2ddb9b898a1ef814aa988a382"
    },
    {
        "nl_input": "The query requires a function that processes comments by splitting or formatting them, with support for handling multi-line values and returning properly structured comment strings. It appears to focus on operations such as transforming raw comment text into a formatted form, potentially for documentation or code parsing purposes.",
        "url": "ec7551975fa7792ee15876bf8a1fd28d"
    },
    {
        "nl_input": "The query requires a function that generates a temporary filename based on an original filename. The desired functionality involves appending a suffix such as \".incomplete\" followed by a random string to the provided filename, ensuring uniqueness and preventing overwrites during file operations.",
        "url": "5d64d35b32b31a5d6d02bfa0b6d93eff"
    },
    {
        "nl_input": "The query requires making a HEAD request to a specified URI. The code demonstrates sending a HEAD request using the `requests.request` method, where the HTTP method is dynamically set but defaults to 'HEAD'. It also shows handling responses and raising exceptions for error statuses, ensuring the existence of a directory by checking response status.",
        "url": "1de08117571a8ec22d8964787f402111"
    },
    {
        "nl_input": "The query requires a utility function to remove duplicates from a list while preserving the original order. The function should take a sequence (list) as input and return a new list with duplicates removed, using an efficient approach that leverages set operations for optimal performance.",
        "url": "695e29d80ca42056024f20cf87ce69a0"
    },
    {
        "nl_input": "The query requires ensuring that a URL's path starts with a leading slash when the URL includes an authority (host). If the host is present and the path is non-empty, the path must begin with `/`, otherwise, an error should be raised.",
        "url": "c1479c1418466abefea9034bbb795fa5"
    },
    {
        "nl_input": "The query requires forcibly removing objects from memory. The relevant code demonstrates object deletion through methods like `del(instance)`, `clear()` on collections, and resetting keep-alive references, ensuring immediate memory release without relying on garbage collection.",
        "url": "54e361163495de66afd390a12edfd5bd"
    },
    {
        "nl_input": "The query requires a function that checks whether all numbers in a sequence `s` lie within the interval defined by `l` and `r`. The interval can have inclusive or exclusive boundaries, depending on the `border` parameter. The function should return `True` if all elements are within the interval, and `False` otherwise.",
        "url": "b81cfdd240c83e76a6587150b51a1068"
    },
    {
        "nl_input": "The query requires enforcing HTML escaping, which may result in double escaping of variables. The relevant code defines a function `do_forceescape(value)` that checks if the value has an `__html__` method, executes it if present, and then applies `escape()` to the Unicode representation of the value, ensuring HTML-safe output.",
        "url": "3dd1d55124da3efc3cb4dcc02a252531"
    },
    {
        "nl_input": "The query seeks a logarithmic loss function that supports non-binary labels, implying a multi-class classification scenario. It requires computing the negative log-likelihood by taking predicted probabilities and true labels as inputs, with the assumption that labels may represent class distributions rather than one-hot encoded vectors.",
        "url": "a7e256b73adf2d656acee870a3a79760"
    },
    {
        "nl_input": "The query requires computing the Pearson correlation coefficient between true and predicted values, which involves handling potential NaN values and using a correlation function. Covariance and chi-square calculations in the other codes are unrelated to this specific requirement.",
        "url": "95479cad0b74fe06bcd262b9f5750cff"
    },
    {
        "nl_input": "The query requires a function to save an object to a pickle file in binary mode. The function should take the object and a filename as input, open the file in write-binary mode, use `pickle.dump` to serialize the object, and ensure the file is properly closed after saving. Optionally, using the highest protocol for serialization is acceptable.",
        "url": "a0c6bdbe745a48b0c5ff9e6435ea812c"
    },
    {
        "nl_input": "The query requires calculating the size of a request payload. The payload size is determined by summing the sizes of individual components, such as strings and data structures, potentially involving streaming data. The solution should handle dynamic data types and include both direct size computation and iterative reading for stream-based size calculation.",
        "url": "96a858eabc728fc5967a94fb8288ff8b"
    },
    {
        "nl_input": "Draw a horizontal line at a specified position with given width and color.",
        "url": "bb672ed0a0391881ee18bccacf406e44"
    },
    {
        "nl_input": "The query is asking whether logging should be skipped for a specific handler. The relevant code checks if a request header (`x-request-nolog`) indicates logging should be disabled or if the function has a `SKIP_LOGGING` attribute set to true.",
        "url": "e9004b0eb97dd8833d1979057cf3557e"
    },
    {
        "nl_input": "The query requires a function to remove leading and trailing spaces from strings within an iterable, handling non-string elements gracefully. It emphasizes stripping whitespace, potentially using built-in string methods or regular expressions, and preserving the original structure of the input while ensuring clean output strings.",
        "url": "939f688bbd8bfbcb8630b0f3636c5c14"
    },
    {
        "nl_input": "The query requires a function that removes duplicates from a list, returning a new list with only unique elements. The deduplication should preserve the original order of items. Multiple implementations are provided, all achieving this goal using different naming conventions and variable names. Each version ensures uniqueness by tracking seen elements with a set and reconstructing the list without repeats.",
        "url": "3cbb0d61a47fcf107eb90adf46f865af"
    },
    {
        "nl_input": "The query requires a function that converts a PySpread style dictionary into an `xlwt` Pattern object for Excel styling. It involves extracting the background color from the style, converting it into an index using a helper method `color2idx`, and setting up the pattern attributes accordingly.",
        "url": "9c92cc076049eee7eda2f0428ba69851"
    },
    {
        "nl_input": "The query requires a function that, given a key and a tuple of tuples, returns the key located immediately before the specified key in the sequence. If the provided key is the first or not found, it should return `None`.",
        "url": "a9f49c41a4259bbd6e398fd943917f8f"
    },
    {
        "nl_input": "The query requires synthesizing white noise with a specified duration. The implementation generates random audio samples uniformly distributed between -1 and 1, using the samplerate to determine the number of samples per second. The output is returned as an `AudioSamples` object.",
        "url": "f262d61c7690f2df3b731ba862e94301"
    },
    {
        "nl_input": "Convert a sequence to a comma-separated string; if the input is a single object, return its string representation.",
        "url": "933992c3c30c3e7204a12c26102f4cff"
    },
    {
        "nl_input": "The query requires applying GZIP compression to a response. The provided code examples demonstrate how to compress data using the `gzip` module in Python, specifically by writing the response into a GzipFile object and returning the compressed bytes. One function is designed for compressing a buffer, while another handles unzipping, indicating that the desired functionality focuses on compression rather than decompression.",
        "url": "01df1f7502b37cbfa0c1093f3ac8af8d"
    },
    {
        "nl_input": "The query seeks to determine whether a given string is a punctuation character. It utilizes a function that checks if the lowercase version of the input text is not part of defined sets of vowels or consonants, implying that it is a punctuation if it doesn't belong to either set.",
        "url": "e4b57fbe5c67f44a11eb1116c674b42e"
    },
    {
        "nl_input": "The query requires a function that checks whether a given key exists in a dictionary in a case-insensitive manner. The function should return `True` if the key exists (regardless of case), and `False` otherwise.",
        "url": "da943b499fe7be187ec7e73bf3623c8f"
    },
    {
        "nl_input": "The query requires a function that processes text by converting it to lower case, which is used as part of a sorting mechanism. The relevant code provides a function that retrieves a title from an instance and returns it in lower case for sorting purposes.",
        "url": "bf8ce0236578b4476e2e2300f7e64037"
    },
    {
        "nl_input": "The query requires a function that computes the mean of non-None elements in a list, handling missing data represented by a sentinel value. It involves summing valid elements and dividing by their count, returning None if no valid elements exist.",
        "url": "fdb8b5e3cd38ee9a1c11aac2eb093594"
    },
    {
        "nl_input": "The query requires a function that writes a dictionary to a JSON file. The provided code includes a function `_write_json` which meets this requirement by using `json.dump` to write the contents to a file with indentation and sorted keys.",
        "url": "380b53a3dd3846cf3bce78ed3f7cb50d"
    },
    {
        "nl_input": "The query requires functionality to perform a drag-and-drop action, specifically dragging one element and dropping it onto another. The suitable code defines a method `drag_and_drop` that uses Selenium's `ActionChains` to execute the drag-and-drop operation between two elements.",
        "url": "76d7727145c20df82e3cdd84ce19c14e"
    },
    {
        "nl_input": "The query requires a function to convert a flat list into a structured list with a specified shape and data type. The provided code includes functions related to list shaping and flattening, but the relevant function is `shape_list`, which uses NumPy to reshape and cast a list into the desired form.",
        "url": "75029e9b5315bf8366b2c9d646b179e4"
    },
    {
        "nl_input": "The query seeks a convenience method to adjust the font size. The relevant code defines a function `set_font_size` that updates the font size only if the new size differs from the current one, optimizing unnecessary changes.",
        "url": "9b8369463483ff7acf0d48fdb0173ba3"
    },
    {
        "nl_input": "The query requires a function that converts coordinates from Minigo format to GTP format. The function should handle `None` input by returning `'pass'`, and for valid coordinates, it should transform the given coordinate using `_GTP_COLUMNS` and adjust the y-value using `go.N`. The output must be a formatted string representing the GTP coordinate.",
        "url": "f80f557e979d5bad8c10b42ac118bcda"
    },
    {
        "nl_input": "The query requires a command to run PyLint on the source code with an option to specify HTML output format. It should allow verbose analysis and generate a report accordingly.",
        "url": "4e7fc7292467413a1cfacc5b3c233894"
    },
    {
        "nl_input": "The query requires selecting rows from a table where a specified field is not `None`. The function should allow for optional complement behavior, where instead of selecting non-`None` values, it selects `None` values when enabled.",
        "url": "4637b5cbf53ffd9b5dc57fa7dddb71b9"
    },
    {
        "nl_input": "Generate random numbers following a lognormal distribution with parameters `mu` and `tau`, where `tau` is the precision (inverse variance). The function should allow specifying the output size.",
        "url": "9688e9bb942e9ce1c123ba0b5179f748"
    },
    {
        "nl_input": "Find the last occurrence of the minimum value in array `x` and return its position relative to the length of `x`, expressed as a normalized value between 0 and 1. If `x` is empty, return NaN.",
        "url": "22f1d49b1969ee7e89c6533b9e92988f"
    },
    {
        "nl_input": "The query requires a function that compares two strings after normalizing whitespace, raising an assertion error if they do not match. It involves string stripping, whitespace reduction, and a comparison operation.",
        "url": "fc1326a05fcddae2c66c888da1670117"
    },
    {
        "nl_input": "The query requires implementing a 1x1 convolution operation using PyTorch's `nn.Conv2d` function. The provided code defines a function `conv1x1` that takes in input planes, output planes, and an optional stride parameter, returning a 1x1 convolution layer with no bias. This is commonly used for channel-wise feature transformation or dimensionality reduction in neural networks.",
        "url": "1c63a8f567508c2dbbd974597db516e0"
    },
    {
        "nl_input": "The query requires a configuration-friendly boolean type converter that can handle various input types, such as strings and booleans, converting them into appropriate boolean values. It should return the correct boolean equivalent for string representations like \"true\", \"false\", \"1\", \"0\", and empty strings, while preserving existing boolean values.",
        "url": "5effe214bd4eb37a839bd6cc85d96f1d"
    },
    {
        "nl_input": "The query requires determining the 2-D size of a Jacobian matrix, typically involving row and column dimensions based on input variables.",
        "url": "1cc69e1108c67013d1749b1e3b2f697c"
    },
    {
        "nl_input": "The query requires a function to check whether a given value is a valid enum constant. The function should verify if the value belongs to a specified enumeration type by checking its type and ensuring it exists within the enum's defined constants.",
        "url": "aeee8726b5988ca3cfb4cf62da5ad292"
    },
    {
        "nl_input": "Given a list that may be nested to any depth, return a new list containing all the elements at the top level by recursively flattening all nested sublists. Ignore any string handling or special cases unless explicitly required.",
        "url": "1b6646003e72c1cab411541d62676516"
    },
    {
        "nl_input": "The query seeks functionality to navigate to or retrieve the parent directory of a given file path. The code provides methods for changing to the parent directory, obtaining the parent directory path, and extracting the parent folder name from a file path.",
        "url": "8089b0416c588b33db7fed71f2648f52"
    },
    {
        "nl_input": "The query requires generating a 20-character passphrase using easily typeable characters, including letters (uppercase and lowercase), digits, and basic symbols like commas, hyphens, underscores, ampersands, dollar signs, and parentheses.",
        "url": "dfca7d4ad7f48b18f0ab7973bae010d7"
    },
    {
        "nl_input": "Fresh ID generation methods include:  \n1. Sequential auto-baked IDs with a counter.  \n2. Random 15-character alphanumeric strings.  \n3. Random uppercase strings derived from UUIDs, stripped of hyphens.",
        "url": "fd0f14db1e14692747016c200776eda9"
    },
    {
        "nl_input": "Convert a snake case string to camel case by splitting the string at underscores, capitalizing subsequent words, and joining them without separators. The first word remains in lowercase while the rest are title-cased and concatenated.",
        "url": "b19a39d8871b9aba99c3328dd4a655df"
    },
    {
        "nl_input": "The query requires a method that transforms a string value into an integer if the expected type is int, ensuring proper conversion and validation. It must handle different input types, check for convertibility, and return the appropriate integer value or the original input if not convertible.",
        "url": "552f0922b8f6a45b814f34ba736cd93d"
    },
    {
        "nl_input": "The query requires calling a C function that accepts a pointer as its last argument, which is expected to be populated with a C object during the function call. After execution, the function should return this C object. The focus lies on retrieving data through an output parameter passed as a pointer.",
        "url": "0fd6c95993321c05b30171eec7a02101"
    },
    {
        "nl_input": "The query appears to be seeking functionality related to log message formatting and output. It includes customizations for indentation, prefixing log messages, and printing colored logs to standard error with a script name prefix.",
        "url": "3f0750078e82a7d14d344a26ecdd7721"
    },
    {
        "nl_input": "The query requires a function that takes a dictionary (`dct`) and a dictionary of default key-value pairs (`defaults`). It should call `setdefault` on the target dictionary for each key in the defaults, ensuring that existing keys retain their values while missing ones are set to the provided defaults. The function should return the modified dictionary.",
        "url": "9bbbb20f503ba46da76eaa77b98784af"
    },
    {
        "nl_input": "The query requires a function to move a datetime object by a specified number of years in a given direction. The function should utilize a delta based on the number of shifts and direction, and apply this delta to adjust the input datetime accordingly.",
        "url": "83c7e1fd8666e261b69048f44f984a14"
    },
    {
        "nl_input": "The query requires a function that checks whether a specified edge exists in a graph. It expects a boolean return value, specifically `True` if the edge from node `p_from` to node `p_to` is present in the graph structure.",
        "url": "7ce5918e50714bd3660f99f0a95cbfe9"
    },
    {
        "nl_input": "The query requires a function that converts a list into a string by joining its elements with a specified separator, which defaults to a comma. The function should handle the conversion of each list element to a string before joining them.",
        "url": "bde3fb5a6302302752336ef6267a3877"
    },
    {
        "nl_input": "The query requires a function that returns the string representation of a given type. The function should handle custom types, use the `__name__` attribute if available, and return an empty string as a fallback.",
        "url": "2e39bbd87c8e5002835db5c873dc5a66"
    },
    {
        "nl_input": "Extract line numbers from comments in Python code lines. If a comment matches the expected format, return its line number; otherwise, return 0. The main goal is to identify and extract line numbers embedded within comments. \n\nLine number parsed from comment: 1",
        "url": "fbc86c5f63c6cbab0a4aa72f0faadcaf"
    },
    {
        "nl_input": "The query requires a function that calculates and returns the total memory byte size of a given Numpy array as an integer. The function should compute the product of the array's shape dimensions multiplied by the byte size of its data type.",
        "url": "f0456030f3cb36953670e94276edb1d5"
    },
    {
        "nl_input": "The query requires a helper function to convert strings to integers, supporting various bases/radices. It should handle string-to-integer conversion efficiently, potentially involving custom alphabets and different base systems.",
        "url": "bb7fca42c0c60dc5dcc3212c85ea60c7"
    },
    {
        "nl_input": "The query seeks to determine whether a given object represents a valid path. The code checks if the input is a string and verifies its existence as a file or directory using system operations, returning False for non-string inputs or invalid paths.",
        "url": "4edf2a89aa8f5a8713825607f13b3a6c"
    },
    {
        "nl_input": "The query requires a function that composes multiple functions into a single function, allowing them to be applied sequentially. It specifically seeks a `compose` function that takes a list or variable number of functions and returns a new function that applies them in the correct order to achieve a combined transformation.",
        "url": "2842f428a9186c722cb73f43029707ed"
    },
    {
        "nl_input": "The query requires a function to remove duplicate items from a list while preserving the original order of elements. It seeks a de-duplication process that ensures each item appears only once in the resulting list, based on their first occurrence.",
        "url": "f47adf1dd2cd6ee94174173d4c0dba3f"
    },
    {
        "nl_input": "The query requires a function to check if a file (e.g., cnr or cns) is empty, meaning it contains only the header and no additional data lines. The function should return `True` in that case.",
        "url": "450cc73f5679416b2729c29d17c5a97f"
    },
    {
        "nl_input": "The query seeks to determine when a game state is considered \"done,\" based on either the game being over or reaching a maximum move limit. It also involves analyzing depth in a list structure, and finding the last occurrence of a minimum value in a sequence.",
        "url": "c4ef266e883c3d9c6e5ae62b8ab668ef"
    },
    {
        "nl_input": "The query requires a function to retrieve the current desktop index using the `_NET_CURRENT_DESKTOP` property from the EWMH specification. The correct implementation involves calling a library function via `ctypes` to obtain the desktop value and return it.",
        "url": "e5a9e1bb21a3cd7df0858dad0b20c589"
    },
    {
        "nl_input": "The query requires using NumPy to create a real matrix object from data, specifically by converting rows of data into a NumPy array. The matrix should be constructed by collecting row data, structured as lists or similar, and converting them into a 2D NumPy array for numerical operations or transformations.",
        "url": "a3a4c61e7eea53c9e490604db0b3590b"
    },
    {
        "nl_input": "The query requires determining whether a given value is a byte string or a Unicode string. The solution should return `True` if the value is either a `str` (Unicode in Python 3) or a `bytes` object, indicating it correctly identifies both string types relevant to Python 3.",
        "url": "26c958614bee5fc1c19896b5f0551f81"
    },
    {
        "nl_input": "The query requires a function that reads text from a file while automatically detecting its encoding, using the `chardet` library to determine the correct encoding format.",
        "url": "9969728e6736bf82b1e9a03044364571"
    },
    {
        "nl_input": "The query requires identifying which code snippet corresponds to a method that checks or returns whether a counter is empty, based on the presence of an `empty` method or function. The most relevant code is the one defining `empty(self, start=None, stop=None)` as it directly matches the name and likely functionality required by the query.",
        "url": "1f84fc1e090db77de8d51c7190146975"
    },
    {
        "nl_input": "The task requires a function that can rewrite a file by adding a specified line at the beginning. The provided code includes a suitable implementation for this, allowing the user to modify a file's content in place by inserting a new line at the start.",
        "url": "b58a9251f71e60af76cc02adf3aeb3e2"
    },
    {
        "nl_input": "The query seeks to calculate the closest distance between a line segment and a point. The relevant code defines a function `distance_to_line` that computes this distance by finding the nearest point on the line segment to the given point and then calculating the distance between them.",
        "url": "9241c85c39ed221796f46af344122ca2"
    },
    {
        "nl_input": "The query requires a function wrapper that ensures the return value of a function is always iterable. If the result is not already an iterator, it should be converted into a list. This behavior is demonstrated by the `force_iterable` decorator in the provided code.",
        "url": "a7ae1c18c06bd04b301a3a9dd6511232"
    },
    {
        "nl_input": "The query requires functionality to release a resource back to its originating pool. The relevant code defines a `release` method that checks if the resource is in an errored state and either deletes it from the pool or releases it back. The operation involves returning the resource to the pool, ensuring proper resource management.",
        "url": "c143548cafea9a3925ec6ee6efc41438"
    },
    {
        "nl_input": "The query seeks a function to flatten a nested list into a single-level list without splitting strings. The function should handle elements that may already be strings or other types, preserving the original string elements while flattening any iterable structure within the list.",
        "url": "fd38a2c403c3400fdc8927dbab88c8c1"
    },
    {
        "nl_input": "The query requires uploading an IP list as a JSON payload. The relevant code defines a function that uploads a list as JSON by filtering an `IPList` object and calling its `upload` method with the JSON data.",
        "url": "3c6c3247179fba80a83ab23b9c53b9ef"
    },
    {
        "nl_input": "The query requires obtaining the shape of an image, which can be achieved by checking if the image object has a `shape` attribute or by retrieving it through other methods like accessing the data and its dimensions.",
        "url": "cbc0170c46062096a84468b365429079"
    },
    {
        "nl_input": "The query requires a function that returns a list of key property names from a class, specifically extracting properties marked with a 'key' qualifier.",
        "url": "662c104ceb549d3c48424fadc1836101"
    },
    {
        "nl_input": "The query requires calling a C function that accepts a pointer as its last argument and returns the C object it points to after the function completes execution. The function should support passing a pointer to a value, modifying it in place, and then extracting the resulting value from the pointer after the call.",
        "url": "0fd6c95993321c05b30171eec7a02101"
    },
    {
        "nl_input": "The query requires a function that adds or appends attributes to a widget of a bound form field in a Django-like form setup, allowing for optional replacement or concatenation of existing attribute values.",
        "url": "c33ee1c2506ac02f6f60f8415a7f720a"
    },
    {
        "nl_input": "The query requires a function that executes a command in the shell and then exits with the corresponding exit code using `sys.exit()` or similar functionality.",
        "url": "13dc817c65ddde88d2a2ec6eee680a81"
    },
    {
        "nl_input": "Merge two dictionaries into a new dictionary, recursively updating nested dictionaries if keys exist in both. The merge should not modify the original dictionaries and should handle nested structures appropriately.",
        "url": "6355dab675855466faa16c64350ef5f7"
    },
    {
        "nl_input": "The query requires a function to load and execute Python files. The provided code includes a `load_files` function that takes a list of file paths, iterates through them, logs the execution process, and uses `execfile` to run each Python file with global and local scope access. This function matches the requirement of loading and executing Python files.",
        "url": "fafac547be2039f7ecb1de9409b4e007"
    },
    {
        "nl_input": "The query requires a function to fill null values in a specified DataFrame column. Null values are defined as `None` or an empty string. The function should replace these with `NaN` and handle any exceptions that may occur during the operation.",
        "url": "93c0c2ede9a5c8a8b970af18721497ae"
    },
    {
        "nl_input": "The query requires a function to compute a boxplot for a given pandas Series, including handling null values, checking for numeric data types, and returning statistical measures such as count, outliers (fliers), and other boxplot statistics in a formatted dictionary.",
        "url": "8dd4b555f0e59a0dec7e2a588e55945c"
    },
    {
        "nl_input": "The query seeks a function that returns the index of a specific geometry within a list of geometries, avoiding costly equality checks using the `in` operator. It implies an efficient comparison by identity (`is` operator) rather than value-based equality to improve performance when searching for the index.",
        "url": "aebc38a583a508530af17ee1c8fef11f"
    },
    {
        "nl_input": "Convert a string from CamelCase naming convention to snake_case (C-style) by inserting underscores before uppercase letters and converting the entire string to lowercase.",
        "url": "245f32e66d5c23e21c45f22693852c11"
    },
    {
        "nl_input": "The query seeks to determine the number of leaf nodes in a tree structure. The relevant code recursively checks if a node is a leaf and sums the leaves from the left and right children if it is not.",
        "url": "7003757d630c03cf7dd68203952cd4cf"
    },
    {
        "nl_input": "The query requires using the `openpyxl` library to read an Excel file. The provided code includes a function that utilizes `load_workbook` from `openpyxl` to open an Excel file in read-only mode, meeting the requirement. Other code snippets are unrelated to Excel file reading.",
        "url": "3cd62873f26fd670aeecec18cc0dd297"
    },
    {
        "nl_input": "The query requires a function that rotates a list in-place, modifying the original list by shifting its elements a specified number of steps to the left. The function should handle edge cases such as empty lists and normalize large step values using modulo operation.",
        "url": "707569fdd77ebde2ce9e44aeb15df944"
    },
    {
        "nl_input": "The query requires a function that recursively converts nested iterables into tuples, preserving strings as-is while transforming other iterable elements into tuples. The conversion should handle nested structures of arbitrary depth and return a fully tuple-based representation.",
        "url": "aea6b9304a9b41f33141846e80e9d158"
    },
    {
        "nl_input": "The query requires a function that ensures a method call results in a specific exception being raised, with the exception's string representation matching a given regular expression.",
        "url": "910b81e1c0bbb58ca384ea2eccf81621"
    },
    {
        "nl_input": "The query requires converting an iterable of strings to integers, potentially handling possible float representations. Additional processing like stripping whitespace or lowercasing may also be relevant based on supporting functions.",
        "url": "24e9010513628fcbcbc40bc6617d3e5c"
    },
    {
        "nl_input": "The query requires removing a resource instance from an internal cache. The provided code includes a method `__delitem__` that removes a resource from the cache based on its type and internal key, achieving the requirement efficiently.",
        "url": "bf6a4144ae873567dfbd61579c2bba94"
    },
    {
        "nl_input": "The query requires converting a confusion matrix into a 2x2 plain list of integer values. The provided code includes a method that returns a 2x2 list by extracting and converting cell values from a table, which matches the requirement.",
        "url": "c86694b645e5ae2f3a398a6ffb38c3c1"
    },
    {
        "nl_input": "The query requires a function to synthesize white noise audio for a specified duration. The function should generate random samples uniformly distributed between -1 and 1, at a given sample rate, and return them as an `AudioSamples` object.",
        "url": "f262d61c7690f2df3b731ba862e94301"
    },
    {
        "nl_input": "The query requires functionality to disassemble a Python bytecode file (.pyc), involving steps like loading the module, checking the object path, and decoding the bytecode using appropriate helper functions.",
        "url": "765a09c3a704cf281562a8a77a1f8be0"
    },
    {
        "nl_input": "The query seeks a function that takes a nested list as input and returns a flattened list containing all the elements. The function should recursively handle nested lists of arbitrary depth.",
        "url": "746e950661be8d29bb8cf497c2bb802a"
    },
    {
        "nl_input": "The query requires an asynchronous method to run a worker without closing connections, particularly useful during testing. The desired functionality involves executing a task in the background without terminating active connections.",
        "url": "74bfcc70541e0daebb0f4db57e3b2a94"
    },
    {
        "nl_input": "The query seeks to determine the path to the TensorFlow Datasets directory. The relevant code defines a function that returns the parent directory of the current file's directory, effectively locating the root of the project or package.",
        "url": "64b730a598a02b60d9a4b7edcc0c6a63"
    },
    {
        "nl_input": "The query requires a function that converts a hexadecimal color code to HSV format. The provided code includes a `hex_to_hsv` function that first normalizes the input, decodes the hex values into RGB components, and then uses `colorsys.rgb_to_hsv` to convert to HSV.",
        "url": "b1e30dc54d4a7c52b1b808729dfb1ec3"
    },
    {
        "nl_input": "When the plot method does not create a figure or call save_plot, it must use self.fig. The provided code shows that plot_and_save initializes self.fig, calls plot(), and then uses save_plot with self.fig and self.axes. This implies the plot method should utilize an already existing figure (self.fig) when it is not responsible for creating it or saving it.",
        "url": "f1fef8351e7337c7f820cb898d402168"
    },
    {
        "nl_input": "The query requires a function to determine the size or dimensions of a multidimensional array. The desired functionality includes identifying the length along each dimension, such as handling nested lists and returning a list representing the shape of the array.",
        "url": "3658ef914c025d17376c894d11f4e034"
    },
    {
        "nl_input": "The query requires building documentation in HTML format. The relevant code runs a Sphinx build process to generate HTML documentation and exits with an error code if the build fails.",
        "url": "a687d18eb86da6fe54b7cfe32af45a6e"
    },
    {
        "nl_input": "The query requires connecting to an Access database using ODBC with a pre-specified DSN. The connection function takes the DSN and an optional autocommit flag as parameters and establishes the connection internally.",
        "url": "4b906d8d602bbb965d25996d5a4c5cb1"
    },
    {
        "nl_input": "Read lines from a file, stripping whitespace from each line, and return them as a list. If the file cannot be opened, raise an error. Additionally, ignore empty lines and those starting with a comment character '#'.",
        "url": "4cd26ba017dabe234b6b960e4c174cd7"
    },
    {
        "nl_input": "The query requires a function that can bring a figure window to the front. The provided code includes a function `raise_figure_window` which achieves this by using `figure` and `window.raise_()` methods. Other codes are unrelated to window manipulation.",
        "url": "7b52bc293ffd1b3acabf6268fe94a913"
    },
    {
        "nl_input": "The query requires a helper function to draw lines connecting a set of scaled nodes on a screen. The lines should be drawn between consecutive coordinates, with support for color and background settings. One provided function `_draw_lines_internal` meets this need by iterating over coordinates and drawing connected lines using screen primitives.",
        "url": "c1c960991a9d910480d00ff6f90db309"
    },
    {
        "nl_input": "The query requires a function that returns the names of all callable attributes of an object, excluding private methods (those starting with an underscore). The solution should allow passing one or more objects and return a set of their public callable attribute names.",
        "url": "ca8cd1bc1e11c8fd1689d1abe3f6d04b"
    },
    {
        "nl_input": "The query requires a function that checks whether a given string is enclosed in quotes. It takes a string argument and returns a boolean value\u2014True if the string is quoted, False otherwise. The check is based on the string's first and last characters being matching quote marks.",
        "url": "cfbbfbdb5e84890f7b9938a79629e0e2"
    },
    {
        "nl_input": "The query requires a function to move a datetime object by a specified number of years in a given direction (forward or backward). The function should utilize a delta based on the number of shifts and direction, and apply this to the input datetime using a helper function `_move_datetime`. The unit parameter is not used but maintained for API consistency.",
        "url": "83c7e1fd8666e261b69048f44f984a14"
    },
    {
        "nl_input": "The query requires a function that adds execute permission to a specified file. The function should take a filename as input, modify its permissions to include user execute rights, and return nothing. The provided codes demonstrate similar implementations using `os.chmod()` and the `stat` module to achieve this.",
        "url": "5695327040bd9879c8c5374e42e55c3d"
    },
    {
        "nl_input": "The query requires a function that removes an element once from various data structures: list, set, or dictionary. It should handle each type appropriately\u2014using `remove` for sets and lists, and `del` or `pop` for dictionaries. The function must be generic to accept any container and element, ensuring the element is removed only once.",
        "url": "0a08a131b7f20c6ae80cbd8db43c9210"
    },
    {
        "nl_input": "The query requires a function that checks if all elements in a sequence evaluate to `True`. The function should return `True` only if every element in the sequence is truthy.",
        "url": "f1fa86112e0e73f4f4a31cbe14f04a6b"
    },
    {
        "nl_input": "Find the date of the first Sunday in a given month and year.",
        "url": "49aefd290af2372c6b5eb570281c6ce8"
    },
    {
        "nl_input": "The query requires a function that adds a variable to the list of input variables. The function should accept a variable, verify its type, and append it to the input variable list.",
        "url": "26565a67fd195231572afee1165f9826"
    },
    {
        "nl_input": "The query requires a function to iterate over a NumPy array, yielding non-None elements. It specifically involves using `np.nditer` with \"refs_ok\" flag and extracting items using `.item()`. The other codes related to YAML conversion and array validation are not relevant.",
        "url": "84b81599f848ba0a0de34034369ecd66"
    },
    {
        "nl_input": "The query requires splitting a string `s` into a list of substrings, each no longer than a specified `length`. The function should return the string divided into chunks of up to `length` characters. Suitable functions provided include `_split_str` and `split_len`; `chunk_list` is designed for lists, not strings.",
        "url": "fe1575ac247db28014a9b3ed32f060c3"
    },
    {
        "nl_input": "Given a date object, the task requires returning the first day of the month. The correct implementation creates a new date object with the same year and month as the input but sets the day to 1, effectively returning the first day of the month.",
        "url": "74483d2e3e4816f59f302670fc2add82"
    },
    {
        "nl_input": "The query requires a function that attempts to convert an input object to a float, handling both integer and float string representations. It should return the numeric value if conversion is successful; otherwise, it should return the original object. Special cases like infinity may be allowed.",
        "url": "cf2e8a81dd31fa2f9c43e976123e281e"
    },
    {
        "nl_input": "The query requires a Pyglet-specific key press callback function that captures keyboard events and forwards them to a `keyboard_event` function, translating the event into appropriate key and action parameters. It emphasizes handling key press events with symbol and modifiers as arguments.",
        "url": "b9f179a182e7f371684191f4d2a4434d"
    },
    {
        "nl_input": "The query requires a function that converts a numpy array containing 0s and 1s into a string representation, where each element is either a '0' or '1', or a similar character representation. The output should be a string derived from the input array elements.",
        "url": "59ba4239d919130c70a0976daa47eb7d"
    },
    {
        "nl_input": "The query seeks a function to determine if a value is a string type, handling both Python 2 and 3 compatibility. It requires checking whether the input belongs to string-like classes such as `str`, `bytes`, or `basestring`, depending on the Python version.",
        "url": "66bffc09e421f8b89cbcc1bc10580629"
    },
    {
        "nl_input": "Convert a timezone-aware datetime object to a naive UTC datetime object by adjusting for its offset.",
        "url": "6ca260fb0f4204fff966670dd6b53076"
    },
    {
        "nl_input": "**Description of the query's needs (within 80 words):**  \nThe query requires a function to write data and a corresponding FITS header to a FITS file. The function should create a primary HDU with the data, assign the provided header, and save the file with overwrite capability. Logging the written file name is also desired.",
        "url": "48ad11d2bff0c767854ed2802f661500"
    },
    {
        "nl_input": "The query requires a function to print a dictionary tree in a JSON-like format with sorted keys and proper indentation. The provided code includes functions that utilize JSON formatting or recursive writing to achieve structured, readable dictionary output.",
        "url": "bbb8c24e82437ea03fccdc924a99d399"
    },
    {
        "nl_input": "The query requires a function that removes empty text utterances from a list. The provided code defines a function `remove_empty_text` that filters out utterances with empty or whitespace-only text, returning only those with non-empty content.",
        "url": "5ca8d1be36d4955478ff4ef72fbc653a"
    },
    {
        "nl_input": "The query seeks to determine whether a handler is using `sys.stdout`. The relevant code checks if the stream attribute of the handler is or wraps `sys.stdout`, returning True if it does.",
        "url": "2d584925f28ca1a569c556b3cb0b23bb"
    },
    {
        "nl_input": "The query seeks to determine if a given file-like object is readable. The relevant code provides a function `is_readable` that attempts to read a specified number of bytes from the object and checks if the read operation was successful, indicating readability.",
        "url": "ff74b00f4c8a98fb9cf3a85ef310f5bc"
    },
    {
        "nl_input": "Retrieve the last modification time of the RPM database file. If the file does not exist, return 0.",
        "url": "6f2c6c2911c241095457edad8d4f610c"
    },
    {
        "nl_input": "The query seeks an implementation that replaces Python's built-in `map()` function with a custom version returning results as an iterable. The provided code named `map` does exactly this, using a class constructor and generator expression to apply a function across items in an iterable, matching the desired behavior of `map()`.",
        "url": "a7edaf5497f4d1c28abc87eedd67ec8f"
    },
    {
        "nl_input": "The query requires a Short-Time Fourier Transform (STFT) implementation for real-valued data, ensuring the full FFT block is preserved. It emphasizes processing overlapping frames with a window function (e.g., Hann), applying the FFT, and retaining magnitude or complex output. The provided code includes functions related to bandpass filtering, general STFT setup, and magnitude computation, which align with the query's focus on time-frequency analysis of real signals.",
        "url": "dc43a25a987b9cb527a790deaae7be02"
    },
    {
        "nl_input": "The query seeks a function that returns `True` if the current distribution is running on a Debian-like OS. The desired functionality likely involves checking the Linux distribution using platform or file system information, similar to checking for specific release files or distribution names.",
        "url": "05385bcc31475b348629045db7ae74b2"
    },
    {
        "nl_input": "The query requires a function that removes both C++-style `//` comments and single-line C-style `/* */` comments from a given line of code. It should process the line, identify comment markers, and return the cleaned line without any inline comments.",
        "url": "6e369a16a8e70d37aa500da1cf9eff39"
    },
    {
        "nl_input": "The query requires setting a unique icon for an independent application on the Windows taskbar. The relevant code involves using `SetCurrentProcessExplicitAppUserModelID` from the Windows API via `ctypes.windll.shell32` to assign a unique AppUserModelID, ensuring the application appears separately with its own icon in the taskbar.",
        "url": "3c6813b3e153505df450e4718d17865b"
    },
    {
        "nl_input": "The query requires a method or function that processes a document or node structure, specifically performing cleanup operations on child nodes. It involves identifying and removing text nodes that contain only whitespace from the document element to refine or normalize the document structure.",
        "url": "2c1a6a5126487b41335a09e81eadf164"
    },
    {
        "nl_input": "The query requires generating a count of how many times each unique item appears in a list. The desired functionality involves both identifying unique items and calculating their frequency within the list.",
        "url": "0b667a6f675e931da772a1275fa53ee2"
    },
    {
        "nl_input": "The query requires a function that removes all non-printable characters from a text string. The provided code defines a `clean` function that converts the input to a string and retains only characters with ASCII values greater than or equal to 32, effectively removing non-printable characters.",
        "url": "0f171b4626d9f0ea2a003661289af42f"
    },
    {
        "nl_input": "The query requires a function to convert XY coordinates from the Spherical Mercator projection (EPSG:900913) to latitude and longitude in the WGS84 datum. The function should take X and Y values as input and return the corresponding geographic coordinates (lat, lon) in degrees.",
        "url": "1bc345e3253ff84cfda626f47ab1a8df"
    },
    {
        "nl_input": "The query requires a function to print a header row for a CSV table. The header should be written to standard output using the `csv.writer` method. A provided helper function `header_fields()` is used to format the header fields appropriately. Only the header row is printed, and it is derived from the input argument passed to the function.  \n\nPrint the header for the CSV table.",
        "url": "065a776db0489e0d6071522739dc609d"
    },
    {
        "nl_input": "The query requires a function that calculates the overlap count between the values of two dictionaries, where each dictionary represents marker groups. The output should be a matrix indicating the number of overlapping elements between each pair of marker groups from the two dictionaries.",
        "url": "c8478233dae0b972efc02759fdfebc63"
    },
    {
        "nl_input": "The query requires functionality to save a value to a session. The relevant code defines a method `_session_set` that stores a value in the session dictionary using a key. It does not involve saving to a file or handling cookies directly.",
        "url": "d8d33578fcd0ad196398b5dd87568b3f"
    },
    {
        "nl_input": "The query requires a function that safely reads input from standard input while handling terminal checks to avoid errors. It should print a message indicating the start of input reading and support end-of-file detection (like Ctrl+D). The function must also ensure compatibility with both Python 2 and 3 for seamless user interaction.",
        "url": "e0733d51ee06d0addebb4595beb97e0b"
    },
    {
        "nl_input": "The query requires a function to display a JSON indented representation of a dictionary `d`, using pretty-printing with sorted keys and custom formatting. The provided code includes functions that either print or return a formatted string of the dictionary with specified indentation and separators.",
        "url": "790cc6142b91109d4d9d5a64f0ec5b3b"
    },
    {
        "nl_input": "The query requires a wrapper function that ensures the result of an iter method callback is always iterable. If the result is not inherently iterable, it should be converted into an iterable format, such as a list, to support consistent iteration behavior.",
        "url": "a7ae1c18c06bd04b301a3a9dd6511232"
    },
    {
        "nl_input": "The query requires a function to split a list into smaller chunks of a specified size. The desired functionality involves iterating through the list and returning sublists of equal or smaller size, based on the chunking interval provided.",
        "url": "7d97cc48df768552ecb833ac5da561e1"
    },
    {
        "nl_input": "Extract all uppercase characters from the input string.",
        "url": "c7986d1e5882fe056f16ccd5a932d84e"
    },
    {
        "nl_input": "The query requires a function that compiles source code into native Python bytecode, executes it, and returns the topmost value from the stack. The provided code includes functions related to compilation and execution, with one function handling float operations and stack pushing, which aligns with returning the topmost stack value after execution.",
        "url": "cd6c0b5919ed35ca54f03aed7155d59c"
    },
    {
        "nl_input": "The query requires a function that retrieves a property by its name from a collection of properties. The desired function iterates through the properties and returns the first one with a matching name, or None if no match is found.",
        "url": "6991aa2924b52404ff77faa2b677d3e2"
    },
    {
        "nl_input": "The query asks whether an object is iterable like a list but not a string. The suitable code should check for iterability while explicitly excluding strings (and Unicode) from the criteria.",
        "url": "e8d906db3eac56229992dd6701dafd90"
    },
    {
        "nl_input": "The query requires a function to transpose a matrix, where rows become columns and vice versa. The provided code includes a `transpose` function that correctly performs this operation by iterating over columns and constructing new rows from corresponding elements across input rows.",
        "url": "f72094ee819dfe55ef594b4d29424ad0"
    },
    {
        "nl_input": "The query requires a function that can bring a specified figure window to the front. The function should accept a figure identifier, obtain its canvas manager, and call the appropriate method to raise the window. Compatibility with both existing figure objects and numerical identifiers is necessary.",
        "url": "1af4bba3546dc398bb5ed2f79e80596b"
    },
    {
        "nl_input": "The query requires a function to solve a linear matrix equation, supporting both standard and adjoint forms. It involves input matrices `a` and `rhs`, with an option to use the adjoint of `a`. The core operation uses `np.linalg.solve` for efficient numerical solutions.",
        "url": "5877389d9eb25b563ada6e2220248ba5"
    },
    {
        "nl_input": "The query seeks to determine the absolute path to the directory containing package data. Among the provided code options, the relevant function is `data_directory()`, which correctly constructs and returns the absolute path to the \"data\" directory within the package.",
        "url": "b49f6af022fb00932348cc036f786a2c"
    },
    {
        "nl_input": "The query seeks a function that can properly escape a filesystem path for use as a command-line argument, ensuring correct handling of quotes and compatibility across operating systems. The ideal solution involves detecting the OS, enclosing the path in quotes if on Windows, escaping existing quotes within the path, and using appropriate shell-escaping mechanisms for other platforms.",
        "url": "c717888ec77092e7b6e56415d851e2be"
    },
    {
        "nl_input": "The query requires a function to pretty print a NumPy matrix `X` with support for rounding to a specified number of decimal places. The ideal solution formats and prints each row of the matrix in a clean, readable manner.",
        "url": "144142c4f682e2fc8c47507a12eb8b46"
    },
    {
        "nl_input": "The query requires a function that finds the first file in a specified path whose filename matches a given pattern using `fnmatch.fnmatch`. If no matching file is found, it should raise an `IndexError`. The provided code demonstrates this behavior by returning the first match from a list of results or raising an exception if none are found.",
        "url": "4c136dbf27a5d08891bc2d374574506d"
    },
    {
        "nl_input": "Create a shared memory array with the same shape and data type as a given array, initialized with a specified value.",
        "url": "7022cdc7764380a374323ec964b9e1d1"
    },
    {
        "nl_input": "The query checks whether a given value is callable. It utilizes a validator function that returns the value if it is callable, or raises a `CallableError` otherwise. Additionally, there is a method that checks if a callback is a function by verifying if it is an instance of `Callable` or `classmethod`. These snippets collectively validate and determine callable entities in Python.",
        "url": "3f6168cffe8cb21984c6a12267502db1"
    },
    {
        "nl_input": "The query requires a function to manually set the default figure size for plots, taking arguments for x-axis size, y-axis size, and aspect ratio. The provided code includes a matching function 'figsize' that updates the figure dimensions using matplotlib's rcParams with the given parameters.",
        "url": "cdb682fdaddf92e4c85ac1006ec2f2ac"
    },
    {
        "nl_input": "The query requires a function to truncate a decimal value to a specified number of decimal places without rounding, preserving the exact value up to those places.",
        "url": "a9f00f4b4472333451594b653fd3ddf4"
    },
    {
        "nl_input": "The query requires a function that reads and returns the contents of a file as a string. The function should open the file, read its contents fully, and return them as a single string. Simplified requirements include handling file paths correctly and ensuring the entire text is read and returned without modification or truncation.",
        "url": "3a909aebbf2e4e790a70a9a6a5aeb917"
    },
    {
        "nl_input": "The query requires a function to redraw a plot in response to updated parameter values, likely triggered by UI elements like sliders. The function should update all parameter values, reflect changes in the plot, and potentially handle specific plot elements or projections. It may also involve adjusting visual components such as bar heights and maintaining proper positioning during updates.",
        "url": "051279ae1faa9b3e8ad99859217a31a9"
    },
    {
        "nl_input": "The query requires a function that checks whether a given string path exists and is a valid file. The function should return a boolean value or raise an error if the file does not exist.",
        "url": "2eb8c1c213084c2d6663d2798151922e"
    },
    {
        "nl_input": "The query requires a function that returns a random positive integer suitable for a Django PositiveIntegerField. The preferred code defines a function `positive_integer` that uses a faker library to generate a random positive integer, ensuring it fits the constraints of a Django model field.",
        "url": "85d319ea47a8b2db80fd83fa200969b4"
    },
    {
        "nl_input": "The query requires a function that calculates the average price between two asset states based on their respective quantities and prices. The correct implementation takes four parameters: quantity_1, price_1, quantity_2, and price_2, then returns the weighted average price.",
        "url": "6c4b912ed406d1c613c8c86898501f18"
    },
    {
        "nl_input": "The query requires a function to plot a smoothed histogram using kernel density estimation (KDE) on provided data, which should be visualized on a given axis with optional parameters for color, filling under the curve, and title.",
        "url": "20d4c9337731d52fe439d7ae337e6913"
    },
    {
        "nl_input": "The query requires a function to fill null values in a specified column of a DataFrame. Null values are defined as either `None` or an empty string. The function should handle exceptions and replace these nulls with `NaN`. Additionally, it should be method-compatible within a class structure, referring to the DataFrame via `self.df`.",
        "url": "93c0c2ede9a5c8a8b970af18721497ae"
    },
    {
        "nl_input": "The query requires retrieving the current blend mode of a console, which typically defines how foreground and background colors are combined when rendering text. The relevant code should return the background flag or blend mode setting from a console object.",
        "url": "b58a4d28bb6598443049dbbc4bbf8e92"
    },
    {
        "nl_input": "The query requires a helper function to calculate bin ranges for a histogram plot. The function should take a data column and an optional number of bins, then return appropriate bin edges based on the data's minimum and maximum values.",
        "url": "9f884647cf34443dee2bc6ff92f875c3"
    },
    {
        "nl_input": "The query seeks to determine whether two revisions have resulted in actual changes by comparing their content. It involves normalizing and checking differences between strings or structured data, potentially ignoring insignificant whitespace or specific fields. A difference implies a change, while similarity indicates no meaningful alteration.",
        "url": "ffef61824d78a9266d404137a97101b1"
    },
    {
        "nl_input": "The query requires running Python unit tests specifically against Java runtime classes, utilizing a custom environment setup with `PYTHONPATH` pointing to a build directory. The execution is handled via a function that leverages `jpyutil._execute_python_scripts` to run the designated tests.",
        "url": "02839b0594938f5a9b149e4eb63f9dcf"
    },
    {
        "nl_input": "The query requires a function that waits for a send queue to be cleared, with an optional timeout. It involves managing synchronization using methods like `clear()` and `wait()` on a condition variable.",
        "url": "09a15b5addf9063f3d0c6597aa38a5d0"
    },
    {
        "nl_input": "The query requires a function that converts a 3x3 skew-symmetric cross-product matrix back into its corresponding vector. The input is a matrix with skew-symmetric properties, and the output should be the original vector that generated it. Only 3x3 matrices are supported.",
        "url": "ea96df64c6665e80be6a7d81f07c7a4f"
    },
    {
        "nl_input": "Given HTML markup, extract and return a list of href values from each anchor (`<a>`) tag present in the markup.",
        "url": "a0295573f1dcf89a25aa9337bd3f9207"
    },
    {
        "nl_input": "The query requires a function to convert a ctypes structure into a dictionary, where each field of the structure becomes a key-value pair in the dictionary. The provided code includes a suitable function `struct2dict` that achieves this by iterating over the structure's fields and retrieving their values.",
        "url": "3e40d7e81d715f046db351aee91b0c62"
    },
    {
        "nl_input": "The query requires a function to generate an ANSI escape sequence for coloring terminal text. The function should accept a `color` and `text`, use a predefined `COLOR_CODES` mapping, and wrap the text with appropriate escape codes for formatted terminal output.",
        "url": "361543bea6004540b3a709ec2b6f852f"
    },
    {
        "nl_input": "The query requires a function to convert a list of lists into a specified shape and data type. The provided code includes a function `shape_list` that takes a list, shape, and data type, then returns a NumPy array with the desired shape and type.",
        "url": "75029e9b5315bf8366b2c9d646b179e4"
    },
    {
        "nl_input": "The query requires a function that prints all rows returned from a given query. The function should iterate through each row of the result and display it, aligning with the structure and purpose demonstrated in the provided code examples.",
        "url": "3cb2ed3d1f3f748abda37ef3aefc286e"
    },
    {
        "nl_input": "Read lines from a file, stripping whitespace from each line, and return them as a list. If the file cannot be opened, raise an error. Additionally, process each line to remove comments and skip empty or commented lines.",
        "url": "4cd26ba017dabe234b6b960e4c174cd7"
    },
    {
        "nl_input": "Create a decorator that applies a filter function to the return value of a decorated function. The decorator should allow wrapping any callable, ensuring its output is processed by the provided filter function before being returned.",
        "url": "a86e59f13d1de0744181898183974b07"
    },
    {
        "nl_input": "The query requires a function to sort a list using a natural alphanumeric order, where numbers within strings are sorted numerically rather than lexicographically. The sorting should handle mixed string-number elements correctly.",
        "url": "e8ba965e00c981d460681f001f1b646b"
    },
    {
        "nl_input": "The query requires a function to generate a random, unique string identifier. The function should produce a string of fixed length, composed of uppercase letters, lowercase letters, and digits, ensuring uniqueness and randomness for each call.",
        "url": "25a29e374311824cbed549355d28c30b"
    },
    {
        "nl_input": "The query requires converting a list of key-value lists into a dictionary, where each key maps to a single value or a list of values. The code should iterate through the list, assigning keys and values appropriately. If a key appears multiple times, its corresponding values should be stored in a list.",
        "url": "1b73a949780175c73d5778ca8e2f5b2e"
    },
    {
        "nl_input": "The query requires converting a string, dictionary, or object into JSON format. The ideal solution should handle various input types, potentially including custom serialization or formatting options, and return a properly structured JSON string.",
        "url": "a9048b56499578414cb6dca3141d871d"
    },
    {
        "nl_input": "The query requires converting a PyMongo cursor into a JSON object suitable for UI consumption. The solution must handle MongoDB's BSON encoding, convert `_id` to `id`, and remove the original `_id` field.",
        "url": "82821e87505d717d99a5a6982e80b533"
    },
    {
        "nl_input": "The query requires a function that writes a string to a file. The provided code includes functions that write data to a file in binary mode and another that writes JSON content with indentation. The main requirement is to save string data into a file, potentially with specific formatting or mode of writing.",
        "url": "cfe10971d3e9565b10d9a8da615d0b58"
    },
    {
        "nl_input": "The query requires a function that pads an input PIL Image. The padding is applied using specified parameters such as the padding size, fill color, and padding mode. The function should return the padded image using the `F.pad` method with the given arguments: `img`, `self.padding`, `self.fill`, and `self.padding_mode`.",
        "url": "9a8806be60753c5afc2c2886b26a8147"
    },
    {
        "nl_input": "The query focuses on functionality related to closing or disconnecting database connections. The relevant code includes methods for closing database sessions, handling connection cleanup, and disconnecting by closing the websocket connection. Key requirements involve gracefully terminating connections, handling potential errors during closure, and ensuring proper resource management.",
        "url": "01b6ef83cb7b0e20fe4063575ba37afc"
    },
    {
        "nl_input": "The query requires a function that checks whether an object's date is from today. The relevant code defines a method `created_today` that compares the date of `self.datetime` with the current date using `datetime.today()`, returning `True` if they match.",
        "url": "5e650f644d8fd521a2fb566997bac200"
    },
    {
        "nl_input": "The query seeks to clean up whitespace in column names, primarily by removing spaces and possibly other whitespace characters. The desired functionality involves normalizing column names through operations like stripping whitespace, replacing spaces with underscores, or converting to lowercase. A more robust solution is preferred, such as handling different types of whitespace and ensuring consistent formatting across columns.",
        "url": "30bf76a15a72979f26c21ec5492d7e9e"
    },
    {
        "nl_input": "The query requires starting a Pdb (Python debugger) instance at the calling frame, with its standard output routed to `sys.__stdout__`. This allows debugging while ensuring that the debugger's output is directed to the original standard output stream.",
        "url": "0a05a5da32b1fb72cca49d13dc8e3410"
    },
    {
        "nl_input": "The query requires a function to save a variable to a specified file path using Pickle. The function should take two arguments: the variable to save and the file path. It should serialize the variable into the file using Pickle's `dump` method in write-binary mode, optionally using the highest protocol for efficiency.",
        "url": "c2a530e3185141f26984493fe461a1e4"
    },
    {
        "nl_input": "The query requires a function that stops or terminates a process, thread, or computation. It involves checking the current state (e.g., `_progressing`, `_reading`, `_stop`), potentially disabling UI components like a stop button, and handling actions such as interrupting a kernel, stopping a thread, or writing an exit command to standard input. The function may also handle cleanup tasks, such as joining a thread or resetting flags.",
        "url": "ffe1a2a9c49e02611417c3d70568ca6c"
    },
    {
        "nl_input": "The query requires a function `f` that filters dictionary entries based on both key and value, returning only those where `f(k, v)` evaluates to `True`. The filter should support custom logic such as retaining specific keys, checking values, or applying conditions to remove empty or unwanted items.",
        "url": "f241dcba436401f13b432446f7acf74c"
    },
    {
        "nl_input": "The query requires a function that checks whether a given type is an enum type. The relevant code provides a function `is_enum_type` that returns `True` if the input type is a subclass of any enum type retrieved by `_get_types(Types.ENUM)`.",
        "url": "8f828b31221d8d3d250582d6e33119d8"
    },
    {
        "nl_input": "The query requires a function that serializes a protobuf object into JSON format. It implies the need for conversion of protocol buffer data structures into a human-readable JSON string, possibly with options for formatting or indentation.",
        "url": "ae464d2f99fa7222e80bee299a792d9f"
    },
    {
        "nl_input": "The query requires retrieving a specific key from a request, focusing on functions that access headers or data sources like form or query string. It emphasizes extracting the value associated with a given key, potentially involving header parsing, native value conversion, and checking for key presence.",
        "url": "b20b2cbf97fe0d5450903f1b53292657"
    },
    {
        "nl_input": "The query requires a function that converts a JSON number string into its corresponding Python object, such as an int, float, or long, handling both integer and floating-point representations accurately.",
        "url": "e7bad2f188ea39babea17d023e47e629"
    },
    {
        "nl_input": "The query seeks to reindex a Series with a new index, applying optional filling logic for missing values. The desired functionality involves aligning the data to a new index and handling any introduced missing values using a specified fill method or default value like NaN.",
        "url": "feb258741d3bed95c3717ef0f1fccc39"
    },
    {
        "nl_input": "The query requires a function to print colored text to a specified target handle, supporting foreground and background color options, and ensuring proper output handling in Python 3.x.",
        "url": "5e7880a46ffa2a7b19d6212e49eb068b"
    },
    {
        "nl_input": "Return a vector with the elements rounded to the specified number of decimal places.",
        "url": "ce214949d37d2602b1bae63f9c7323a2"
    },
    {
        "nl_input": "The query requires a function that checks compatibility between an array and a fill value, then fills the array with the specified value if compatible. It involves handling missing data using NumPy-like functionality, ensuring proper type compatibility and in-place array modification.",
        "url": "f62e3c00eea2ee9dfa9d98e0e1e50c53"
    },
    {
        "nl_input": "The query requires an error-handling mechanism that formats and outputs error messages. It involves customizing error output with labels like \"[ERRO]\" or specific exception names, optionally using color codes or writing to standard error. One function should raise an error upon receiving a non-OK HTTP response status.",
        "url": "82b961ae1166cc5272220f0ff3a4e2f0"
    },
    {
        "nl_input": "The query requires a function that checks whether a given value is callable. The provided code includes functions that validate or check for callable types by using Python's `callable()` function and `isinstance()`, ensuring the input meets the callable requirement.",
        "url": "3f6168cffe8cb21984c6a12267502db1"
    },
    {
        "nl_input": "The query requires a function to pretty-print an object's representation, with control over formatting options like verbosity, line width, and newlines. It involves creating a formatted string output using a custom printer class that handles the object's structure and streams the result.",
        "url": "c8a5512cc83335ec25437a84dcfb884a"
    },
    {
        "nl_input": "The query requires a function that converts a CamelCase string into a lowercase underscore format. It involves identifying uppercase letters in the string and inserting underscores before them, then converting the entire string to lowercase.",
        "url": "4af2cb83cba01f1a2877affc9f9af1fd"
    },
    {
        "nl_input": "The query requires a function to check if a given string is a palindrome. The function should handle both strict and non-strict modes, where strict mode checks the reversed string directly, and non-strict mode removes spaces before checking. It should return False for invalid input.",
        "url": "0a8601aa40e8e29e9a34b4bfee20bdb0"
    },
    {
        "nl_input": "Convert a given string from snake case format to camel case format by splitting the string at underscores and capitalizing the first letter of each subsequent word. The first word remains in lowercase, and all parts are concatenated into a single string without separators.",
        "url": "96f5c07d79e853ad64b6e045f2ea2e3b"
    },
    {
        "nl_input": "The query seeks a primary entry point method that processes keyword arguments (`kwargs`) and updates an object's properties, potentially involving property validation or data collection during assignment.",
        "url": "0a32a04e8445904777f8caeebdb8fffd"
    },
    {
        "nl_input": "The query requires a context manager that temporarily disables certificate validation in the standard SSL library. The relevant code defines a function `disable_cert_validation` that overrides the default HTTPS context with an unverified one, restoring it after use.",
        "url": "e8d31bf9064cd469a1dc39294f7fe457"
    },
    {
        "nl_input": "The query requires a function that returns the number of bytes needed to represent a given data type (`dtype`). The correct implementation checks if the `dtype` has a `size` attribute; if not, it uses NumPy's `itemsize` to determine the byte size.",
        "url": "991303bd65d07a7092b5456f65501117"
    },
    {
        "nl_input": "The query requires a function that parses a given URL and extracts the hostname. The function should take a string URL as input and return the hostname as a string. The provided code uses `urllib.parse.urlparse` to parse the URL and retrieve the `netloc` attribute, splitting off any port number if present. If no network location is found, it returns an empty string. All three code samples are identical and fulfill the same requirement.",
        "url": "13343f8f3c5515600e035d8cca7abd84"
    },
    {
        "nl_input": "The query requires a function to remove duplicates from a list while preserving the original order of elements. It assumes that the entries in the list are hashable. The focus is on deduplication, not on identifying duplicates.",
        "url": "6156271232598d8b1fcc3d17b7f70287"
    },
    {
        "nl_input": "The query requires a utility to extract a value associated with a key from various object types, supporting nested keys and providing a default if the key is missing. The referenced code offers functions for dictionary manipulation, but the main requirement is fulfilled by `get_value`, which retrieves keyed values from objects, handling both direct and nested key access.",
        "url": "b6bb535456a96c9b909bb499e8a0d64f"
    },
    {
        "nl_input": "The query requires a function that writes a string to standard output (stdout) without adding extra formatting or newline characters. It emphasizes direct writing to stdout, potentially with support for custom string handling and immediate flushing of the output buffer. The function should accept a string input and possibly additional parameters for customization.",
        "url": "130fea41886bd6573c8f66d1d1b1cc62"
    },
    {
        "nl_input": "The query requires a function to retrieve RAM memory usage in megabytes. The relevant code provides a function using `psutil` to get the current process's RSS memory and converts it from bytes to megabytes.",
        "url": "36e35aabc8ba46fc2ddb8e9843fbb19f"
    },
    {
        "nl_input": "Return true if a value is a finite number.",
        "url": "20a9dee3715bfda8b9951585455866ce"
    },
    {
        "nl_input": "The query requires a function that maps a database field name to its corresponding column. The desired functionality involves retrieving the column associated with a given `db_field` name, potentially using a mapping defined within the class. It suggests a need for indirect column access via database field names rather than direct attribute access.",
        "url": "09fe8b23516543ed7b0beb4c00c2c151"
    },
    {
        "nl_input": "The query requires a function that downsamples an input array by a given factor using striding. The function should take an array and a factor, then return the downsampled result by slicing the array with strides specified by the factor across all dimensions.",
        "url": "4a46bee21402859242a82bb3267915e7"
    },
    {
        "nl_input": "The query requires identifying code that handles cleanup or deletion of sessions or connections. The relevant code shows cleaning up a session using `run_until_complete` and `close`, deleting instances and plugins, and removing a connection from global state and stopping it if not started.",
        "url": "a8a603e0ae848a1659ac97bbf97c393d"
    },
    {
        "nl_input": "The query seeks a function that removes spaces and tabs from a given string or byte sequence. It should process the input by eliminating all whitespace characters, returning the resulting stripped output without any spaces or tabs. The handling may involve replace operations, regex substitution, or string manipulation methods.",
        "url": "5c2cb0d747482f06316ecf2034c1b403"
    },
    {
        "nl_input": "The query seeks to find the index of the last occurrence of an element `x` in a sequence. The provided code includes functions that achieve this by reversing the sequence and calculating the position, as well as a variant handling dimensional indexing with a default value.",
        "url": "f0181095e2b214bca904dedc120dac57"
    },
    {
        "nl_input": "The query requires a function that adds padding to a given text, using spaces and newlines, to achieve a specific formatting or alignment. The implementation involves adding horizontal and vertical padding around the text content.",
        "url": "2182fa769b2e6aebf55d8607b1aeae43"
    },
    {
        "nl_input": "The query requires a function to remove punctuation from text while allowing some exceptions. It aims to keep word characters and whitespace, and selectively retain specified punctuation marks. The function should process the input text using regular expressions to filter out unwanted characters based on the defined pattern.",
        "url": "05d248c97e02432ffcafa5fc4d135e4c"
    },
    {
        "nl_input": "The query requires a function that performs an exponential fitting operation. The function should take input parameters `x`, `a`, `tau`, and `c`, and return the result of the expression `a * exp(-x / tau) + c`. This is intended for fitting exponential decay data with an offset.",
        "url": "af7417dd34ffedc528d5b41aa79a25a3"
    },
    {
        "nl_input": "The query requires coercing a value into a JSON-compatible representation. The desired functionality involves converting or serializing data into a valid JSON string, potentially handling special types like bytes or Protobuf objects, and ensuring compatibility with JSON standards through encoding, serialization, or dictionary conversion.",
        "url": "ccb63a861341c1600c1672d2347c2a48"
    },
    {
        "nl_input": "The query requires a function that retrieves the current time zone and returns both the `tzinfo` object and its standard string representation (e.g., \u00b1HH:MM format) based on the system's local time.",
        "url": "9a9656208511dc76df08f3417ff13f0b"
    },
    {
        "nl_input": "The query requires removing leading and trailing whitespace characters (including spaces and tabs) from string data. This can be applied to either individual strings or entire columns in a dataset, particularly handling byte strings and using efficient methods for whitespace stripping.",
        "url": "c614fa426ccf3da4b2087a058e08c051"
    },
    {
        "nl_input": "Check if all elements in `x` are instances of any type in the given list `types`. The function ensures that every element in the flattened version of `x` matches at least one type from `types`.",
        "url": "5ab579ff3b2ee7681b98e2869ba83148"
    },
    {
        "nl_input": "The query requires a function that checks whether a specified element selector is present on the page using a given method (like CSS selector), returning True if it exists and False otherwise.",
        "url": "9d5df68fdf38594b8242be10f8ee487c"
    },
    {
        "nl_input": "The query requires retrieving all column names and their corresponding data types from a dataset or database table. The result should be returned as a list of tuples, where each tuple contains the column name and its data type.",
        "url": "1001aab66e7872b45d9825d901ea4412"
    },
    {
        "nl_input": "The query requires a function that checks if the input `l` is a one-dimensional NumPy array of integers. It should return `True` if `l` is a 1D array and its data type is either signed integer (`'i'`) or unsigned integer (`'u'`), otherwise return `False`.",
        "url": "4c44318e0564a3746341c25cb08796fb"
    },
    {
        "nl_input": "Create a \"run.log\" file inside a specified folder, recording the timestamp of the latest successful run in UTC time format (\"YYYY-MM-DD HH:MM:SS\"). The file should be created if it does not exist, and the timestamp should be written upon creation.",
        "url": "8595eb12cbc332479f76bff0d5054589"
    },
    {
        "nl_input": "The query requires a function that retrieves a specified `key` from the headers of a `request` object. The provided code includes a function `get_from_headers` that accomplishes this by using `request.headers.get(key)` and converting the result to a native type before returning it.",
        "url": "d0f81def36969915a8a8466379b2a7ab"
    },
    {
        "nl_input": "The query requires extracting a value from a cookie jar, specifically using a method that retrieves cookie values based on name and field from a request object.",
        "url": "7c99a79a7ad75ac06ade2a1e106df71a"
    },
    {
        "nl_input": "The query requires a function that reformats SQL code into a prettified version, split into a list of lines, to facilitate generating a diff between two SQL statements. The desired output should improve readability by normalizing whitespace and line breaks.",
        "url": "457aff9c7058c3ba33b7ae0d5386ee0f"
    },
    {
        "nl_input": "The query requires a function that attempts to parse a given string as an integer while encapsulating proper error handling to manage cases where the string cannot be converted, ensuring robustness against invalid inputs.",
        "url": "c69e122da2d2e1d72e89cfa0116a4f34"
    },
    {
        "nl_input": "The query requires a function that compiles a given source code into native Python bytecode and executes it, returning the topmost value from the stack. It involves compilation with an `xcompile` function and evaluation of the compiled result.",
        "url": "cd6c0b5919ed35ca54f03aed7155d59c"
    },
    {
        "nl_input": "The query requires a function that sets an integer value into a bytearray at a specified index. The function should handle conversion of the integer to bytes and update the bytearray in-place. The target code must manipulate byte-level data using struct packing/unpacking or similar methods to achieve this functionality.",
        "url": "6fec9d169b0a9416a97ce4a338dd32d8"
    },
    {
        "nl_input": "The query requires adding a method or functionality to a JavaScript object within a Python environment, specifically by extending or interacting with a JavaScript context or object model.",
        "url": "3502745173b0a9b89ae0a7f4243ce2a3"
    },
    {
        "nl_input": "The query requires a function that converts a list of items into a string, with elements separated by a specified separator. The function should handle item conversion to strings and allow for a custom separator, defaulting to a comma if none is provided.",
        "url": "4d487dd5451d858ae1df55545338d20c"
    },
    {
        "nl_input": "The query requires a utility function to create a regular expression that matches escaped separators in strings. The provided code defines `make_regex(separator)` which constructs and compiles a regex pattern to handle escaped separators, allowing for proper string splitting or parsing scenarios where escaping is involved.",
        "url": "c293149f21c05346b0edfd6e017c0a32"
    },
    {
        "nl_input": "The query seeks a mechanism to dynamically retrieve and invoke API methods through a wrapper, enabling method calls on an object via dynamic attribute access or module introspection. It requires support for partial function application, attribute routing, and bound method invocation for API interfacing purposes.",
        "url": "941e68a199cee63e302662e2ce8fe281"
    },
    {
        "nl_input": "The query requires converting a comma-delimited string into a list of strings. The provided code includes a function `comma_delimited_to_list` that handles both strings and lists, splitting the string by commas if necessary and returning a list of strings.",
        "url": "bef112878733e2d59a2929a7920b88a7"
    },
    {
        "nl_input": "The query requires a function to restore settings to their default values. The relevant code defines `restore_default_settings()`, which resets global settings by reassigning them to predefined default values and logs a confirmation message.",
        "url": "3ba6b208b4ed697b5fe003d50b17d99c"
    },
    {
        "nl_input": "The query requires a function to determine the parent folder of a given file path. The desired functionality involves extracting the directory name one level above the provided file path, potentially involving absolute path resolution or navigating up the directory tree.",
        "url": "b020996768e441735bad95910a16907e"
    },
    {
        "nl_input": "The query seeks a function that removes newlines and multiple spaces from a string, consolidating it into a single, compact string without any extra whitespace.",
        "url": "ffaf50749737d70a6ecb6ce9b0f9ac24"
    },
    {
        "nl_input": "The query requires computing the average gradient norm of an image. This involves calculating the gradients of the image data, squaring them, and then taking their average. The relevant function provided is `average_gradient`, which computes the average of the squared gradients of the input data.",
        "url": "11dee73808ab5dea87b4d7e3fe459006"
    },
    {
        "nl_input": "Return a tuple of (start, end) indices of an item from its index.",
        "url": "82969a6dbd0cf5948252addf78f02f52"
    },
    {
        "nl_input": "The query requires a function to join elements of an iterable into a comma-separated string, converting each element to a string type before joining. It emphasizes handling iterables by converting each item to a text string using `six.text_type`, and joining with a comma as the separator.",
        "url": "d5cd6bdee354cd4c13e1317060fe6702"
    },
    {
        "nl_input": "The query requires a function that generates an adjacency matrix from a graph's edges. The matrix should represent connections between nodes, with each edge creating bidirectional links in the matrix. The implementation uses NumPy to initialize and update the matrix based on edge relationships.",
        "url": "77ba8682acb16363f35ee39438c5c00b"
    },
    {
        "nl_input": "The query requires a helper function that processes join operations by building separate lists of columns for the left and right sides of a join. It takes a list of column names or pairs, distinguishing between left and right join columns, and returns these two lists for further use in a join function.",
        "url": "b43d396e0c2cb764c7a3923e30cee800"
    },
    {
        "nl_input": "The query requires a function that checks if an HTTP response has a non-200 status code and raises a `requests.exceptions.HTTPError` in such cases. It involves validating the response status and ensuring proper error handling for non-success HTTP codes.",
        "url": "0c0e2e21a0ef56f98b03f742885dd7b1"
    },
    {
        "nl_input": "The query requires a function that converts a dictionary into YAML format. The function should utilize an ordered dictionary, use the `SafeDumper` from the `yaml` module, and ensure the output is in block style (`default_flow_style=False`). Additionally, it should return the YAML output rather than printing it.",
        "url": "3e751fb619760a9827d1958fe4a20f42"
    },
    {
        "nl_input": "The query requires a function that removes stopwords from a list of words. The provided code defines `_removeStopwords`, which filters out any word present in a predefined `_stopwords` list, returning a new list with only non-stopword terms.",
        "url": "6ce9ae857507f7292c65caae0d829141"
    },
    {
        "nl_input": "The query seeks a function to return unique rows from a dataset. It requires removing duplicate entries so that each row appears only once. The implementation should efficiently handle arrays or lists, ensuring uniqueness across the entire structure. This functionality is particularly useful in data processing tasks where redundant information must be eliminated.",
        "url": "5585a4d97c570d3a3d4ee8539bdc383c"
    },
    {
        "nl_input": "The query seeks to determine the possible range for the `min` function when applied to interval values. It involves identifying the minimum lower bound and minimum upper bound across the input intervals.",
        "url": "e7a213e5ce364fbbb4eebdb777dcae72"
    },
    {
        "nl_input": "Return True if the list contains elements of type `vtype` or `None`. The function checks that all elements are either of the specified type or None, and ensures the input is a list.",
        "url": "9f1568e9761dff31a32f5c4b9e8edd9a"
    },
    {
        "nl_input": "The query seeks to identify code related to retrieving or managing the active window within a graphical or terminal interface. The relevant code defines a method `get_active_window` that returns the currently active window, handling CLI-specific contexts and defaulting to the first window if needed.",
        "url": "dde85ac504b2390acdd3091d4eb9bcae"
    },
    {
        "nl_input": "The query requires a function that generates a formatted table to display port results, including columns for Name, Port, Protocol, and Description, with left alignment for better readability.",
        "url": "f97eba655064cbbbe5fab244004635ad"
    },
    {
        "nl_input": "The query seeks to determine whether a request was directed to a Flask endpoint, using logic that checks if the current component owns the endpoint associated with the request's URL rule. It involves internal methods for handling errors and dispatching requests in a Flask-based application.",
        "url": "1f9a6c557386541c8bf3018a1e3947c6"
    },
    {
        "nl_input": "Waits for a keyboard event and returns the event's name or scan code if the name is unavailable.",
        "url": "fffa142ba9856c6a86224d3d99407a7d"
    },
    {
        "nl_input": "The query asks to determine whether a given value is an integer. The solution should check if the input is of integer type or can be converted to an integer without loss of precision, handling both numeric and string inputs appropriately.",
        "url": "2832fbd8beeec023e6e6ef3e6b82340c"
    },
    {
        "nl_input": "The query requires a function to convert a string from CamelCase to snake_case. The desired function should take a string input and return the converted string in snake_case format, using regular expressions for pattern substitution.",
        "url": "6c93672cda684ac1a95b2d799714bebf"
    },
    {
        "nl_input": "The query requires a function to convert various types of input data into a `bytearray`. The conversion should handle integers by wrapping them in a list, and for strings or similar types, it should use an appropriate encoding (like `'latin-1'`). The function must return a `bytearray` regardless of the input type.",
        "url": "c5046e85180e9f65f88280117dffd4cf"
    },
    {
        "nl_input": "The query seeks a function that processes input lines by stripping whitespace, removing inline comments (e.g., starting with `#` or `//`), and yielding cleaned lines. It requires filtering out full-line comments and handling string-embedded comments correctly, ensuring only actual code lines are returned without any comment interference.",
        "url": "ca1be3d31ee8cf3523dfc4b4d395589e"
    },
    {
        "nl_input": "The query requires a function that prints a formatted message to standard output, prepended with a timestamp and some formatting characters. The message should be emphasized (possibly in color), and the output must be flushed immediately after printing. The function `good(txt)` fulfills these requirements by formatting the text with a prefix, timestamp, and color codes, then printing and flushing it.",
        "url": "e2aa9367d8be0f1d00d8b3baa409dd7a"
    },
    {
        "nl_input": "The query requires a function that checks whether a given float value is numerically equal to its integer counterpart, allowing for safe and accurate conversion from float to int when equality holds.",
        "url": "dd11b3695df51c0247478c289387f290"
    },
    {
        "nl_input": "The query requires a function to toggle pause mode, which interacts with a controller and music component. The function should switch the playing state and trigger a corresponding action in the music module.",
        "url": "fd17bc7997ec03214258fa4bd8501d56"
    },
    {
        "nl_input": "The query requires a function to convert Markdown content into plain text. The provided code uses the `markdown` library to convert the Markdown content into HTML and then utilizes an external function `html_to_text()` to extract the plain text from that HTML. However, the implementation of `html_to_text()` is not included in the given code snippets.",
        "url": "a98a0d961b4a5dfb134ed7d96517dc6a"
    },
    {
        "nl_input": "The query requires running a Bash script located in the local directory. The provided code includes a function that uses `subprocess.call` to execute a Bash command, which can be used to run the script by passing its filename.",
        "url": "d1387105e649f48d23a75e735be58fdf"
    },
    {
        "nl_input": "The query requires a function that removes all spaces and newlines from a string, returning the cleaned result.",
        "url": "ffaf50749737d70a6ecb6ce9b0f9ac24"
    },
    {
        "nl_input": "The query seeks a method to retrieve an object or child if it has already been read or exists within a collection, likely by checking its type or existence in a list. It emphasizes accessing a pre-existing child or object efficiently without re-reading or re-creating it.",
        "url": "a0eea2c799b9e9787443166f8163bbac"
    },
    {
        "nl_input": "The query requires a PyQt-specific callback function for handling key release events. The function should translate and forward these events to the `keyboard_event` method, passing the key identifier, an action type (e.g., release), and any additional parameters like modifiers.",
        "url": "0dedd93aa4ea060e3981a64d1946e3b8"
    },
    {
        "nl_input": "The query requires a function to prepend a line to a file. The provided code includes a function `prepend_line` which reads the file, inserts the line at the beginning, and writes the updated content back to the file.",
        "url": "9c5ed7678eec60027b77c36e9f85ed9f"
    },
    {
        "nl_input": "The query requires a method to check if a process is running using the Unix `ps` command. The relevant code defines a function `is_running` that takes a process ID, executes `ps -p` with that ID, and returns `True` if the process is found in the output, indicating it is currently running.",
        "url": "08c543187101769aa1d6bf51dce8be2e"
    },
    {
        "nl_input": "The query requires a function to recursively delete a directory, including all its subdirectories and files. The provided code includes a function `rrmdir` that fulfills this requirement by using `os.walk` to traverse the directory tree bottom-up, removing files and directories iteratively.",
        "url": "0d26e92ada91f0c98d4a321d3bcc7a28"
    },
    {
        "nl_input": "The query requires applying a log transformation of the form `log(x + 1)` to input data. The provided code includes a function `log_normalize` that performs this transformation using `np.log2(data + 1)`, supporting both sparse and dense array inputs. This matches the requirement for performing a log transform on data with possible zero values.",
        "url": "cc88f21701ab6077cbe986ba301bb315"
    },
    {
        "nl_input": "The query requires retrieving the contents of each page from a PDF file. The relevant code provided accesses each page using `self.pdf.getPage(i)` for all pages in the PDF, obtained via `self.pdf.getNumPages()`. This functionality allows iterating through and extracting content from every individual page of the PDF document.",
        "url": "a0f3d82a41b02af3c9649aa06b89db3d"
    },
    {
        "nl_input": "The query requires a function that returns a random positive integer suitable for a Django PositiveIntegerField. The referenced code includes a function named `positive_integer` that fulfills this requirement by using a faker library to generate the value.",
        "url": "85d319ea47a8b2db80fd83fa200969b4"
    },
    {
        "nl_input": "The query requires extracting all union queries from a given table. The relevant code processes a table to recursively flatten and retrieve union operations by checking if the operation is of type `Union`, then combining results from both left and right sides of the union.",
        "url": "f3c15a88ba4b34b9a86e75aa4a8c83b8"
    },
    {
        "nl_input": "The query requires creating a TensorFlow variable constrained within an L2 unit ball, ensuring its values have a maximum L2 norm of 1.",
        "url": "e5fa2723774427d207b10c231427d4c8"
    },
    {
        "nl_input": "The task requires recursively searching through a directory to locate all Python script files (.py). Once identified, each file should be analyzed for import statements. The function should accept a directory path as input and return a generator that yields results from analyzing these scripts.",
        "url": "a2f84605b27e7336f7c619e6e6ecb26f"
    },
    {
        "nl_input": "Read a file with one item per line, removing duplicates by storing the entries in a set, and return the de-duplicated collection as a set of strings. The function ensures each item is stripped of trailing whitespace before deduplication.",
        "url": "af678636432a410c764ca9cb0a1afa68"
    },
    {
        "nl_input": "The query requires a function that takes a list and a batch size, then returns a new list of lists where each sub-list contains elements from the original list grouped according to the specified batch size. All provided code examples achieve this functionality using different naming conventions and slight variations in syntax or parameter defaults.",
        "url": "673c4038436f7b604c37ed0acf9a5adf"
    },
    {
        "nl_input": "The query requires functionality to move the cursor up by one row in a text editor. The code should adjust the cursor position based on row and column indices, ensuring the cursor moves correctly within the document structure.",
        "url": "f4e10c5aa2fe8595abd6657ba28db1c5"
    },
    {
        "nl_input": "The query requires a function that calculates and returns the progress ratio and percentage completed based on the current and total values. The function should format the output as \"current / total (percentage% completed)\".",
        "url": "205d2257a363e4a52180c14d82ad05e0"
    },
    {
        "nl_input": "The query requires a function that checks whether a given float value is numerically equal to its integer counterpart, ensuring safe and accurate conversion from float to int when values match exactly.",
        "url": "dd11b3695df51c0247478c289387f290"
    },
    {
        "nl_input": "Convert a byte string into an integer using the X9.62 standard, which involves interpreting each byte as part of a base-256 number and computing its integer value in big-endian order.",
        "url": "1731237c9b4f7c37e8c66ec5a989582f"
    },
    {
        "nl_input": "The query requires a function that extracts only alphabetic characters from a given string, ignoring any non-letter characters such as numbers, symbols, or spaces. The desired output is a string containing solely the letters from the input.",
        "url": "a81ea10e95124147157d96bd92d03a50"
    },
    {
        "nl_input": "The query requires a function that searches for a field or property by name within a collection and returns the matching member or `None` if not found. It emphasizes locating an item based on a name attribute, supporting cases where the field may not exist.",
        "url": "a3cd5a39a6a438b727432f565b6b0acf"
    },
    {
        "nl_input": "The query requires a function that checks whether a given string contains any whitespace characters (such as spaces, tabs, or newlines). If whitespace is present, the function should raise a `ValueError`. This ensures the input string must be non-empty and free of whitespace characters.",
        "url": "c04cc51d17f6cd1739f09e2c0b66a917"
    },
    {
        "nl_input": "A dictionary-like structure that excludes null or empty values, ensuring only valid key-value pairs are retained.",
        "url": "ed25600864e57226782fe2815f6ea7a1"
    },
    {
        "nl_input": "The query requires a Python function that can load and execute a list of Python files. The function should iterate through each file, log the execution process, and use `execfile` to run the code within the file.",
        "url": "fafac547be2039f7ecb1de9409b4e007"
    },
    {
        "nl_input": "The query requires a callback function to handle the closing of a WebSocket connection. The function should set the connection state to disconnected, log an error message indicating the closure, and trigger a reconnection attempt. Additionally, it should support manually closing the connection with logging and stopping any auto-reconnect mechanism.",
        "url": "aa593ebc558493cc0add3bd8bb6e70e5"
    },
    {
        "nl_input": "The query requires a function that takes a multi-dimensional array as input and returns a one-dimensional array containing all the elements from the original array. The output should preserve the order of elements as they appear in the original structure.",
        "url": "6c2f0cae41d4a8defbd80e5fc9ecf368"
    },
    {
        "nl_input": "The query requires a function to convert a string from camel case to snake case by inserting underscores before uppercase letters and converting the result to lowercase.",
        "url": "da53eabc5a7a8f4162b28d726e183372"
    },
    {
        "nl_input": "The query requires a function to validate if an object is a string, accounting for both `str` and `bytes` in Python 3 or `basestring` in earlier versions.",
        "url": "bf5d68d072e8122a9a46bc9e0824407b"
    },
    {
        "nl_input": "Create a method that writes a configuration object to a YAML file. The method should take a file name and configuration data as input, open the file in write mode, dump the YAML content, and return a function that performs this operation.",
        "url": "d5172b2564f44b89541d52f8c075d897"
    },
    {
        "nl_input": "The query requires writing audio samples, which are floating-point numbers in the range [-1.0, 1.0], to a WAV file. The provided code demonstrates converting the samples to 16-bit integers before saving them using `scipy.io.wavfile.write`.",
        "url": "02774e4da081abce4e8cff9febd5339d"
    },
    {
        "nl_input": "The query requires rendering a plot using Bokeh and updating it in a notebook environment. The relevant code uses `bokeh.io.push_notebook` to push the plot changes, indicating a need for interactive visualization within a Jupyter notebook.",
        "url": "02f514c324cacaf0704c2a6509112ebf"
    },
    {
        "nl_input": "The query requires a function that takes a nested list and returns the size of each dimension, along with the element type in the list. The function should recursively determine the length of each level of nesting and identify the base data type of the elements contained within the nested structure.",
        "url": "986d95a235b4666e17e297bc1814526c"
    },
    {
        "nl_input": "The query requires implementing a solution to process a gzipped data stream by decompressing it in chunks and yielding the resulting decompressed streams. It involves handling partial or streaming data, using appropriate compression libraries (like zlib or gzip), and managing unused data for continued processing. The focus is on yielding decompressed data incrementally from a chunked input source.",
        "url": "d81906107a72bbbb48477c029365c550"
    },
    {
        "nl_input": "The query requires a function to validate whether a given input is a non-empty string. The function should handle cases where the input may be of incorrect type (e.g., not a string) and raise appropriate exceptions like `TypeError` or `ValueError`. It should return `True` only if the input is a string and is not empty after stripping whitespace.",
        "url": "4c267ab3b1fbf3f4c4270f715d93e37c"
    },
    {
        "nl_input": "The query requires a function that checks whether a given input `l` is a 2D NumPy array of boolean values. The function should return `True` if `l` meets these conditions, and `False` otherwise.",
        "url": "8a3b1c52b2ad77e9fd817568f4cec12c"
    },
    {
        "nl_input": "The query requires a function to split a given list `l` into smaller lists (chunks) of size `n`. The desired output is a list of these chunks.",
        "url": "9b703ce1495ac3025601f5addf5595e4"
    },
    {
        "nl_input": "The query requires a function that checks whether a given float value is numerically equal to its integer counterpart, ensuring safe and accurate conversion from float to int when equality holds.",
        "url": "dd11b3695df51c0247478c289387f290"
    },
    {
        "nl_input": "Convert a list of strings to a list of integers by mapping each string to its corresponding integer value.",
        "url": "d03c341cc5f160d047d5458a3393cbdf"
    },
    {
        "nl_input": "Return a new dictionary with empty items removed, preserving keys that are required or have non-empty values, including integers like 0.",
        "url": "a8c133739d961e115a4cc14c827b0992"
    },
    {
        "nl_input": "The query requires a script to install or upgrade setuptools and EasyInstall, with functionality to download and install a tarball using command-line arguments. It involves version handling and supports dry runs. Additional features include argument parsing for components and versions, and dynamic library loading based on version.",
        "url": "6cb48314baad69035e44a579e4c28a4a"
    },
    {
        "nl_input": "The query requires a function that exits the shell session after performing cleanup operations, such as closing current resources and releasing the resource manager. The ideal code handles session termination gracefully, ensuring proper resource management before exiting.",
        "url": "552e6841d09f58e5e1c8fb096c977099"
    },
    {
        "nl_input": "The query requires a function that tokenizes a given source string and returns the tokens structured as a list of lists. The provided code includes a method `listified_tokenizer` which fulfills this requirement by generating tokens from the input source and returning them in the desired format.",
        "url": "2aef12f2c1527ef8de50aefbdd1bf8a2"
    },
    {
        "nl_input": "Add a `read_range` primitive that reads a range of bytes from a buffer, supporting start and end positions. The implementation should return the specified byte slice efficiently, ideally using memoryview for performance.",
        "url": "873e2e123d4b3e09c5cf9042128e4ea4"
    },
    {
        "nl_input": "The query requires a function that prints a message to standard output and logs it at the info level if a log object is provided. It involves conditional logging based on the presence of a log parameter and utilizes standard output for message display.",
        "url": "6a20ea317b052d61a5e30244282c661a"
    },
    {
        "nl_input": "Returns a list of all the image's colors.",
        "url": "1009f0bae620cb88f3f2c0ffef639cb5"
    },
    {
        "nl_input": "Convert an underscore-separated string into PascalCase by capitalizing the first letter of each word after underscores and removing the underscores.",
        "url": "4850c6548e9a829b0ecf457c6f739fdc"
    },
    {
        "nl_input": "The query requires a function that converts a list into a string with comma-separated values, ensuring all elements are strings before joining. If the input is already a string, it should remain unchanged. Multiple provided implementations achieve this functionality.",
        "url": "fba927400ace7484b9037afcd300e79b"
    },
    {
        "nl_input": "The query requires a function that identifies and returns duplicates from a list. The desired function should process a given list, detect elements that appear more than once, and return these duplicate values as a set or list. The focus is on detecting repeated entries rather than removing them.",
        "url": "3f760b95cc5ab5274f1b7ef94bbb83ac"
    },
    {
        "nl_input": "The query requires a function to calculate the chi-squared statistic. The provided code includes a function `chi_square_calc` that takes in classes, a table, and other parameters to compute the chi-squared value by comparing observed and expected values within a loop structure.",
        "url": "3af9a5c791b244e41cb0891c47ff4327"
    },
    {
        "nl_input": "The query seeks to calculate the size of a tree recursively by counting all nodes, including both left and right children, using a recursive traversal method.",
        "url": "8f388f52ff9e9531e8395ea311574a61"
    },
    {
        "nl_input": "The query requires retrieving the last entry from a database table by ordering results in descending order and limiting to one record. It involves dynamically constructing a SQL query based on the specified table name or using a default table if none is provided.",
        "url": "43e0333244d180f72905137d8d1335f7"
    },
    {
        "nl_input": "The query requires a function to move the cursor to a specific line in a text editor buffer. The implementation retrieves the current buffer, calculates the index for the target line, and sets the cursor position to that index.",
        "url": "85bf8f526e4cc0590ecb0b556389c65a"
    },
    {
        "nl_input": "The query requires a function to terminate all workers and threads, stopping any ongoing processes and releasing associated resources. It involves properly ending thread execution, clearing thread and worker references, and ensuring no background tasks continue running.",
        "url": "8a01d94ec727f7f460e884f936334ec5"
    },
    {
        "nl_input": "The query requires extracting a value from a cookie jar using a specified name and field. The provided code defines a function `parse_cookies` that retrieves values from `req.COOKIES`, matching the requirement. Another function, `save_session_to_file`, converts the cookie jar to a dictionary but does not directly fulfill the query's goal. \n\n**Requirement Description (within 80 words):** Retrieve a specific value from a cookie jar by name and field.",
        "url": "7c99a79a7ad75ac06ade2a1e106df71a"
    },
    {
        "nl_input": "The query checks whether the `clang-apply-replacements` binary can be successfully invoked, ensuring it is correctly specified and functional. It uses a function that attempts to run the binary with `--version`, handling errors if execution fails. Other provided code snippets are unrelated to this specific check.",
        "url": "6adea12a7dde7655f0f1a389ceb335ef"
    },
    {
        "nl_input": "The query requires a function that converts an input object to a float. The function should first check if the input contains \"inf\" (case-insensitive), returning it as-is if true. Otherwise, it should attempt to convert the input to an integer first, and if that fails, try converting it to a float. If both conversions fail, the original object should be returned unchanged.",
        "url": "1834a6c375a0ddbea017871ca95904c0"
    },
    {
        "nl_input": "The query requires a function to return a random leaf node from a binary tree. The function should recursively traverse the tree, randomly selecting either the left or right child until reaching a leaf node, which is then returned.",
        "url": "3f554dfb1717ee0df76ea31085afcf39"
    },
    {
        "nl_input": "The query requires a function that checks spelling by processing input text in chunks to avoid line truncation, and then returns the spell-checked output. It involves writing to a process's standard input and retrieving the result. Other functions provided are unrelated (URL check and punctuation check).",
        "url": "d13d06b0d9509b466ca8f6f77508ccde"
    },
    {
        "nl_input": "Check whether each element of a given value exists in the corresponding column of a two-dimensional array formed by values, and return True only if all elements meet the condition; otherwise, return False.",
        "url": "6108b1d5909a32358df805e683091bc8"
    },
    {
        "nl_input": "Return a list of dictionaries with unique entries based on a specified key. Ensure each dictionary in the resulting list has distinct values for the given key, effectively removing duplicates from the original list of dictionaries.",
        "url": "bcf740019b55c972892333070f45ed82"
    },
    {
        "nl_input": "The query requires a function that yields all items from an iterable except the last one. The desired behavior involves iterating through the input and returning every element except for the final one, effectively truncating the sequence by one item. This functionality is useful when processing sequences where the last item should be excluded from the output stream.",
        "url": "1ee47a36d336de1330bd893bd95750fb"
    },
    {
        "nl_input": "The query seeks a function that retrieves the primary key properties of a SQLAlchemy class. It references a function which uses the class's mapper to obtain primary key columns and maps them to their corresponding properties. The desired functionality involves extracting primary key information from a SQLAlchemy model class, specifically returning property names tied to primary key columns.",
        "url": "344250efb585be8c0f0d437f27185d11"
    },
    {
        "nl_input": "{\"def inverted_dict(d): return dict((force_hashable(v), k) for (k, v) in viewitems(dict(d)))}\": \"979f3f0fe1af433ff17407bf66d96cad\", \"def list2dict(lst): dic = {} for k, v in lst: dic[k] = v return dic}\": \"bf10521bc0f9003ddbc220d64ecc68eb\"}",
        "url": "979f3f0fe1af433ff17407bf66d96cad"
    },
    {
        "nl_input": "The query requires a function that retrieves the width and height dimensions from a video capture object. The relevant code defines a function `get_capture_dimensions` that uses OpenCV properties `CAP_PROP_FRAME_WIDTH` and `CAP_PROP_FRAME_HEIGHT` to obtain and return the dimensions as integers.",
        "url": "aaaa24a0f289ed002bc3da51e3d15cdf"
    },
    {
        "nl_input": "To determine the allocated memory at function termination, extract and evaluate memory usage before and after execution, then compute the difference.",
        "url": "b9198474e1ef2266728aed7e2f57c2cc"
    },
    {
        "nl_input": "Read and return the contents of a specified file located in the project's root directory as a string.",
        "url": "5b53077086acefdfc481f0156c22d45a"
    },
    {
        "nl_input": "The query requires creating an anonymous file-based bucket that holds a single key. The bucket should allow downloading a file using the key, and it should be possible to instantiate it with a name and the contained key. Additionally, there should be functionality to import a public RSA key from a file for cryptographic operations.",
        "url": "1cd1dc7bbfb30f40638f2a27dd200559"
    },
    {
        "nl_input": "The query requires a function that takes a 3-element vector and returns its corresponding 3x3 cross-product matrix, where the matrix is constructed by placing the negative and positive elements in the correct positions to compute cross products.",
        "url": "2492a256abb481d43a2a066b8da72044"
    },
    {
        "nl_input": "Given an index, the task is to find and return the corresponding mapping from a backend system, specifically by querying Elasticsearch mappings using a suitable backend. The mapping retrieval involves interacting with an external service or database to obtain and format the mapping data for further use.",
        "url": "88e0c23054a375aa864fdce761d35810"
    },
    {
        "nl_input": "The query requires a function that determines whether a given number `num` is a power of two. The function should return `True` if `num` is a power of two, and `False` otherwise.",
        "url": "38e59d8098901fb657abe07ea53e4970"
    },
    {
        "nl_input": "Check whether the provided argument is a valid file that exists on the file system.",
        "url": "457753fd65f06a706c64700d4933ab00"
    },
    {
        "nl_input": "The query seeks a function that converts a list into a string representation, ideally by joining elements with a specified separator. The required functionality involves transforming list elements into strings and concatenating them, which aligns with the `list_to_str` function provided in the code options.",
        "url": "721c3006e76c0a49f0cdb41715be8519"
    },
    {
        "nl_input": "The query requires a function to determine if a passed value is a string, with compatibility for both Python 2 and Python 3. The function should handle different string types like `str`, `bytes`, and `basestring`, ensuring safe type checking across versions.",
        "url": "f6c2c4043a72ee6ac596800045699aa3"
    },
    {
        "nl_input": "The query requires a function that computes a vector of spherical Bessel functions of the second kind, denoted as $ y_n(x) $. The input consists of two parameters: `x`, which is the argument for the functions, and `N`, specifying the number of values to compute. The function should return an array containing the computed values for orders from 0 to $ N-1$.",
        "url": "2c2d10e576f0ffc704b857558dbe68d1"
    },
    {
        "nl_input": "The query requires a function that identifies and returns the names of columns in a DataFrame where the data type is an object or categorical. The function should iterate through the `dtypes` of the DataFrame's columns, check for 'object' or categorical types, and collect the corresponding column names to return as a list.",
        "url": "ff434fe169ce9fa91ed8e9ecd5323b31"
    },
    {
        "nl_input": "The query requires a function to plot a smoothed histogram using kernel density estimation (KDE) on provided data, with options to customize the appearance such as color, title, and whether to fill the area under the curve.",
        "url": "20d4c9337731d52fe439d7ae337e6913"
    },
    {
        "nl_input": "The query requires a function to remove a specified parameter from a collection or dictionary, handling cases where the element might not exist. It emphasizes dynamic attribute access and fallback behavior for removal, supporting both object attributes and dictionary-style deletion.",
        "url": "5e2992e3203231f5d04080655e6e6c94"
    },
    {
        "nl_input": "Closes the connection by setting auto-reconnect to false, logging the closure, and stopping or closing the associated connection or WebSocket object.",
        "url": "aaa8ca744df057fc7df107df0da2946e"
    },
    {
        "nl_input": "The query requires a function that reads input from standard input, printing a message when both stdin and stdout are connected to a terminal. It should return the read input data, prompting the user with a message indicating that input can be provided until the end of file (Ctrl+D).",
        "url": "e0733d51ee06d0addebb4595beb97e0b"
    },
    {
        "nl_input": "The query requires a function to download a file from an S3 bucket. The provided code includes a method `download_file_from_bucket` which accomplishes this by downloading a file object from the specified S3 bucket and saving it locally. This method should fulfill the query's requirement.",
        "url": "12fc3abe142e491a071b985a41eacbcc"
    },
    {
        "nl_input": "The query focuses on functions related to type casting and type name extraction in Python. It involves converting values based on a retrieved type name, handling casting errors, and determining appropriate type names from definitions or objects, including custom types and built-in type names.",
        "url": "2d8dc20b01a0f3edb16213fdac9acaa8"
    },
    {
        "nl_input": "The query seeks a method to retrieve a view into a memory region by specifying a start position and size. The relevant requirement is to return a `memoryview` object for a given byte range, as demonstrated by the first code snippet.",
        "url": "20bcf139232a957c771376918dce26db"
    },
    {
        "nl_input": "The query requires a function that returns the index of column 0 of the current item in the underlying model. The functionality involves obtaining the current index, then retrieving its sibling index at column 0, and returning it.",
        "url": "8ff34d03fd1a41d19991e700bf7264c1"
    },
    {
        "nl_input": "The query seeks to calculate the size of a tree recursively by counting all nodes, including both left and right children, using a recursive traversal method.",
        "url": "8f388f52ff9e9531e8395ea311574a61"
    },
    {
        "nl_input": "The query requires a function to calculate the median of numeric data using the average of the middle two values method. If the input data list is empty, the function should return 0. The implementation should sort the data and compute the mean of the two central elements for even-length datasets.",
        "url": "a2ed58dc05b0f96ed45e74171c63422e"
    },
    {
        "nl_input": "The query requires a function to check if two floating-point numbers are equal up to a specified number of decimal places. The function should return True when the rounded difference between the two numbers, up to the given decimal places, is zero.",
        "url": "fa3233a6cd42dc3060664f97aa1c6dd5"
    },
    {
        "nl_input": "Find the index of the last occurrence of element `x` in a sequence. If `x` is not found, the behavior should reflect an appropriate index value based on context or raise an error.",
        "url": "f0181095e2b214bca904dedc120dac57"
    },
    {
        "nl_input": "The query requires a function that updates GUI elements with the current x-axis limits from a plot. It retrieves the minimum and maximum x-values using `get_xlim()` and sets the corresponding GUI text fields (`x_lo` and `x_hi`) to these values, optionally based on input flags `set_min` and `set_max`.",
        "url": "52074cdb32ef6249813156e7efc7b978"
    },
    {
        "nl_input": "The query requires functionality to redirect or manipulate standard output (stdout), such as capturing, disabling buffering, or writing directly to stdout. The provided codes handle stdout redirection, raw printing to stdout, and disabling stdout buffering, indicating a need for precise control over console output behavior.",
        "url": "22f5ab096acfd0ced92efc860645bcaf"
    },
    {
        "nl_input": "The query requires a function that rotates a list `l` in-place by a specified number of `steps`, modifying the original list without creating a new one.",
        "url": "707569fdd77ebde2ce9e44aeb15df944"
    },
    {
        "nl_input": "The query requires a function that replaces all occurrences of specified symbols in a string **input** according to a given mapping **repls**. The replacement should handle multiple symbols and apply the corresponding replacements efficiently.",
        "url": "85d3c78c884351b4ba1ab4b9bbd83d89"
    },
    {
        "nl_input": "Compute the short-time Fourier transform (STFT) magnitude of a signal using a periodic Hann window, involving framing, windowing, and applying the real FFT to obtain the magnitude spectrum.",
        "url": "dbd5611f954c88c313e4e96e1ccb797b"
    },
    {
        "nl_input": "The query requires calculating the sum of squared errors (SSE) between data points and their respective cluster center. The relevant code should compute the distance between data points and a center, then return the sum of these distances. Only the first code snippet fulfills this requirement by computing the sum of distances as an SSE-like measure.",
        "url": "103206f393d3e14ed03ee8f1adc4a0d0"
    },
    {
        "nl_input": "The query requires a function to remove and return an element from a data structure, specifically mimicking the behavior of `lpop` or `rpop` in Redis. The desired functionality includes handling empty structures by returning `nil` or `None`, and removing the element at a specified index (defaulting to the end). It also involves maintaining consistency with Redis operations, particularly for list-like structures.",
        "url": "08901634f481f05ed3b04c1da455b8b2"
    },
    {
        "nl_input": "The query seeks to understand what happens when a `with` statement ends. The provided code snippets illustrate actions taken when exiting a context, such as closing resources and managing indentation, but none explicitly involve a `with` statement. The code implies handling cleanup operations upon block exit.",
        "url": "1d447a9da9154b393c31270b1bb034a1"
    },
    {
        "nl_input": "The query requires a function to create a symbolic link that works across operating systems. The provided code includes a `create_symlink` function that uses `os.symlink` if available and falls back to Windows API via `ctypes` when necessary, ensuring cross-platform compatibility for creating symbolic links.",
        "url": "1be0c088c4ccabf8a0a9cbc7a533fb82"
    },
    {
        "nl_input": "The query describes a logout functionality that removes the current session from the cache. It involves clearing the session data and setting the authentication key to `None`. The expected behavior occurs specifically when a session exists, indicating a need for proper session termination and cleanup in an authenticated system.",
        "url": "6b1aedce31fc54b676ef475bbccca0f4"
    },
    {
        "nl_input": "The query requires calculating the Hamming distance between two strings of equal length, which involves comparing corresponding characters and counting the number of positions where they differ. The implementation should raise an error if the strings are not of the same length.",
        "url": "864a82eccd4052bf4623bc043e1da9f7"
    },
    {
        "nl_input": "The query requires a helper function that extracts interval boundaries from an array of intervals, returning them as a new array. The function should process the `left` endpoints of all intervals and include the `right` endpoint of the last interval to define the full range.",
        "url": "5521725c7f9fb840aa2233e10462e5e9"
    },
    {
        "nl_input": "The query requires a function to submit a form using a given ID. The function should locate the form element by its ID and submit it.",
        "url": "2456b464c2cdd924c757ebcacad877ac"
    },
    {
        "nl_input": "The query requires a function to slugify a filename by processing its name part (excluding the extension) and retaining the original file extension. The slugification should involve sanitizing the name to remove or replace invalid characters, normalize separators, and trim unnecessary characters, then reassemble the sanitized name with the original extension.",
        "url": "d03c8445844950a0fdafc88eb5631845"
    },
    {
        "nl_input": "The query requires a function that runs a unit test framework, which can be customized to execute any test logic. It should return `True` if all tests pass and `False` if any fail. The function must support running tests using either built-in unittest or third-party frameworks like nose, with appropriate logging and error handling for missing dependencies.",
        "url": "595642aaa9f754ce601e2d291d98ec1a"
    },
    {
        "nl_input": "Retrieve all parsed comments from a specified file. The main function `parse_comments_for_file(filename)` processes the file by reading it, extracting doc comments, and parsing each comment. It returns a list of parsed comments, making it suitable for testing and interactive use.",
        "url": "1dc3a21cdc2e7628cf01cea3b18aacba"
    },
    {
        "nl_input": "The query requires registering a plugin in Spyder's main window. The relevant code connects a signal to restore the scrollbar position and adds the plugin as a dockable widget to the main window.",
        "url": "864135b3a55a9a79c0d47a33500139f2"
    },
    {
        "nl_input": "The query checks whether an object is iterable like a list but excludes strings from being considered valid iterables. It seeks to identify non-string objects that are iterable, such as lists or tuples, and disregards string types even though they are technically iterable.",
        "url": "e8d906db3eac56229992dd6701dafd90"
    },
    {
        "nl_input": "The query seeks to determine if a file or directory is world-writable. The relevant code checks the file's mode using `os.stat()` and tests for the world-write permission flag (`stat.S_IWOTH`).",
        "url": "b4b9c1d50409852d0126efded851221b"
    },
    {
        "nl_input": "The query requires a function that returns all dates between two given dates, covering the full range from the start date to the end date.",
        "url": "2ec6dccbbbb87558aac51d057330ced6"
    },
    {
        "nl_input": "To create a SHA256 hash from a NumPy array, the solution involves generating a hash based on the array's data type, shape, and byte content. The correct implementation uses `hashlib.sha256()` to sequentially hash the encoded data type, shape, and raw bytes of the array, ensuring uniqueness based on its structure and content.",
        "url": "1b3888d1a58935502e5b2adb2b60e05c"
    },
    {
        "nl_input": "The query requires a function to encode an ndarray into a base64 string representing image data. The function should accept the array and optional parameters for image saving, convert the array to an in-memory image using matplotlib's imsave, and return the base64-encoded string prefixed with the appropriate MIME type.",
        "url": "d2d722cc0e28ad756bd471900ecc9d88"
    },
    {
        "nl_input": "The query requires a list of functions declared or defined in the module. The relevant code extracts and returns all function objects from the global namespace, filtered by their type as `values.Function`. This implies the identification of top-level functions accessible within the module's scope.",
        "url": "c39dfb1294e1cedacd1dba82fe10444c"
    },
    {
        "nl_input": "The query requires a function to test whether an object is a list or tuple, excluding strings and ensuring compatibility with iteration. It seeks to identify non-string sequences that include lists and tuples.",
        "url": "4fe4993dee777785be3fcaec037b4d45"
    },
    {
        "nl_input": "The query seeks a basic and potentially inefficient implementation of a regular expression filter. The provided code includes functions for replacing substrings using regex, with one function performing substitutions based on a dictionary of replacements, indicating a simple but possibly non-optimal regex filtering approach.",
        "url": "360c91549b5a9b4a4c05559eccff8f03"
    },
    {
        "nl_input": "The query requires converting a list of key-value lists into a dictionary. Each sublist contains a key and corresponding value. The desired output is a dictionary where keys map to their associated values. One function from the provided code handles this conversion by iterating through the list and populating the dictionary accordingly.",
        "url": "1b73a949780175c73d5778ca8e2f5b2e"
    },
    {
        "nl_input": "The query requires converting a given timestamp to UTC, ensuring it has timezone information (tzinfo). If the timestamp lacks timezone details, it should be replaced with UTC tzinfo. Otherwise, it should be converted to UTC time.",
        "url": "2a5f56a6f9bf9db10ce4af896725130d"
    },
    {
        "nl_input": "The query requires a function to parse a date string formatted as \"YYYY-MM-DD\" into a date object. It should handle standard date parsing efficiently, potentially using libraries like `datetime` or `dateutil`, and return the parsed date in the correct format without errors.",
        "url": "023556d0f9084731234739f423f423b8"
    },
    {
        "nl_input": "The query requires a function that retries invoking a callable up to a specified number of times upon encountering specific exceptions, runs a cleanup function after each failed attempt, and allows exceptions to propagate on the final attempt. It emphasizes controlled error handling with retry logic and cleanup support.",
        "url": "1a64146c41dcc175d7dced14a4e1efc2"
    },
    {
        "nl_input": "The query requires a function that converts a given timestamp into a UTC datetime object. The function should utilize the timestamp value to generate the corresponding datetime in Coordinated Universal Time (UTC) and return it as a properly localized datetime object.",
        "url": "3d70f3cd7bb4fcd28a864cd53385c91a"
    },
    {
        "nl_input": "The query requires a function to determine the dimensions of an array, specifically returning the number of rows and the maximum number of columns. It should handle both regular and irregular 2D arrays, treating non-list elements as single-column entries.",
        "url": "cdc6bd5ccb9ba6e6aaf76e2667547b09"
    },
    {
        "nl_input": "The query requires a function to print log messages to standard error, potentially with color formatting. The function should prepend a script name and handle variable text input. Optional support for color codes and proper handling of different environments (e.g., POSIX) may be needed.",
        "url": "336b9bafdd37d354437a6c0bf18ca5ba"
    },
    {
        "nl_input": "The query requires a function that decodes a given base64 string into bytes. The input can be either a regular string or a base64-encoded byte sequence, and the output should be the decoded bytes. If the input is a string, it should first be converted to bytes using UTF-8 encoding before decoding from base64.",
        "url": "e1355896799feac76852156156c7c4ce"
    },
    {
        "nl_input": "The query requires a function that takes a dictionary and a \"defaults\" dictionary, then applies `setdefault` for each key-value pair in the defaults. This ensures that if a key is missing in the original dictionary, it is added with the corresponding default value.",
        "url": "9bbbb20f503ba46da76eaa77b98784af"
    },
    {
        "nl_input": "The query requires a function to determine the locale, prioritizing the 'lang' parameter from the GET request. If unavailable, it should fallback to an automatic locale selection based on the request. The selected code should handle this logic efficiently and correctly return the appropriate locale value.",
        "url": "61f13c0b5a9183042dccc906393eddee"
    },
    {
        "nl_input": "The query requires a function to check if a given key exists in a collection of keys, returning a boolean result. The function should accept a string key and utilize a method to retrieve the keys before performing the check.",
        "url": "a095b82ce6afd497cdc7fa027a60c84f"
    },
    {
        "nl_input": "Return true if the socket managed by this connection is connected. The method attempts to check if the socket exists, is bound to a port (non-zero), and if the base transport confirms the connection. If a socket error occurs during this check, it returns false.",
        "url": "513d431a27bb592c41048d90039995f4"
    },
    {
        "nl_input": "The query requires a function that converts a string from snake_case to CamelCase. The function should split the input string by underscores and capitalize the first letter of each subsequent word, joining them together without separators. The output should be a single string in CamelCase format.",
        "url": "e62605ac6be1e0109853647a645d5a0f"
    },
    {
        "nl_input": "The query seeks a function to format a byte-sized value into a human-readable string, handling invalid inputs gracefully. It should convert an integer representing bytes into a size like \"1.2 KB\" or similar, and return \"N/A\" if the input is not valid.",
        "url": "d92799ba562962beae001113ca6732fe"
    },
    {
        "nl_input": "The query requires updating the session's user-agent header with the user-agent string from a Selenium driver instance, ensuring requests made through the session reflect the same user-agent as the browser.",
        "url": "0bad6ea9859d756f7237f3fa3dcf1973"
    },
    {
        "nl_input": "The query requires a function that wraps another function's result in a list if it is not already an iterable, ensuring that the output is always iterable. This is achieved by checking if the result has an `__iter__` attribute and returning it as-is if true, otherwise enclosing it in a list.",
        "url": "1cf347f32e0553e66342c5b228b6d453"
    },
    {
        "nl_input": "The query requires a function that checks whether a specific line exists within a file. The function should take a filename and a line string as input and return a boolean indicating if the line is present in the file.",
        "url": "4c56c26e86dccb73a7524fa62749b3c7"
    },
    {
        "nl_input": "Check whether a specified file exists and has a size greater than zero, ensuring it is not empty. The validation should handle potential errors gracefully and return a boolean result indicating the file's existence and non-empty status.",
        "url": "ba4351c8eadd8c502a13959ccbb889d2"
    },
    {
        "nl_input": "Find the greatest common divisor (GCD) of all elements in the input array `x`, which represents the largest real number `h` such that every element in `x` is an integer multiple of `h`.",
        "url": "7a0e230522dc1bfb6f427d5c55f1b354"
    },
    {
        "nl_input": "Interpolate variable `x` linearly from range `rangeX` to range `rangeY`, using a straight-line mapping between corresponding intervals.",
        "url": "bba8e86c58de9c086c25b972de480920"
    },
    {
        "nl_input": "The query requires a function to unpickle (deserialize) a Python object from a specified file path. The function should read the file in binary mode and use a suitable library (e.g., `dill`) to load the object, with error handling for failed loading.",
        "url": "64f148c6a3c867b3f9380ee9172cce34"
    },
    {
        "nl_input": "The query requires a function that checks if a given value is an integer. The function should return `True` for integers like `123` and `False` for non-integers like `123.45`. The implementation should handle different input types and accurately distinguish between integer and non-integer values.",
        "url": "eaa5d3df3bbe1169308e890817a30790"
    },
    {
        "nl_input": "The query asks to check whether one set is a subset of another set. The relevant code defines a function `issubset` that returns `False` if the length of the first set is greater than the second, and then checks if all elements of the first set are present in the second set using a generator expression.",
        "url": "b13301061e6e68891948ff771a0dd969"
    },
    {
        "nl_input": "The query requires functionality to collect and serve static files efficiently in a Django application. It involves serving files during debug mode or with the `--insecure` flag, collecting only requested files for faster response, and ensuring minimal interference with template tags. Additionally, it explores handling static files via WSGI and loading external Python files dynamically.",
        "url": "cc5b140743d1613ffe94214545936630"
    },
    {
        "nl_input": "The query requires a function to recursively merge two dictionaries, where nested dictionaries are also merged rather than overwritten. The function should handle hierarchical dict structures and update values at all levels without losing existing keys.",
        "url": "367ef0f0e3ea4a8eafab16a7ab44c725"
    },
    {
        "nl_input": "The query requires a function that removes trailing zeroes from an indexable collection of numbers. The provided code defines a method `__remove_trailing_zeros` that correctly identifies and slices the collection up to the last non-zero element, effectively removing any trailing zeros from the end.",
        "url": "18282b3d8bec1a731e59daf433dfd841"
    },
    {
        "nl_input": "The query seeks to understand what happens when a `with` statement ends. Based on the provided code, the behavior involves closing resources and managing cleanup, such as closing the current resource, shutting down a resource manager, and ensuring proper indentation or line handling in block structures.",
        "url": "1d447a9da9154b393c31270b1bb034a1"
    },
    {
        "nl_input": "The query requires a function that retrieves the current x and y coordinates of the mouse cursor using the `GetCursorPos()` win32 function, returning them as a two-integer tuple.",
        "url": "967b8409877fab7c6d1a05090f226266"
    },
    {
        "nl_input": "The query requires a function that opens a GUI dialog window, allowing the user to select a target directory, and returns the chosen directory path as a string.",
        "url": "d5e734d1fcfeb6be60382165bf589df5"
    },
    {
        "nl_input": "The query requires modifying a horizontal bar chart to make the bars thinner. The provided code includes a function `_change_height` that adjusts bar height and vertical positioning, which can be used to reduce the thickness of bars in the chart.",
        "url": "b0be624b8cf1eb2cc8c65f5ac8f1b1fc"
    },
    {
        "nl_input": "The query requires a function to uncheck a checkbox if it is currently checked. The function should accept an optional parameter to force the action and should interact with a UI element by clicking or setting its checked state based on the input.",
        "url": "cf3e688ced0a0895f3c3cf7463d322ee"
    },
    {
        "nl_input": "The query requires implementing a 1x1 convolution operation using PyTorch's `nn.Conv2d`, with configurable input and output planes as well as stride. The bias is disabled, indicating an emphasis on dimensionality transformation without additive offsets. This type of convolution is typically used for reducing or adjusting channel dimensions in neural network architectures.",
        "url": "1c63a8f567508c2dbbd974597db516e0"
    },
    {
        "nl_input": "The query requires a function that executes an FFmpeg version check using a command-line call, parses the output to extract the version number with regular expressions, and returns it as a string. The other provided functions are unrelated to retrieving FFmpeg version information.",
        "url": "5672c84f0fb6f7657f191a3093ff16c4"
    },
    {
        "nl_input": "Draw a horizontal line of specified width and color starting at (x, y) on a graphical interface.  \n-----------------------------------------------------------------------------------------------",
        "url": "bb672ed0a0391881ee18bccacf406e44"
    },
    {
        "nl_input": "The query requires a function that returns the length of the longest consecutive run of `True` values in a dataset, along a specified dimension (e.g., 'time'). The function should utilize a helper function to compute runs and then determine the maximum run length.",
        "url": "f96218fe24cc389de0fb1c77fe88bf40"
    },
    {
        "nl_input": "The query requires a function to unpickle or load a serialized classifier from a file. The function should read the file, deserialize the stored classifier object using an appropriate library (e.g., `pickle` or `dill`), and return it. Optionally, it may involve error handling if the file cannot be loaded successfully.",
        "url": "9fddf29122817bde842baa42b083ce22"
    },
    {
        "nl_input": "The query asks how attribute names in an SQLAlchemy class correspond to database column names, seeking a mapping between the two. The relevant code provides a method that generates a dictionary linking each attribute name to its corresponding column name in the database.",
        "url": "3d729ca5bcd13294547ba7baae28b3bc"
    },
    {
        "nl_input": "The query requires a function to clean up active connections and release all DDEML resources. The function should properly close or delete all instances, plugins, and connections, ensuring no resource leaks occur during the cleanup process.",
        "url": "61e447348557f0698e3e0553701346ba"
    },
    {
        "nl_input": "The query seeks to retrieve the value of a local variable from somewhere in the call stack. The relevant code provided uses the `inspect` module to traverse the stack frames and access the local variables of each frame until it finds a match for the specified variable name. It returns the variable's value if found, or `None` otherwise.",
        "url": "7e2c5d8ffcd2cc1804e4430e37ffcd29"
    },
    {
        "nl_input": "The query requires a generator function that reads input from standard input in a non-blocking mode. The function should yield lines of input as they become available without blocking the execution, allowing for efficient and iterative processing of stdin stream.",
        "url": "e7f60e34eae397045ead8f39e3e261c4"
    },
    {
        "nl_input": "The query requires determining the number of unique levels for each categorical column in a dataset. It involves identifying categorical columns and counting their distinct categories.",
        "url": "a6c5e82314e0faff8a2fffca5ce8286b"
    },
    {
        "nl_input": "The query requires a function that reads a string from a file-like object. The function should open the file, read its contents, and return the resulting string. The provided codes demonstrate various implementations of this functionality using different syntax and file-handling approaches.",
        "url": "48e0185c07ad636ecb25d70cb2b5dd3d"
    },
    {
        "nl_input": "The query requires a function that takes a string and a dictionary, then replaces all occurrences of each key in the dictionary with its corresponding value in the string.",
        "url": "248a51a67e1e4f407628e9ccafebb8d6"
    },
    {
        "nl_input": "The query requires a function to convert a pandas Series into an xarray DataArray. The provided code includes a relevant method `from_series`, which takes a pandas Series, converts it into a DataFrame, and then uses the Dataset's `from_dataframe` method to create an xarray DataArray.",
        "url": "8acad3dcdc0bc175f9a4ddd4dac2d19c"
    },
    {
        "nl_input": "The query requires a function to securely compare two strings in a way that prevents timing attacks. The comparison must ensure that differences in processing time do not reveal information about the strings. The provided code includes a function that performs such a constant-time comparison by checking each character pair and returning whether the strings are equal without early exits.",
        "url": "71f181ff4390f325cea684ca6661f4f8"
    },
    {
        "nl_input": "The query requires a function that checks if a given file extension matches any of the valid extensions (e.g., `.haml`, `.html.haml`, etc.). The function should return `True` if it matches, and `False` otherwise.",
        "url": "741cd035bc31b069280d84e5c84487d1"
    },
    {
        "nl_input": "{\"def inverted_dict(d): return dict((force_hashable(v), k) for (k, v) in viewitems(dict(d)))}\": \"979f3f0fe1af433ff17407bf66d96cad\", \"def list2dict(lst): dic = {} for k, v in lst: dic[k] = v return dic\": \"bf10521bc0f9003ddbc220d64ecc68eb\"}",
        "url": "979f3f0fe1af433ff17407bf66d96cad"
    },
    {
        "nl_input": "The query seeks a function that processes an iterable of text lines to extract and return a list of words. Each word is identified using a regular expression that matches word characters. The extraction should iterate through each line and yield individual words found in the text.",
        "url": "866cf01cf4308a742bd39972cdf57ead"
    },
    {
        "nl_input": "Execute a stored procedure and return the first row of the result set if available; otherwise, return None.",
        "url": "4bb07195c20355ce50cc040f5e70a269"
    },
    {
        "nl_input": "The query requires applying a function in parallel to each element of an input iterable. The desired functionality involves taking an iterable and a function, then mapping the function onto each element of the iterable, optionally with additional arguments. This supports parallel or sequential transformation of data elements using a provided function.",
        "url": "1a639907a649d5db69f9b6fdd58119d3"
    },
    {
        "nl_input": "The query requires determining the largest contig for each strain from a dictionary of sorted contig lengths. The solution involves iterating through the dictionary and selecting the first (largest) contig length for each strain.",
        "url": "fe624b37a24fae6c2ac1da10c64e2a3a"
    },
    {
        "nl_input": "The query requires a utility function to remove duplicates from a list while preserving the original order. The function should take a sequence (list) as input and return a new list with duplicates removed.",
        "url": "695e29d80ca42056024f20cf87ce69a0"
    },
    {
        "nl_input": "The query requires a function to save data (a variable or object) into a pickle file. The function should take the data and a filename as input, and store the data in the specified file using `pickle.dump`. Some implementations may include additional parameters such as protocol version for optimization or compatibility.",
        "url": "a0c6bdbe745a48b0c5ff9e6435ea812c"
    },
    {
        "nl_input": "The query seeks to stop and destroy a Bloomberg connection. The relevant code should properly close or terminate the connection, potentially involving session stopping, resource cleanup, or using built-in destruction methods.",
        "url": "fe9deca4af0d80078524960ad2b74574"
    },
    {
        "nl_input": "The query seeks to determine whether the Python script is running in an interactive shell. The code checks if standard output is connected to a terminal and compares process groups to detect background execution, helping decide if the session is interactive or not.",
        "url": "76aa03205e7480cb1280364d8181ad15"
    },
    {
        "nl_input": "The query requires a function that extracts the hostname from a given URL. The function should parse the URL, retrieve the network location (hostname), and return it as a string. If no hostname exists, it should return an empty string.",
        "url": "13343f8f3c5515600e035d8cca7abd84"
    },
    {
        "nl_input": "The query requires a function that converts a Napoleon-style docstring into a plain Sphinx string format. It implies the need for parsing the docstring using a configuration that allows control over parameters and return type formatting, ultimately returning the processed result as a string.",
        "url": "40b653bcdc05a7556a73500d75ea2a95"
    },
    {
        "nl_input": "The query requires a function to scale image pixel values to the uint8 range (0-255), ensuring proper contrast adjustment by mapping the minimum and maximum pixel values to 0 and 255, respectively. The suitable method uses `cv2.convertScaleAbs` with appropriate scaling.",
        "url": "9b7c3a7b5223587100d77ad757569265"
    },
    {
        "nl_input": "The query requires a function that, given a datetime object, returns the day number of the last day of the month. The provided code examples demonstrate how to calculate this by advancing the date, resetting to the next month, and backtracking to find the last day.",
        "url": "820668a155ea53034787f1042a2328c0"
    },
    {
        "nl_input": "The query seeks to represent Earth's orientation as a rotating matrix, involving the transformation of angular parameters into a 3D rotation matrix using specific rotation functions.",
        "url": "d5c0c0b2fdf91739d6b7fcf66bbb3579"
    },
    {
        "nl_input": "The query requires a method that validates XML input against a schema and returns a boolean result, indicating whether the XML is valid. It involves parsing the XML, handling potential validation errors, and raising an appropriate exception if validation cannot be performed due to a missing schema.",
        "url": "2605045c4bab070d37e542733c536732"
    },
    {
        "nl_input": "The query requires a function that returns a random element from a sequence `n` times. If `n` is `None`, it should continue indefinitely. The function should handle repeated random selection and support infinite iteration when needed.",
        "url": "4b7b7a1e82c377437cb8d2c97b053eef"
    },
    {
        "nl_input": "The query requires a function to determine if two rectangles, each represented as a tuple (xmin, xmax, ymin, ymax), intersect. The function should return True if they overlap and False otherwise.",
        "url": "048248cc31234e7e17b1e3d8f525a955"
    },
    {
        "nl_input": "The query seeks to determine the number of leading whitespace characters at the beginning of a given text. The relevant code provides a function that iterates through the text, returning the index where non-whitespace is found, effectively counting leading spaces, tabs, or newlines.",
        "url": "a2f407d02b38bb235bf47e7d92789cdf"
    },
    {
        "nl_input": "The query requires a function that can reverse a range by swapping its start and end values, along with their inclusion flags. The desired functionality involves modifying internal attributes to reflect this reversal.",
        "url": "0bd3c70c60c995acfc00f9af226fdcd9"
    },
    {
        "nl_input": "The query requires a function that returns the system uptime in seconds. If running on Syllable, it should return `None`. The solution uses `os.stat()` to get the modification time of a specific file (`/dev/pty/mst/pty0`) as the boot time, then calculates uptime by subtracting this from the current time using `time.time()`, handling exceptions for `NameError` and `OSError`.",
        "url": "a316ccd8b999becea02b2d527a5e8beb"
    },
    {
        "nl_input": "The query requires a function that removes empty text utterances from a list. The provided code defines a function `remove_empty_text` that filters out utterances with empty or whitespace-only text, returning only those with non-empty content.",
        "url": "5ca8d1be36d4955478ff4ef72fbc653a"
    },
    {
        "nl_input": "The query seeks a method to handle the action when the stop button is pressed. The relevant code should check if computations are occurring, then either interrupt the kernel or send an exit command, and disable the stop button afterward.",
        "url": "435335bb0dc17309dd5d006b3f7bc474"
    },
    {
        "nl_input": "The query seeks to determine whether a given callback is a simple, non-specialized function. The code checks if the callback is an instance of a callable type while excluding instances of classes or class methods.",
        "url": "0e6cf5fd3544a439b3491daa4a358c98"
    },
    {
        "nl_input": "The query requires a function similar to `random.choice` that also supports passing a `set` as the sequence argument. The solution should handle sets by converting them to a tuple or equivalent before selection, ensuring compatibility while preserving randomness. It must behave like the standard `random.choice` for other sequence types.",
        "url": "1ee8eef5f28bf7d5c8091fb2794bc444"
    },
    {
        "nl_input": "The query requires a function to detach all tracked classes and objects, restoring original constructors and clearing tracking lists. It involves removing all objects, indexes, and keepalive references, effectively resetting the state of the system.",
        "url": "c6cd16b1f8c53bd52a696c9afd132194"
    },
    {
        "nl_input": "The query requires a function that calculates and returns the progress ratio and percentage completed based on the current value and total value. The output should be in the format: \"current / total (X% completed)\", where X is the integer percentage calculated from (current / total) * 100.",
        "url": "205d2257a363e4a52180c14d82ad05e0"
    },
    {
        "nl_input": "The task requires extracting the top-level domain (TLD) from a given URL, which includes handling the protocol and correctly identifying the domain extension. The function should return only the TLD part of the URL.",
        "url": "40adfe081dbdd317187bc7c9fdb5dc37"
    },
    {
        "nl_input": "The query requires a function that returns the type of a subtree, specifically identifying it as Root, Nucleus, or Satellite. The relevant code should label the subtree type and validate it against known types.",
        "url": "ce3b5bf4b5f786aed0b49184b37aa877"
    },
    {
        "nl_input": "Check if a specified column exists in the DataFrame and contains at least one non-null value. Return True if both conditions are met, otherwise return False.",
        "url": "d09752f6ad8ae3d274cbfd233771df7a"
    },
    {
        "nl_input": "The query seeks a function that interacts with a figure or window, specifically involving operations related to raising or bringing forward a figure window. The function appears to be connected to a graphical interface or visualization tool, and it may involve handling figures either directly or through a manager.",
        "url": "6ef3923ed895238369f9017c3075320b"
    },
    {
        "nl_input": "The query seeks to disable stdout buffering so that output is immediately visible, ensuring log messages appear in real-time rather than being delayed until the program exits.",
        "url": "f4af9faea801abd2f6afcb51f3fd0f91"
    },
    {
        "nl_input": "Check if a given file is in JSON format by attempting to load it as JSON, returning a boolean result.",
        "url": "b6d56ef631a02d9785fd953fd088c09e"
    },
    {
        "nl_input": "The query requires a function to convert a list of elements into a string representation, with elements separated by a specified separator. The function should handle element conversion to strings and join them using the provided separator.",
        "url": "fbd29b6022db8726318c01905aec93b8"
    },
    {
        "nl_input": "The query requires a function that initializes or resets internal state variables, setting attributes like previous frame, movement flags, and timestamps to their initial values.",
        "url": "746c5b08e8078cfe8bd345b2f06d87d1"
    },
    {
        "nl_input": "The query requires initializing a Python list with a fixed capacity (default 10 or user input), simulating a static array by restricting dynamic resizing, and managing elements using front and rear indices.",
        "url": "0b503029f353eb61ae98362d02f635c4"
    },
    {
        "nl_input": "The query requires a function that converts various input types (boolean, string) into a boolean value. It should handle strings like \"true\", \"1\", \"false\", \"0\" and return the corresponding boolean. If the input is already a boolean, it should return it as-is. Empty strings default to False.",
        "url": "6794fea99ea3f5a130f9b9f4a2d2e46a"
    },
    {
        "nl_input": "The query requires a function that modifies `sys.argv` to simulate command-line argument parsing. The function should accept a command string, split it into arguments, and extend `sys.argv` with these arguments for subsequent use in the program.",
        "url": "4e23368ecbd13cad64e50daa0581d413"
    },
    {
        "nl_input": "The query requires a function that checks whether the values of an expression are **not contained** in a given list of values. It is the opposite of the `isin` functionality, which checks for inclusion. The desired behavior returns `True` if the expression's value is **not in** the provided set and `False` otherwise.",
        "url": "9cede792fe3f616f2e77fbe7d4feee1a"
    },
    {
        "nl_input": "The query seeks a method to save a session to a file using the `Instaloader` class. The relevant code defines `save_session_to_file`, which serializes session cookies into a file using `pickle`. This method captures the session's cookie state, allowing it to be stored and reused later.",
        "url": "aeedffc3c75a7937797d81d203e6e748"
    },
    {
        "nl_input": "The query requires a function that transforms the output of `parse()` into a `Text` object, using a specified token order. The input string is processed with configurable token tags, such as WORD, POS, CHUNK, etc., to construct the resulting Text object.",
        "url": "eea459ea63f8d4aa2b864c391ee02500"
    },
    {
        "nl_input": "The query requires a function to print a dictionary in a JSON-like format with sorted keys and proper indentation. The provided code includes functions that utilize `json.dumps` with `sort_keys=True` and specified indentation to achieve this formatting.",
        "url": "bbb8c24e82437ea03fccdc924a99d399"
    },
    {
        "nl_input": "The query requests retrieving the User-Agent from the request headers if available. The desired functionality involves extracting the User-Agent string, ensuring it is properly encoded in UTF-8, and returning it as part of a function's output.Fallback to an empty string is acceptable if the User-Agent is not present.",
        "url": "c92742645c96823709ad5b8166cb1c65"
    },
    {
        "nl_input": "The query requires a plotting helper function that can create and save a plot, with support for customizing appearance (e.g., labels, grid, legend), displaying the plot, and optionally filling the area under the curve. It also needs to handle KDE (kernel density estimation) plots with title, color, and axis customization.",
        "url": "e5568372381b6eebbeb157515f43207b"
    },
    {
        "nl_input": "The query requires a function that checks whether a given entity has a value for a specific property. It involves determining if the property is initialized, considering factors like default values and explicit assignments. The solution should return a boolean indicating presence or absence of the property value for the entity.",
        "url": "09121d31a8d0eeeb5cf9dcd83ba98108"
    },
    {
        "nl_input": "Create a CLI argument parser using `argparse` to handle command-line arguments and options, including support for custom formatting, help messages, and actions like dry runs. The parser should allow extending system arguments dynamically.",
        "url": "df7be6d0213c51a7bb23985c9f9ed388"
    },
    {
        "nl_input": "The query requires a function to calculate equality between two `Comparable` objects. The function should compare the objects using their `equality` method, log the comparison before and after obtaining the result, and return whether they are equal.",
        "url": "d71243e301d8df8a50df0fa246ce4dc0"
    },
    {
        "nl_input": "The query requires a function to remove and return the top element from a heap structure. The implementation should involve swapping the root with the last element, adjusting the heap property by sifting down, and then returning the removed value. This operation maintains the integrity of the heap after removal.",
        "url": "20ee54ac666aa4789a78c32a4103b045"
    },
    {
        "nl_input": "The query requires a function to compress data in memory using GZIP without writing to disk. It specifically references the use of in-memory buffers such as `cStringIO.StringIO` or `six.BytesIO`, and emphasizes compression level configuration and proper closure of the GZIP file object after writing data.",
        "url": "5b86e1dfc1552e2ad8e2a95d9bf9feaa"
    },
    {
        "nl_input": "Find the index of the first occurrence of `1` in a 1D array of 0s and 1s, reading from left to right.",
        "url": "085fc95e9cfffcdc0589e1ae27ff97d1"
    },
    {
        "nl_input": "The query requires extracting a value from the request's query string. The preferred solution involves retrieving the value using the request's arguments or parameters, with support for providing a default if the key is not present.",
        "url": "af8896eebbf01d8cdca7e081f088e946"
    },
    {
        "nl_input": "The query requires a function that converts a list of key-value pairs into a dictionary, where each key is associated with its corresponding value. Duplicates in the list should be handled by appending values to existing keys as a list.",
        "url": "bf10521bc0f9003ddbc220d64ecc68eb"
    },
    {
        "nl_input": "The query requires a function that deserializes a string into a date object. The provided code examples use the `dateutil.parser.parse()` method to achieve this, extracting just the date part with `.date()`. These functions also handle cases where the input might already be a date object, returning it as-is. An exception for import errors is handled in one of the implementations.",
        "url": "926e7dc9d7779ac0c61e5c1297b2a5e9"
    },
    {
        "nl_input": "The query requires a function that searches a tuple array for the first tuple where the element at a specified index matches a given value, returning that tuple.",
        "url": "b01054cbea99f2bb7ce3ffbe8771e4ac"
    },
    {
        "nl_input": "The query requires a function that wraps a vertical table within a TabularOutputFormatter, allowing proper formatting and display of tabular data. The function should handle input data and headers, and support additional formatting parameters such as title, separator character, and length. This ensures structured and visually clear output for terminal or notebook environments.",
        "url": "3a3657a34dc0ed457876ae075ffdc328"
    },
    {
        "nl_input": "The query describes a class or function that accepts a `NumberGenerator` operand, an operator, and optional arguments to be used when applying the operator to the operand. It implies a structure for dynamically setting up operations on numeric data, where the operator is callable and may receive additional parameters at instantiation for later execution.",
        "url": "1ba9155be7b2df6ba7e4674d731803fc"
    },
    {
        "nl_input": "The query requires a function that performs multiple string replacements in a given input string. It should accept a list of search terms and corresponding replacement values, and apply the replacements sequentially to return the modified string.",
        "url": "4aa3a520458b5764e46c4f07eac8abf2"
    },
    {
        "nl_input": "The query requires setting a serial port path, such as `/dev/tty.usbserial-A4001ib8`, and includes functionality for opening the serial port, handling errors if the port fails to open.",
        "url": "4c38388e223a226c56f8c77f1fc60153"
    },
    {
        "nl_input": "The query requires checking whether the provided features data is not empty. Specifically, it looks for cases where the feature list is either null or contains elements with a zero shape size in the first dimension.",
        "url": "6bb7ab54a926ea8c1cf12f33c4e6128a"
    },
    {
        "nl_input": "The query seeks a convenience function to load YAML-encoded data from disk. The function should accept a file path, read the file, and return the parsed YAML content. Simplicity and directness in loading YAML files are emphasized.",
        "url": "ea01144e47e6054ffabeb2fd14ef547a"
    },
    {
        "nl_input": "The query requires a function that displays a tooltip at a specific position relative to a widget, using the `QToolTip.showText` method with the global position obtained from `mapToGlobal`.",
        "url": "894341368638fcabfe7714433b1b6e50"
    },
    {
        "nl_input": "The query requires a function that converts a `Matrix3` object into a 3x3 NumPy array, extracting the `x`, `y`, and `z` components of each row (`a`, `b`, `c`) from the matrix.",
        "url": "121d84c275378f7017a360c67108ed82"
    },
    {
        "nl_input": "The query requires a function that counts the occurrences of elements in a list of lists, returning a `defaultdict` where each unique element is associated with its total count across all sublists. For example, given `[[a, b], [a]]`, the output should be a dictionary-like structure with counts `{a: 2, b: 1}`.",
        "url": "12da05d47f0365acc6d5050614aa24a8"
    },
    {
        "nl_input": "The query requires a function to calculate the start and end dates of the current week. The provided code includes a suitable function `get_week_start_end_day()` that returns the week's start date (Monday) and end date (Sunday) based on the current date.",
        "url": "7186890458a16d68f3ae86fdaed044f3"
    },
    {
        "nl_input": "The query requires executing multiple jobs in parallel using a specified number of threads. It involves managing and potentially terminating processes to ensure efficient execution. The solution should utilize multithreading to run and manage processes concurrently.",
        "url": "cf394654dccebe70bab591518bfddb75"
    },
    {
        "nl_input": "The query requires a function that can measure and print the execution time of another function, specifically for quick and dirty profiling purposes. It should log the function name, execution time, arguments, and keyword arguments if the duration exceeds a specified limit.",
        "url": "c3a9f0a7366d3d26740db725d27afbd3"
    },
    {
        "nl_input": "Retrieve the last `number_of_bytes` from the file `filename` by reading it in binary mode. If the file size exceeds `number_of_bytes`, seek to the appropriate position from the end and return the corresponding bytes.",
        "url": "297a85bb493d0c806f74039a8a5906f1"
    },
    {
        "nl_input": "The query seeks a function that updates a dictionary with object attributes only if they exist and are not `None`. The function should take an object, a dictionary, and a list of attribute names, then populate the dictionary with non-`None` attribute values from the object.",
        "url": "dca9f4b5be5a5a31bfe15714e1760c23"
    },
    {
        "nl_input": "The query requires a function that checks whether a given string represents an integer. The function should return `True` if the string can be interpreted as an integer and `False` otherwise. It should handle typical edge cases, such as non-numeric strings or values with decimal points, ensuring only whole number strings are considered valid integers.",
        "url": "aef9f5feefc059d9e764b382b27992ec"
    },
    {
        "nl_input": "Given a latitude and longitude, the query requires formatting these numeric values into a string in \"lat,lng\" format, preserving their precision without scientific notation. The correct approach involves converting the inputs to strings and then formatting them directly.",
        "url": "15b12c412bbefcab9f103d1dc80a8eb5"
    },
    {
        "nl_input": "The query requires a function to check if a given string is a palindrome. The function should handle both strict and non-strict modes, where strict mode checks the exact string and non-strict mode ignores spaces. It also requires validation that the input is a full string.",
        "url": "0a8601aa40e8e29e9a34b4bfee20bdb0"
    },
    {
        "nl_input": "The query requires setting the title of a console window using Python. The provided code demonstrates how to achieve this on a Windows platform using the `ctypes` library to call the `SetConsoleTitleW` function from the Windows API. The function ensures that the console window's title is set correctly by passing a Unicode string.",
        "url": "adb202dabb7da58b5d21780a6344bf64"
    },
    {
        "nl_input": "Find the index of the element in the array that is closest to the given value by minimizing the squared difference.",
        "url": "2a95f703627a46eaed3c2acda1993e1a"
    },
    {
        "nl_input": "The query requires a function that removes duplicates from a list, ensuring all items are unique while preserving the original order of appearance.",
        "url": "7656d146fe450dcc47f61df1b20ef0ad"
    },
    {
        "nl_input": "The query requires a function to print colored text to a specified target handle, supporting foreground and background color options. The function should manage color settings before writing the string, flush the output for proper display in Python 3.x, and reset colors afterward. Additionally, it should allow customization of the end character, with a default newline.",
        "url": "5e7880a46ffa2a7b19d6212e49eb068b"
    },
    {
        "nl_input": "The query requires a description of a standard 2D convolution block. The code includes definitions for a convolution block and a 1x1 convolution, both utilizing PyTorch's `nn.Conv2d`. The main focus is on implementing a flexible convolution block that supports various dilation rates and kernel sizes for 2D image data.",
        "url": "07584e5fda69b8f7642955511010ad86"
    },
    {
        "nl_input": "The query requires a function that removes all non-printable characters from a text string. The provided code defines a `clean` function that converts input to a string and retains only characters with an ASCII value of 32 or higher, effectively removing non-printable characters.",
        "url": "0f171b4626d9f0ea2a003661289af42f"
    },
    {
        "nl_input": "The query requires a method to move a sprite back to its previous position, typically by restoring the old position and updating the relevant attributes like the rectangle and feet positions.",
        "url": "6cbd916f3ecf9c37c1a7d1e9af1ab594"
    },
    {
        "nl_input": "The query requires a function that converts a given value into a string, handling differences between Python 2 and Python 3. It should return `str` in Python 3 and `unicode` in Python 2, ensuring proper encoding/decoding, particularly decoding bytes using UTF-8 when necessary.",
        "url": "3d2fbb3f4b88d174fd2f578d0977f650"
    },
    {
        "nl_input": "The query requires a function that extracts the year from a date string formatted as `MM/DD/YYYY`. If the input is invalid, it should return 0. The function should use error handling to manage incorrect date formats gracefully.",
        "url": "6c997aefc629ec3ddb36fa1869964c25"
    },
    {
        "nl_input": "The query seeks an abstraction over the `executemany` method, which is used to execute multiple SQL statements in one call. The relevant code defines a method that accepts an SQL statement and a list of parameter values, executes them using `executemany`, and commits the transaction. This enables efficient batch database operations within a single session.",
        "url": "8c81da54c84a8bf387c8abd981115c12"
    },
    {
        "nl_input": "The query requires loading a GeoJSON file into a Python dictionary using the `json` module. It also notes that a different text encoding can be specified using the `encoding` argument when opening the file. The goal is to read and parse the GeoJSON content for further use in a Python application.",
        "url": "36327fa884ccc7f85d0e3324f4100445"
    },
    {
        "nl_input": "The query requires a function that checks if a given string `x` is a valid date in the format YYYYMMDD. If the string represents a valid date, the function should return True; otherwise, it should return False. The validation must ensure that the input strictly conforms to the expected date format.",
        "url": "8dce08e6c99c22329f7a299e12d01400"
    },
    {
        "nl_input": "The query requires a linear model defined by a slope and a nugget, where the model computes the output as `slope * d + nugget`. It involves extracting parameters from an input array `m` and applying them to a distance or input variable `d`.",
        "url": "16d9a2609aa57f6f628be3348335008d"
    },
    {
        "nl_input": "The query requires calculating the top margin in pixels for a plot area by considering optional title and subtitle font sizes. The calculation starts with a base value of 5 pixels, adding the title font size if a graph title is shown, and the subtitle font size if a graph subtitle is shown, resulting in the total top margin.",
        "url": "ecd265ebe30c4d7de7c6d953ed229c88"
    },
    {
        "nl_input": "Check whether a specified executable file is present and accessible in the system's PATH environment variable.",
        "url": "e8c5f4c92b428c3492797c43a4145c2f"
    },
    {
        "nl_input": "The query requires a function that performs multiple regular expression substitutions on a source string using a dictionary of patterns and replacements. It aims to replace all occurrences of the keys in the dictionary with their corresponding values in the input string, utilizing `re.sub` for pattern matching and replacement.",
        "url": "dd91f2aba163192f99af05825ee90b86"
    },
    {
        "nl_input": "The query requires a function to perform a sum reduction operation on an input array `a`, along a specified `axis`, with an option to retain dimensions using `keep_dims`. The function should handle both standard and NumPy array inputs for the axis parameter.",
        "url": "3f66655eab2db02115b31c2f24051dad"
    },
    {
        "nl_input": "The query requires a method to perform an I2C write operation at a specified I2C address using provided data. It expects the method to accept a command parameter containing the device address and data to write, with no return message. The operation should be asynchronous and handle conversion of input parameters to appropriate integer values for the I2C transaction.",
        "url": "3d672b6acb926c7111962a80dbc3aba9"
    },
    {
        "nl_input": "The query requires functionality to reset or initialize view-related states, such as clearing previous frames, stopping movement tracking, and setting time references. It likely pertains to a system handling visual transitions or animations where state resets are essential for proper rendering or interaction.",
        "url": "92051de4dfff09b7d8998a84f1a1242e"
    },
    {
        "nl_input": "The query addresses the slow conversion of a NumPy recarray into a list of records using Python types. It seeks an efficient method to transform each record in the recarray into a tuple of corresponding Python types, as demonstrated by the provided code that utilizes a generator and type conversion function.",
        "url": "abe0f8e81e16f427a549329c886a3d0c"
    },
    {
        "nl_input": "The query requires checking if a password is valid. The first code snippet provided matches this requirement, as it defines a function `is_password_valid` that uses a regular expression to validate the password format, ensuring it is between 4 and 75 characters long.",
        "url": "e407d959ae51e2deeb9c5729241dcd19"
    },
    {
        "nl_input": "The query requires a function `round_array` that takes an input array and returns a rounded version of it. If the input is a NumPy ndarray, it should be rounded and converted to integers. If not, the single value should be rounded and returned as an integer.",
        "url": "67238b7feb1584fc9527370198fcce31"
    }
]
