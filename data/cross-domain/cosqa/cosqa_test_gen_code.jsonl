[{"nl_input": "sort by a token in string python", "code_input": "def sort_by_token(strings):    return sorted(strings, key=lambda s: s.split()[0])# Test the functionstrings = [\"Hello world\", \"Python is fun\", \"Data science is awesome\", \"Machine learning is interesting\"]print(sort_by_token(strings))", "url": 4833, "gt": "def _process_and_sort(s, force_ascii, full_process=True): # pull tokens ts = utils.full_process(s, force_ascii=force_ascii) if full_process else s tokens = ts.split() # sort tokens and join sorted_string = u\" \".join(sorted(tokens)) return sorted_string.strip()"}, {"nl_input": "python check file is readonly", "code_input": "import osdef check_readonly(file_path):    if os.access(file_path, os.R_OK):        return True    else:        return False", "url": 2445, "gt": "def is_readable(filename): return os.path.isfile(filename) and os.access(filename, os.R_OK)"}, {"nl_input": "declaring empty numpy array in python", "code_input": "import numpy as np# Declare an empty numpy arrayempty_array = np.array([])print(empty_array)", "url": 4923, "gt": "def empty(self, name, **kwargs): return self._write_op(self._empty_nosync, name, **kwargs)"}, {"nl_input": "test for iterable is string in python", "code_input": "def test(variable):    if isinstance(variable, str):        return True    elif hasattr(variable, '__iter__'):        return False    else:        return False# Test the functionprint(test('Hello'))  # Trueprint(test([1, 2, 3]))  # Falseprint(test({1, 2, 3}))  # False", "url": 1640, "gt": "def is_iterable_but_not_string(obj): return hasattr(obj, '__iter__') and not isinstance(obj, str) and not isinstance(obj, bytes)"}, {"nl_input": "python print results of query loop", "code_input": "# Define a list of numbersnumbers = [1, 2, 3, 4, 5]# Use a loop to print the square of each numberfor number in numbers:    print(number ** 2)", "url": 4258, "gt": "def print_runs(query): if query is None: return for tup in query: print((\"{0} @ {1} - {2} id: {3} group: {4}\".format( tup.end, tup.experiment_name, tup.project_name, tup.experiment_group, tup.run_group)))"}, {"nl_input": "how to save header of fits file to export python", "code_input": "import astropy.io.fits as fits# Open the FITS filehdu_list = fits.open('your_file.fits')# Get the header of the first HDU (usually the primary header)header = hdu_list[0].header# Save the header to a new FITS filefits.writeto('exported_file.fits', header)", "url": 1138, "gt": "def write_fits(self, fitsfile): tab = self.create_table() hdu_data = fits.table_to_hdu(tab) hdus = [fits.PrimaryHDU(), hdu_data] fits_utils.write_hdus(hdus, fitsfile)"}, {"nl_input": "python calc page align", "code_input": "def calc_page_align(text):    # Calculate the length of the text    text_length = len(text)    # Calculate the number of spaces    num_spaces = text.count(' ')    # Calculate the number of words    num_words = len(text.split())    # Calculate the number of lines    num_lines = text.count('\\n') + 1    # Calculate the page alignment    page_align = (text_length - num_spaces) / num_words    return page_align# Test the functiontext = \"This is a test. It is just a test.\"print(calc_page_align(text))", "url": 6173, "gt": "def page_align_content_length(length): # type: (int) -> int mod = length % _PAGEBLOB_BOUNDARY if mod != 0: return length + (_PAGEBLOB_BOUNDARY - mod) return length"}, {"nl_input": "python numpy array as float", "code_input": "import numpy as np# Create a numpy arrayarray = np.array([1, 2, 3, 4, 5])# Convert the numpy array to floatarray_float = array.astype(float)print(array_float)", "url": 854, "gt": "def as_float_array(a): return np.asarray(a, dtype=np.quaternion).view((np.double, 4))"}, {"nl_input": "input string that replaces occurences python", "code_input": "def replace_string(input_string):    return input_string.replace(\"python\", \"programming\")input_string = \"I love python programming\"print(replace_string(input_string))", "url": 5637, "gt": "def __replace_all(repls: dict, input: str) -> str: return re.sub('|'.join(re.escape(key) for key in repls.keys()), lambda k: repls[k.group(0)], input)"}, {"nl_input": "python check all items in list are ints", "code_input": "def check_all_ints(lst):    return all(isinstance(item, int) for item in lst)", "url": 1613, "gt": "def is_iterable_of_int(l): r if not is_iterable(l): return False return all(is_int(value) for value in l)"}, {"nl_input": "how to save variable to text file python", "code_input": "# Define the variablemy_variable = \"Hello, World!\"# Open the file in write modewith open('my_file.txt', 'w') as f:    # Write the variable to the file    f.write(my_variable)", "url": 1135, "gt": "def save(variable, filename): fileObj = open(filename, 'wb') pickle.dump(variable, fileObj) fileObj.close()"}, {"nl_input": "how to skip an index in a for loop python", "code_input": "lst = ['a', 'b', 'c', 'd', 'e']for i in range(len(lst)):    if i % 2 == 0:  # Skip every other index        continue    print(lst[i])", "url": 2047, "gt": "def stop_at(iterable, idx): for i, item in enumerate(iterable): if i == idx: return yield item"}, {"nl_input": "how to create a tokenization code in python", "code_input": "import nltkdef tokenize(sentence):    tokens = nltk.word_tokenize(sentence)    return tokenssentence = \"This is a sample sentence.\"print(tokenize(sentence))", "url": 4516, "gt": "def token(name): def wrap(f): tokenizers.append((name, f)) return f return wrap"}, {"nl_input": "python raise without parentheses", "code_input": "raise", "url": 6088, "gt": "def assert_or_raise(stmt: bool, exception: Exception, *exception_args, **exception_kwargs) -> None: if not stmt: raise exception(*exception_args, **exception_kwargs)"}, {"nl_input": "how to seperate list with commas python", "code_input": "def separate_list(lst):    return ','.join(lst)# Test the functionlst = ['apple', 'banana', 'cherry']print(separate_list(lst))  # Output: apple,banana,cherry", "url": 3842, "gt": "def _return_comma_list(self, l): if isinstance(l, (text_type, int)): return l if not isinstance(l, list): raise TypeError(l, ' should be a list of integers, \\ not {0}'.format(type(l))) str_ids = ','.join(str(i) for i in l) return str_ids"}, {"nl_input": "python asynchronous function call return", "code_input": "import asyncioasync def async_function(delay):    print(f\"Started task with delay of {delay} seconds\")    await asyncio.sleep(delay)    print(f\"Task with delay of {delay} seconds has finished\")    return f\"Task with delay of {delay} seconds has finished\"async def main():    result = await asyncio.gather(        async_function(1),        async_function(2),        async_function(3)    )    print(result)asyncio.run(main())", "url": 318, "gt": "def asynchronous(function, event): thread = Thread(target=synchronous, args=(function, event)) thread.daemon = True thread.start()"}, {"nl_input": "how to make a seconds to time in python", "code_input": "def seconds_to_time(seconds):    minutes, seconds = divmod(seconds, 60)    hours, minutes = divmod(minutes, 60)    return \"{:02d}:{:02d}:{:02d}\".format(hours, minutes, seconds)# Test the functionprint(seconds_to_time(5000))  # Output: \"01:01:00\"", "url": 3713, "gt": "def time2seconds(t): return t.hour * 3600 + t.minute * 60 + t.second + float(t.microsecond) / 1e6"}, {"nl_input": "python cast true or false as numbers", "code_input": "def convert_to_num(value):    if value == True:        return 1    elif value == False:        return 0    else:        return \"Invalid input\"# Test the functionprint(convert_to_num(True))  # Output: 1print(convert_to_num(False))  # Output: 0print(convert_to_num(1))  # Output: Invalid inputprint(convert_to_num(\"test\"))  # Output: Invalid input", "url": 1299, "gt": "def _to_numeric(val): if isinstance(val, (int, float, datetime.datetime, datetime.timedelta)): return val return float(val)"}, {"nl_input": "add milliseconds to datetime python", "code_input": "from datetime import datetimedef add_milliseconds(dt, milliseconds):    return dt + datetime.fromtimestamp(dt.timestamp() + milliseconds/1000)# Test the functiondt = datetime.now()milliseconds = 500print(add_milliseconds(dt, milliseconds))", "url": 115, "gt": "def datetime_to_ms(dt): seconds = calendar.timegm(dt.utctimetuple()) return seconds * 1000 + int(dt.microsecond / 1000)"}, {"nl_input": "how to read the last n lines of a program on python", "code_input": "def read_last_n_lines(filename, n):    with open(filename, 'r') as file:        lines = file.readlines()    if n > len(lines):        print(\"Not enough lines in the file\")        return    last_n_lines = lines[-n:]    return last_n_lines# Usagefilename = 'your_file.txt'n = 5print(read_last_n_lines(filename, n))", "url": 2729, "gt": "def get_readline_tail(self, n=10): end = self.shell.readline.get_current_history_length() + 1 start = max(end-n, 1) ghi = self.shell.readline.get_history_item return [ghi(x) for x in range(start, end)]"}, {"nl_input": "python mysql get list of table columns", "code_input": "import pymysql# Establish a connection to the databaseconnection = pymysql.connect(host='localhost',                             user='your_username',                             password='your_password',                             db='your_database')try:    with connection.cursor() as cursor:        # Execute a query to get the list of table columns        cursor.execute(\"SHOW COLUMNS FROM your_table\")        result = cursor.fetchall()        for row in result:            print(row[0])  # Print the column namefinally:    connection.close()", "url": 277, "gt": "def get_table_columns(dbconn, tablename): cur = dbconn.cursor() cur.execute(\"PRAGMA table_info('%s');\" % tablename) info = cur.fetchall() cols = [(i[1], i[2]) for i in info] return cols"}, {"nl_input": "how to get domain part of a url in python", "code_input": "from urllib.parse import urlparsedef get_domain(url):    domain = urlparse(url).netloc    return domain# Test the functionprint(get_domain('https://www.example.com'))", "url": 5694, "gt": "def url_host(url: str) -> str: from urllib.parse import urlparse res = urlparse(url) return res.netloc.split(':')[0] if res.netloc else ''"}, {"nl_input": "python flatten a nested dictionaary", "code_input": "def flatten_dict(dd, separator='_', prefix=''):    return { prefix + separator + k if prefix else k : v             for kk, vv in v.items()             for k, v in flatten_dict(kk, separator, kk).items()             if isinstance(v, dict) and v             } if isinstance(dd, dict) else { prefix : dd }# Test the functionnested_dict = {'a': {'b': {'c': 1, 'd': 2}, 'e': 3}, 'f': 4}print(flatten_dict(nested_dict))", "url": 5724, "gt": "def flatten_multidict(multidict): return dict([(key, value if len(value) > 1 else value[0]) for (key, value) in multidict.iterlists()])"}, {"nl_input": "python session set get", "code_input": "# Create a sessionsession = {}# Set a key-value pairsession['key'] = 'value'# Get the value associated with the keyvalue = session.get('key')# Print the valueprint(value)", "url": 2346, "gt": "def _session_set(self, key, value): self.session[self._session_key(key)] = value"}, {"nl_input": "python save graph into file", "code_input": "from py2neo import Graph# Connect to the graphg = Graph(\"http://localhost:7474/db/data/\")# Query the graphquery = \"\"\"    CALL db.index.fulltext.queryNodes('myLabel', 'myQuery') YIELD node    RETURN node\"\"\"# Execute the queryresults = g.run(query)# Create a new filewith open('graph.txt', 'w') as f:    # Write the results to the file    for result in results:        f.write(str(result.node))        f.write('\\n')", "url": 3702, "gt": "def to_dotfile(G: nx.DiGraph, filename: str): A = to_agraph(G) A.write(filename)"}, {"nl_input": "chmod python windows to remove file", "code_input": "import osdef change_permissions(file_path, permissions):    try:        os.chmod(file_path, permissions)        print(f\"Permissions changed successfully for {file_path}\")    except Exception as e:        print(f\"An error occurred: {e}\")# Usagechange_permissions('path_to_your_file', 0o755)  # replace 'path_to_your_file' with your file path", "url": 4551, "gt": "def rmfile(path): if osp.isfile(path): if is_win: os.chmod(path, 0o777) os.remove(path)"}, {"nl_input": "add suffixes on concat python", "code_input": "def add_suffixes(prefix, suffixes):    return ''.join([prefix + suffix for suffix in suffixes])# Test the functionprint(add_suffixes(\"Hello, \", [\"World\", \"Problem\", \"Solution\"]))", "url": 2100, "gt": "def add_suffix(fullname, suffix): name, ext = os.path.splitext(fullname) return name + '_' + suffix + ext"}, {"nl_input": "how to check python object iterable", "code_input": "def is_iterable(obj):    try:        iter(obj)    except TypeError:        return False    return True# Test the functionprint(is_iterable([1, 2, 3]))  # Returns: Trueprint(is_iterable('abc'))  # Returns: Trueprint(is_iterable(123))  # Returns: Falseprint(is_iterable(None))  # Returns: False", "url": 1640, "gt": "def is_iterable_but_not_string(obj): return hasattr(obj, '__iter__') and not isinstance(obj, str) and not isinstance(obj, bytes)"}, {"nl_input": "python 3 tkinter open file dialog", "code_input": "import tkinter as tkfrom tkinter import filedialog# Create an instance of Tkroot = tk.Tk()# Open a file dialogfile_path = filedialog.askopenfilename(initialdir=\"/\", title=\"Select file\")# Print the selected file pathprint(\"Selected file path: \", file_path)# Close the Tk instanceroot.destroy()", "url": 3956, "gt": "def askopenfilename(**kwargs): try: from Tkinter import Tk import tkFileDialog as filedialog except ImportError: from tkinter import Tk, filedialog root = Tk() root.withdraw() root.update() filenames = filedialog.askopenfilename(**kwargs) root.destroy() return filenames"}, {"nl_input": "how to indent self python", "code_input": "def indent_string(s, amount):    return '\\n'.join([line.rstrip() + ' ' * amount for line in s.split('\\n')])# Test the functions = \"\"\"This is a test string.It has multiple lines.And some indentation.\"\"\"print(indent_string(s, 4))", "url": 4150, "gt": "def _pad(self): if self._indent: self.whitespace(self._indent * len(self._open_elements))"}, {"nl_input": "tracking centroid of an object python", "code_input": "import cv2# Load the imageimage = cv2.imread('image.jpg')# Convert the image to grayscalegray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)# Threshold the image_, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)# Find contours in the imagecontours, _ = cv2.findContours(thresh, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)# Initialize the centroidcentroid = (0, 0)# If at least one contour was foundif len(contours) > 0:    # Find the largest contour    largest_contour = max(contours, key=cv2.contourArea)   ", "url": 4486, "gt": "def compute_centroid(points): lats = [p[1] for p in points] lons = [p[0] for p in points] return Point(np.mean(lats), np.mean(lons), None)"}, {"nl_input": "python3 ctypes return float array", "code_input": "import ctypes# Define the functionlib = ctypes.cdll.LoadLibrary('libmylibrary.so')lib.myfunction.argtypes = [ctypes.c_int*10]lib.myfunction.restype = ctypes.c_float*10# Create an arrayarray = (ctypes.c_float * 10)()# Call the functionlib.myfunction(array)# Print the arrayfor i in range(10):    print(array[i])", "url": 82, "gt": "def cfloat32_array_to_numpy(cptr, length): if isinstance(cptr, ctypes.POINTER(ctypes.c_float)): return np.fromiter(cptr, dtype=np.float32, count=length) else: raise RuntimeError('Expected float pointer')"}, {"nl_input": "how to make paragraphs in python", "code_input": "def make_paragraphs(text):    paragraphs = text.split('\\n')    return paragraphstext = \"\"\"This is the first paragraph.This is the second paragraph.This is the third paragraph.\"\"\"print(make_paragraphs(text))", "url": 5074, "gt": "def paragraph(separator='\\n\\n', wrap_start='', wrap_end='', html=False, sentences_quantity=3): return paragraphs(quantity=1, separator=separator, wrap_start=wrap_start, wrap_end=wrap_end, html=html, sentences_quantity=sentences_quantity)"}, {"nl_input": "python rest requests delete", "code_input": "import requestsurl = 'http://example.com/api/resource'response = requests.delete(url)print(response.status_code)print(response.text)", "url": 5719, "gt": "def delete(self, endpoint: str, **kwargs) -> dict: return self._request('DELETE', endpoint, **kwargs)"}, {"nl_input": "python replace month number", "code_input": "def replace_month_number(month_number):    months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']    return months[month_number - 1] if 1 <= month_number <= 12 else \"Invalid month number\"# Test the functionprint(replace_month_number(1))  # Output: Januaryprint(replace_month_number(13))  # Output: Invalid month number", "url": 2762, "gt": "def replace_month_abbr_with_num(date_str, lang=DEFAULT_DATE_LANG): num, abbr = get_month_from_date_str(date_str, lang) return re.sub(abbr, str(num), date_str, flags=re.IGNORECASE)"}, {"nl_input": "how to tell what type of data object is in python", "code_input": "def check_type(variable):    return type(variable)# Test the functionprint(check_type(5))  # Output: <class 'int'>print(check_type('Hello, World!'))  # Output: <class 'str'>print(check_type(3.14))  # Output: <class 'float'>print(check_type(True))  # Output: <class 'bool'>print(check_type(None))  # Output: <class 'NoneType'>", "url": 2128, "gt": "def is_integer(obj): if PYTHON3: return isinstance(obj, int) return isinstance(obj, (int, long))"}, {"nl_input": "python jsonschema validate schema file", "code_input": "import jsonimport jsonschemafrom jsonschema import validate# Load the schema filewith open('schema.json') as schema_file:    schema = json.load(schema_file)# Load the data to be validatedwith open('data.json') as data_file:    data = json.load(data_file)# Validate the datatry:    validate(instance=data, schema=schema)    print(\"Data is valid\")except jsonschema.exceptions.ValidationError as err:    print(\"Data is invalid. Error:\", err)", "url": 5004, "gt": "def _validate(data, schema, ac_schema_safe=True, **options): try: jsonschema.validate(data, schema, **options) except (jsonschema.ValidationError, jsonschema.SchemaError, Exception) as exc: if ac_schema_safe: return (False, str(exc)) # Validation was failed. raise return (True, '')"}, {"nl_input": "get wechat access token python", "code_input": "import requestsimport jsonapp_id = 'your_app_id'app_secret = 'your_app_secret'# Get the access tokenurl = f'https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid={app_id}&secret={app_secret}'response = requests.get(url)data = json.loads(response.text)access_token = data['access_token']print(access_token)", "url": 6100, "gt": "def access_token(self): access_token = self.session.get(self.access_token_key) if access_token: if not self.expires_at: # user provided access_token, just return it return access_token timestamp = time.time() if self.expires_at - timestamp > 60: return access_token self.fetch_access_token() return self.session.get(self.access_token_key)"}, {"nl_input": "python change str value to int", "code_input": "def str_to_int(str_value):    return int(str_value)# Test the functionstr_value = \"123\"print(str_to_int(str_value))  # Output: 123", "url": 1831, "gt": "def str2int(num, radix=10, alphabet=BASE85): return NumConv(radix, alphabet).str2int(num)"}, {"nl_input": "implementing drag and drop python", "code_input": "import tkinter as tkfrom tkinter import filedialogdef open_file():    file_path = filedialog.askopenfilename()    print(f\"Selected file: {file_path}\")def save_file():    file_path = filedialog.asksaveasfilename()    print(f\"Saved file: {file_path}\")def drag_start(event):    global last_x, last_y    last_x, last_y = event.x, event.ydef drag_move(event):    global last_x, last_y    x, y = event.x, event.y    dx, dy = x - last_x, y - last_y    event.widget.tkraise()    event.widget.tk_move(dx, dy)    last_x, last_y =", "url": 547, "gt": "def drag_and_drop(self, droppable): self.scroll_to() ActionChains(self.parent.driver).drag_and_drop(self._element, droppable._element).perform()"}, {"nl_input": "get unique list from two lists python", "code_input": "def get_unique_list(list1, list2):    return list(set(list1 + list2))# Test the functionlist1 = [1, 2, 3, 4, 5]list2 = [4, 5, 6, 7, 8]print(get_unique_list(list1, list2))", "url": 351, "gt": "def unique_list(lst): uniq = [] for item in lst: if item not in uniq: uniq.append(item) return uniq"}, {"nl_input": "python 3 not runnning in git bash", "code_input": "import osdef check_python_version():    python_version = os.popen('python --version').read()    if '3' in python_version:        print('Python 3 is installed and running in Git Bash.')    else:        print('Python 3 is not installed or not running in Git Bash.')check_python_version()", "url": 632, "gt": "def check_git(): try: with open(os.devnull, \"wb\") as devnull: subprocess.check_call([\"git\", \"--version\"], stdout=devnull, stderr=devnull) except: raise RuntimeError(\"Please make sure git is installed and on your path.\")"}, {"nl_input": "create unknown number of names to print in python", "code_input": "def create_names(num_names):    names = []    for i in range(num_names):        name = input(\"Enter a name: \")        names.append(name)    return namesnum_names = int(input(\"Enter the number of names to create: \"))names = create_names(num_names)for name in names:    print(name)", "url": 5286, "gt": "def prt_nts(data_nts, prtfmt=None, prt=sys.stdout, nt_fields=None, **kws): prt_txt(prt, data_nts, prtfmt, nt_fields, **kws)"}, {"nl_input": "python json if element exists", "code_input": "import jsondef check_element_exists(json_obj, element):    try:        json_obj[element]        return True    except KeyError:        return False# Test the functionjson_str = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'json_obj = json.loads(json_str)print(check_element_exists(json_obj, 'name'))  # Returns: Trueprint(check_element_exists(json_obj, 'country'))  # Returns: False", "url": 1785, "gt": "def task_property_present_predicate(service, task, prop): try: response = get_service_task(service, task) except Exception as e: pass return (response is not None) and (prop in response)"}, {"nl_input": "number of unique values in list python", "code_input": "def count_unique_values(lst):    return len(set(lst))# Test the functionlst = [1, 2, 2, 3, 4, 4, 5, 6, 6, 7, 8, 8, 9]print(count_unique_values(lst))  # Output: 9", "url": 320, "gt": "def count_list(the_list): count = the_list.count result = [(item, count(item)) for item in set(the_list)] result.sort() return result"}, {"nl_input": "how to randomize items in a list in python", "code_input": "import randomdef randomize_list(input_list):    random.shuffle(input_list)    return input_list# Test the functionmy_list = [1, 2, 3, 4, 5]print(randomize_list(my_list))", "url": 2328, "gt": "def get_randomized_guid_sample(self, item_count): dataset = self.get_whitelist() random.shuffle(dataset) return dataset[:item_count]"}, {"nl_input": "python windows check for keypress", "code_input": "import timeimport pyautoguidef check_for_keypress():    while True:        if pyautogui.press('q'):            print(\"Key 'q' pressed\")        time.sleep(1)if __name__ == \"__main__\":    check_for_keypress()", "url": 5666, "gt": "def _kbhit_unix() -> bool: dr, dw, de = select.select([sys.stdin], [], [], 0) return dr != []"}, {"nl_input": "python bind scrollbar to canvas", "code_input": "import tkinter as tk# Create a new Tk instanceroot = tk.Tk()# Create a new canvascanvas = tk.Canvas(root, width=500, height=500)canvas.pack()# Create a scrollbarscrollbar = tk.Scrollbar(root, orient='vertical', command=canvas.yview)scrollbar.pack(side='right')# Configure the canvas to use the scrollbarcanvas.configure(yscrollcommand=scrollbar.set)# Create some test datafor i in range(100):    canvas.create_text(10, i*20, text=f\"Row {i}\")# Start the Tk event looproot.mainloop()", "url": 2648, "gt": "def set_scrollregion(self, event=None): self.canvas.configure(scrollregion=self.canvas.bbox('all'))"}, {"nl_input": "python setlevel how to only record error", "code_input": "import logging# Set up logging to filelogging.basicConfig(    level=logging.ERROR,    format='%(asctime)s [%(levelname)s] %(message)s',    handlers=[logging.FileHandler('app.log'), logging.StreamHandler()])# Set the logging level to ERRORlogging.getLogger().setLevel(logging.ERROR)try:    # Place where the error might occur    1 / 0except Exception as e:    logging.error(\"Error occurred\", exc_info=True)", "url": 5088, "gt": "def print_fatal_results(results, level=0): print_level(logger.critical, _RED + \"[X] Fatal Error: %s\", level, results.error)"}, {"nl_input": "format string with *args python", "code_input": "def format_string(*args, **kwargs):    return ' '.join(str(arg) for arg in args)# Test the functionprint(format_string('Hello', 'World'))print(format_string('This', 'is', 'a', 'test'))", "url": 338, "gt": "def safe_format(s, **kwargs): return string.Formatter().vformat(s, (), defaultdict(str, **kwargs))"}, {"nl_input": "python get hostip from url", "code_input": "import socketdef get_host_ip(url):    try:        return socket.gethostbyname(url)    except socket.gaierror:        return \"Invalid URL\"# Test the functionprint(get_host_ip(\"www.google.com\"))", "url": 5694, "gt": "def url_host(url: str) -> str: from urllib.parse import urlparse res = urlparse(url) return res.netloc.split(':')[0] if res.netloc else ''"}, {"nl_input": "python numpy masked vailding", "code_input": "import numpy as np# Create a masked arraymask = [True, False, True, False, True]arr = np.array([1, 2, 3, 4, 5])masked_arr = np.ma.array(arr, mask=mask)# Perform operations on the masked arrayresult = masked_arr.mean()print(result)", "url": 4210, "gt": "def asMaskedArray(self): return ma.masked_array(data=self.data, mask=self.mask, fill_value=self.fill_value)"}, {"nl_input": "python child widget close signal", "code_input": "import tkinter as tkdef close_window():    root.destroy()root = tk.Tk()button = tk.Button(root, text=\"Close Window\", command=close_window)button.pack()root.mainloop()", "url": 1949, "gt": "def closeEvent(self, e): self.emit('close_widget') super(DockWidget, self).closeEvent(e)"}, {"nl_input": "python read from csv into numpy array", "code_input": "import numpy as np# Read the CSV file into a numpy arraydata = np.genfromtxt('file.csv', delimiter=',')", "url": 5746, "gt": "def csv_to_numpy(string_like, dtype=None): # type: (str) -> np.array stream = StringIO(string_like) return np.genfromtxt(stream, dtype=dtype, delimiter=',')"}, {"nl_input": "cast string to bytearray python", "code_input": "def string_to_bytearray(input_string):    return bytearray(input_string, 'utf-8')# Test the functioninput_string = \"Hello, World!\"print(string_to_bytearray(input_string))", "url": 5708, "gt": "def to_bytes(data: Any) -> bytearray: # noqa if isinstance(data, int): return bytearray([data]) return bytearray(data, encoding='latin-1')"}, {"nl_input": "load str into python object", "code_input": "# Define a stringstr_obj = \"Hello, World!\"# Load the string into a Python objectpython_obj = str_obj# Print the Python objectprint(python_obj)", "url": 1197, "gt": "def loads(s, model=None, parser=None): with StringIO(s) as f: return load(f, model=model, parser=parser)"}, {"nl_input": "python ldap get all groups a user belongs to", "code_input": "import ldap3# Create an LDAP connectionldap = ldap3.Connection(    host='ldap.example.com',  # replace with your LDAP server host    user='username',  # replace with your LDAP username    password='password',  # replace with your LDAP password    use_ssl=True,)# Bind to the LDAP serverldap.bind()# Search for the user's DN (Distinguished Name)dn = 'uid=user,ou=users,dc=example,dc=com'  # replace with the user's DNentry = ldap.search(dn, ldap.SCOPE_SUBTREE, '(objectClass=groupOfUniqueNames)')# Get the unique group namesgroup_names = [entry[0]", "url": 5009, "gt": "def get_groups(self, username): username = ldap.filter.escape_filter_chars(self._byte_p2(username)) userdn = self._get_user(username, NO_ATTR) searchfilter = self.group_filter_tmpl % { 'userdn': userdn, 'username': username } groups = self._search(searchfilter, NO_ATTR, self.groupdn) ret = [] for entry in groups: ret.append(self._uni(entry[0])) return ret"}, {"nl_input": "python check type if string", "code_input": "def check_type(variable):    if isinstance(variable, str):        return \"The variable is a string\"    else:        return \"The variable is not a string\"# Test the functionprint(check_type(\"Hello, World!\"))  # The variable is a stringprint(check_type(123))  # The variable is not a string", "url": 5589, "gt": "def is_unicode(string): str_type = str(type(string)) if str_type.find('str') > 0 or str_type.find('unicode') > 0: return True return False"}, {"nl_input": "python get current globals", "code_input": "import builtinsdef get_current_globals():    return vars(builtins)print(get_current_globals())", "url": 4156, "gt": "def caller_locals(): import inspect frame = inspect.currentframe() try: return frame.f_back.f_back.f_locals finally: del frame"}, {"nl_input": "get child loggers python", "code_input": "import logging# Create a loggermy_logger = logging.getLogger('my_logger')# Get the list of child loggerschild_loggers = my_logger.getChild()# Print the child loggersfor logger in child_loggers:    print(logger.name)", "url": 1928, "gt": "def _get_loggers(): from .. import loader modules = loader.get_package_modules('logger') return list(loader.get_plugins(modules, [_Logger]))"}, {"nl_input": "how to know if a text file is empty in python", "code_input": "def is_file_empty(file_path):    with open(file_path, 'r') as f:        return not list(f)# Usageprint(is_file_empty('path_to_your_file.txt'))", "url": 5672, "gt": "def _cnx_is_empty(in_file): with open(in_file) as in_handle: for i, line in enumerate(in_handle): if i > 0: return False return True"}, {"nl_input": "python normal distribution p values", "code_input": "import scipy.stats as statsdef calculate_p_value(sample1, sample2, alpha=0.05):    # Calculate the t-statistic    t_statistic, p_value = stats.ttest_ind(sample1, sample2)    # If the p-value is less than the alpha level, we reject the null hypothesis    if p_value < alpha:        return \"Reject the null hypothesis\"    else:        return \"Fail to reject the null hypothesis\"# Example usage:sample1 = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]sample2 = [1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4]print(calculate_p_value(sample1, sample2))", "url": 376, "gt": "def EvalGaussianPdf(x, mu, sigma): return scipy.stats.norm.pdf(x, mu, sigma)"}, {"nl_input": "python ctypes array of arrays", "code_input": "import ctypes# Create an array of 5 arraysarrays = (ctypes.c_int * 5)()# Loop through the arraysfor i in range(5):    # Create an array of 5 integers    arrays[i] = (ctypes.c_int * 5)()    for j in range(5):        # Set the value of the array        arrays[i][j] = j# Print the arrayfor i in range(5):    print(arrays[i])", "url": 5961, "gt": "def GetAllPixelColors(self) -> ctypes.Array: return self.GetPixelColorsOfRect(0, 0, self.Width, self.Height)"}, {"nl_input": "scale 1d array python to between 0 and 1", "code_input": "def scale_array(array):    min_val = min(array)    max_val = max(array)    range_val = max_val - min_val    scaled_array = [(x - min_val) / range_val for x in array]    return scaled_array# Test the functionarray = [1, 2, 3, 4, 5]scaled_array = scale_array(array)print(scaled_array)", "url": 5183, "gt": "def _rescale_array(self, array, scale, zero): if scale != 1.0: sval = numpy.array(scale, dtype=array.dtype) array *= sval if zero != 0.0: zval = numpy.array(zero, dtype=array.dtype) array += zval"}, {"nl_input": "python upper case lower case converter", "code_input": "def convert_case(input_str):    return input_str.upper(), input_str.lower()# Test the functioninput_str = \"Hello, World!\"uppercase, lowercase = convert_case(input_str)print(\"Uppercase: \", uppercase)print(\"Lowercase: \", lowercase)", "url": 878, "gt": "def upcaseTokens(s,l,t): return [ tt.upper() for tt in map(_ustr,t) ]"}, {"nl_input": "ply python expression evaluator", "code_input": "def evaluate_expression(expression):    try:        return eval(expression)    except Exception as e:        return str(e)# Test the functionprint(evaluate_expression(\"2+3*4\"))  # Output: 14print(evaluate_expression(\"3/0\"))  # Output: division by zero", "url": 3942, "gt": "def build(self, **kwargs): self.lexer = ply.lex.lex(object=self, **kwargs)"}, {"nl_input": "python hashlib calc sha1 of file", "code_input": "import hashlibdef calc_sha1_of_file(file_path):    sha1_hash = hashlib.sha1()    with open(file_path, 'rb') as f:        for byte_block in iter(lambda: f.read(4096), b\"\"):            sha1_hash.update(byte_block)    return sha1_hash.hexdigest()# Usagefile_path = '/path/to/your/file'print(calc_sha1_of_file(file_path))", "url": 4951, "gt": "def _get_file_sha1(file): bits = file.read() file.seek(0) h = hashlib.new('sha1', bits).hexdigest() return h"}, {"nl_input": "python pdb no capture std output", "code_input": "import pdbimport sysdef set_breakpoint():    pdb.set_trace()def capture_std_output():    # Set a breakpoint    set_breakpoint()    # Capture the standard output    captured_output = sys.stdout    return captured_output# Test the functioncaptured_output = capture_std_output()print(captured_output)", "url": 900, "gt": "def set_trace(): # https://github.com/nose-devs/nose/blob/master/nose/tools/nontrivial.py pdb.Pdb(stdout=sys.__stdout__).set_trace(sys._getframe().f_back)"}, {"nl_input": "python how to write a factorial", "code_input": "def factorial(n):    if n == 0:        return 1    else:        return n * factorial(n-1)print(factorial(5))", "url": 5904, "gt": "def factorial(n, mod=None): if not (isinstance(n, int) and n >= 0): raise ValueError(\"'n' must be a non-negative integer.\") if mod is not None and not (isinstance(mod, int) and mod > 0): raise ValueError(\"'mod' must be a positive integer\") result = 1 if n == 0: return 1 for i in range(2, n+1): result *= i if mod: result %= mod return result"}, {"nl_input": "python get the last column", "code_input": "def get_last_column(matrix):    return [row[-1] for row in matrix]# Test the functionmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]print(get_last_column(matrix))  # Output: [3, 6, 9]", "url": 587, "gt": "def get_last_row(dbconn, tablename, n=1, uuid=None): return fetch(dbconn, tablename, n, uuid, end=True)"}, {"nl_input": "python how to change file extension", "code_input": "import osdef change_extension(file_name, new_extension):    # Get the file name without the extension    file_name_without_extension = os.path.splitext(file_name)[0]        # Combine the file name without the extension and the new extension    new_file_name = file_name_without_extension + new_extension        # Rename the file    os.rename(file_name, new_file_name)# Test the functionchange_extension('example.txt', '.new')", "url": 1489, "gt": "def lower_ext(abspath): fname, ext = os.path.splitext(abspath) return fname + ext.lower()"}, {"nl_input": "python get process memory info", "code_input": "import psutildef get_process_memory_info():    process = psutil.Process(pid=1)  # replace 1 with the pid of the process you want to get info for    memory_info = process.memory_info()    return memory_infoprint(get_process_memory_info())", "url": 3055, "gt": "def machine_info(): import psutil BYTES_IN_GIG = 1073741824.0 free_bytes = psutil.virtual_memory().total return [{\"memory\": float(\"%.1f\" % (free_bytes / BYTES_IN_GIG)), \"cores\": multiprocessing.cpu_count(), \"name\": socket.gethostname()}]"}, {"nl_input": "check if 2 string are equal python", "code_input": "def check_strings(str1, str2):    if str1 == str2:        return True    else:        return False# Test the functionprint(check_strings(\"Hello\", \"Hello\"))  # Should print: Trueprint(check_strings(\"Hello\", \"World\"))  # Should print: False", "url": 5584, "gt": "def indexes_equal(a: Index, b: Index) -> bool: return str(a) == str(b)"}, {"nl_input": "flask python create one table sqlalchemy", "code_input": "from flask import Flaskfrom flask_sqlalchemy import SQLAlchemyapp = Flask(__name__)app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:////tmp/test.db'db = SQLAlchemy(app)class User(db.Model):    id = db.Column(db.Integer, primary_key=True)    name = db.Column(db.String(50), unique=True, nullable=False)    def __repr__(self):        return '<User %r>' % self.namedb.create_all()", "url": 3549, "gt": "def create_db(app, appbuilder): from flask_appbuilder.models.sqla import Base _appbuilder = import_application(app, appbuilder) engine = _appbuilder.get_session.get_bind(mapper=None, clause=None) Base.metadata.create_all(engine) click.echo(click.style(\"DB objects created\", fg=\"green\"))"}, {"nl_input": "clean output folder in python", "code_input": "import osimport shutildef clean_output_folder():    folder_path = 'output'  # replace with your output folder path    if os.path.exists(folder_path):        shutil.rmtree(folder_path)    os.makedirs(folder_path)clean_output_folder()", "url": 4094, "gt": "def cleanup(): if _output_dir and os.path.exists(_output_dir): log.msg_warn(\"Cleaning up output directory at '{output_dir}' ...\" .format(output_dir=_output_dir)) if not _dry_run: shutil.rmtree(_output_dir)"}, {"nl_input": "python print nodes binary tree", "code_input": "class Node:    def __init__(self, data):        self.left = None        self.right = None        self.data = datadef print_nodes(node):    if node is None:        return    print_nodes(node.left)    print(node.data)    print_nodes(node.right)# Test the functionroot = Node(1)root.left = Node(2)root.right = Node(3)root.left.left = Node(4)root.left.right = Node(5)print_nodes(root)", "url": 5626, "gt": "def debugTreePrint(node,pfx=\"->\"): print pfx,node.item for c in node.children: debugTreePrint(c,\" \"+pfx)"}, {"nl_input": "python query string parsing", "code_input": "from urllib.parse import parse_qs, urlparsedef parse_query_string(query_string):    query_dict = parse_qs(query_string)    return query_dictquery_string = \"name=John&age=30&city=NewYork\"print(parse_query_string(query_string))", "url": 2540, "gt": "def urlencoded(body, charset='ascii', **kwargs): return parse_query_string(text(body, charset=charset), False)"}, {"nl_input": "cycle through a folder of images python", "code_input": "import osdef cycle_through_images(directory):    # Get a list of all the files in the directory    files = os.listdir(directory)    # Filter out any non-image files    images = [file for file in files if file.endswith(\".jpg\") or file.endswith(\".png\")]    # Sort the images by their names    images.sort()    # Cycle through each image    for image in images:        print(image)# Replace 'your_directory' with the path to your directorycycle_through_images('your_directory')", "url": 2248, "gt": "def each_img(dir_path): for fname in os.listdir(dir_path): if fname.endswith('.jpg') or fname.endswith('.png') or fname.endswith('.bmp'): yield fname"}, {"nl_input": "check if a date is valid python", "code_input": "from datetime import datetimedef is_valid_date(date_string):    try:        datetime.strptime(date_string, '%Y-%m-%d')        return True    except ValueError:        return False# Test the functionprint(is_valid_date('2022-01-01'))  # Trueprint(is_valid_date('2022-13-01'))  # False", "url": 5581, "gt": "def valid_date(x: str) -> bool: try: if x != dt.datetime.strptime(x, DATE_FORMAT).strftime(DATE_FORMAT): raise ValueError return True except ValueError: return False"}, {"nl_input": "python spherical bessel functions", "code_input": "import mathdef spherical_bessel_functions(n, x):    if n < 0:        return \"Error: n must be a non-negative integer.\"    elif n == 0:        return math.sqrt(2) * math.sin(x)    elif n == 1:        return math.sqrt(2) * math.cos(x)    else:        return (math.sqrt(2) * math.sin(x) * spherical_bessel_functions(n-1, x)) / n# Test the functionprint(spherical_bessel_functions(0, math.pi/2))  # Output: 1.0print(spherical_bessel_functions(1, math.pi/2))  # Output: 0.0print(spherical_bessel_functions(2, math.pi/2))  # Output: 0.0", "url": 3223, "gt": "def sbessely(x, N): out = np.zeros(N, dtype=np.float64) out[0] = -np.cos(x) / x out[1] = -np.cos(x) / (x ** 2) - np.sin(x) / x for n in xrange(2, N): out[n] = ((2.0 * n - 1.0) / x) * out[n - 1] - out[n - 2] return out"}, {"nl_input": "how to check a file is empty in python", "code_input": "def is_file_empty(filename):    with open(filename, 'r') as f:        return f.read() == ''# Usagefilename = 'your_file.txt'if is_file_empty(filename):    print(f'{filename} is empty')else:    print(f'{filename} is not empty')", "url": 5672, "gt": "def _cnx_is_empty(in_file): with open(in_file) as in_handle: for i, line in enumerate(in_handle): if i > 0: return False return True"}, {"nl_input": "python stop process multiprocessing", "code_input": "import multiprocessingdef worker():    print('Worker process')if __name__ == '__main__':    p = multiprocessing.Process(target=worker)    p.start()    # Stop the process    p.terminate()", "url": 4659, "gt": "def stop(self, timeout=None): self.stopping = True for process in list(self.processes): self.stop_process(process, timeout=timeout)"}, {"nl_input": "python make sure all words are separated by a single space", "code_input": "def separate_by_space(text):    return ' '.join(text.split())text = \"This is a test\"print(separate_by_space(text))", "url": 2339, "gt": "def sanitize_word(s): s = re.sub('[^\\w-]+', '_', s) s = re.sub('__+', '_', s) return s.strip('_')"}, {"nl_input": "making a multidimensional array of only 1 in python", "code_input": "import numpy as np# Create a 2D array of size 5x5 with all elements as 1array_2D = np.ones((5, 5))print(array_2D)", "url": 856, "gt": "def A(*a): return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]"}, {"nl_input": "python initialize variable of an object", "code_input": "# Initialize a variable of an objectclass MyObject:    def __init__(self, name, value):        self.name = name        self.value = value# Create an objectmy_object = MyObject(\"MyObject\", 123)# Print the objectprint(my_object.name)  # Output: MyObjectprint(my_object.value)  # Output: 123", "url": 4075, "gt": "def __init__(self): self.state = self.STATE_INITIALIZING self.state_start = time.time()"}, {"nl_input": "python elasticsearch limit results", "code_input": "from elasticsearch import Elasticsearch# Create a connection to the Elasticsearch serveres = Elasticsearch()# Define the queryquery = {    \"query\": {        \"match_all\": {}    },    \"size\": 10}# Execute the queryresults = es.search(index=\"your_index\", body=query)# Get the resultshits = results['hits']['hits']# Print the resultsfor hit in hits:    print(hit['_source'])", "url": 1953, "gt": "def scan(client, query=None, scroll='5m', raise_on_error=True, preserve_order=False, size=1000, **kwargs): if not preserve_order: kwargs['search_type'] = 'scan' # initial search resp = client.search(body=query, scroll=scroll, size=size, **kwargs) scroll_id = resp.get('_scroll_id') if scroll_id is None: return first_run = True while True: # if we didn't set search_type to scan initial search contains data if preserve_order and first_run: first_run = False else: resp = client.scroll(scroll_id, scroll=scroll) for hit in resp['hits']['hits']: yield hit # check if we have any errrors if resp[\"_shards\"][\"failed\"]: logger.warning( 'Scroll request has failed on %d shards out of %d.', resp['_shards']['failed'], resp['_shards']['total'] ) if raise_on_error: raise ScanError( 'Scroll request has failed on %d shards out of %d.' % (resp['_shards']['failed'], resp['_shards']['total']) ) scroll_id = resp.get('_scroll_id') # end of scroll if scroll_id is None or not resp['hits']['hits']: break"}, {"nl_input": "how to force exit python without raise", "code_input": "import syssys.exit()", "url": 3086, "gt": "def __exit__(self, type, value, traceback): if not self.asarfile: return self.asarfile.close() self.asarfile = None"}, {"nl_input": "python weak reference to bound method", "code_input": "import weakrefclass MyClass:    def __init__(self, name):        self.name = name    def say_hello(self):        print(f\"Hello, my name is {self.name}!\")# Create an instance of MyClassobj = MyClass(\"Alice\")# Create a weak reference to the say_hello methodweak_ref_to_say_hello = weakref.ref(MyClass.say_hello, obj)# Call the weak referenceweak_ref_to_say_hello()# The weak reference still points to the same objectprint(weak_ref_to_say_hello() is obj)# The object is garbage collected, the weak reference is also garbage collecteddel objprint(weak_ref_to_say_hello() is None)", "url": 4389, "gt": "def attr_cache_clear(self): node = extract_node() return BoundMethod(proxy=node, bound=self._instance.parent.scope())"}, {"nl_input": "calling index iterable python", "code_input": "# Define an indexable objectindexable_object = [1, 2, 3, 4, 5]# Iterate over the indexable objectfor i in range(len(indexable_object)):    # Print the index and the corresponding value    print(f\"Index: {i}, Value: {indexable_object[i]}\")", "url": 2047, "gt": "def stop_at(iterable, idx): for i, item in enumerate(iterable): if i == idx: return yield item"}, {"nl_input": "python datetime maybe undefined", "code_input": "import datetimedef get_current_datetime():    current_datetime = datetime.datetime.now()    return current_datetimeprint(get_current_datetime())", "url": 1753, "gt": "def date_to_datetime(x): if not isinstance(x, datetime) and isinstance(x, date): return datetime.combine(x, time()) return x"}, {"nl_input": "python go to next page", "code_input": "from selenium import webdriver# Create a new instance of the Firefox driverdriver = webdriver.Firefox()# Go to the web pagedriver.get(\"http://www.example.com\")# Find the next page button and click itnext_page_button = driver.find_element_by_link_text(\"Next\")next_page_button.click()# Wait for the next page to loadtime.sleep(5)# Close the browserdriver.quit()", "url": 3706, "gt": "def accel_next(self, *args): if self.get_notebook().get_current_page() + 1 == self.get_notebook().get_n_pages(): self.get_notebook().set_current_page(0) else: self.get_notebook().next_page() return True"}, {"nl_input": "filling null value sin data frame in python", "code_input": "import pandas as pd# Assuming df is your DataFramedf = pd.DataFrame({    'A': [1, 2, None, 4],    'B': [5, None, None, 8],    'C': [9, 10, 11, 12]})# Fill null values with 0df = df.fillna(0)print(df)", "url": 889, "gt": "def clean_dataframe(df): df = df.fillna(method='ffill') df = df.fillna(0.0) return df"}, {"nl_input": "python run external command and get output", "code_input": "import subprocessdef run_external_command(command):    process = subprocess.Popen(command, stdout=subprocess.PIPE, shell=True)    output, error = process.communicate()    return output, error# Usagecommand = \"ls\"  # replace with your commandoutput, error = run_external_command(command)print(output)", "url": 114, "gt": "def check_output(args, env=None, sp=subprocess): log.debug('calling %s with env %s', args, env) output = sp.check_output(args=args, env=env) log.debug('output: %r', output) return output"}, {"nl_input": "how to compile python program to use in c++", "code_input": "import osimport platformimport cx_Freeze# Specify the directory where the Python script is locatedbase = Noneif platform.system() == \"Windows\":    base = \"Win32GUI\"# Specify the list of files to include in the distributionincludes = [\"idna\", \"pytz\", \"pycparser\", \"pycodestyle\", \"pyflakes\", \"ipaddress\", \"pkg_resources\", \"setuptools\", \"six\", \"cffi\", \"cffi_backend\", \"cffi_compiler\", \"cffi_embed\", \"cffi_guts\", \"cffi_init\", \"cffi_modules\", \"cffi_ranges\", \"cffi_support\", \"cffi_util\", \"cffi_version\", \"", "url": 801, "gt": "def cpp_prog_builder(build_context, target): yprint(build_context.conf, 'Build CppProg', target) workspace_dir = build_context.get_workspace('CppProg', target.name) build_cpp(build_context, target, target.compiler_config, workspace_dir)"}, {"nl_input": "python img to bytearray", "code_input": "from PIL import Imagedef img_to_bytearray(img_path):    img = Image.open(img_path)    byte_arr = bytearray(img.tobytes())    return byte_arr", "url": 4466, "gt": "def to_bytes(self): chunks = [PNG_SIGN] chunks.extend(c[1] for c in self.chunks) return b\"\".join(chunks)"}, {"nl_input": "how to use access token oauth python", "code_input": "import requests# Your client ID and client secretclient_id = 'your_client_id'client_secret = 'your_client_secret'# The URL to get the access tokenurl = 'https://accounts.google.com/o/oauth2/token'# The data for the requestdata = {    'client_id': client_id,    'client_secret': client_secret,    'grant_type': 'client_credentials'}# Make the requestresponse = requests.post(url, data=data)# Parse the responseresponse_data = response.json()", "url": 2605, "gt": "def fetch_token(self, **kwargs): return super(AsanaOAuth2Session, self).fetch_token(self.token_url, client_secret=self.client_secret, **kwargs)"}, {"nl_input": "have python line continue on to next line", "code_input": "print(\"Hello, World!\")print(\"This is the next line.\")", "url": 34, "gt": "def advance_one_line(self): current_line = self._current_token.line_number while current_line == self._current_token.line_number: self._current_token = ConfigParser.Token(*next(self._token_generator))"}, {"nl_input": "precision of ints in python", "code_input": "import sysdef get_integer_precision():    return sys.maxsizeprint(get_integer_precision())", "url": 60, "gt": "def round_to_int(number, precision): precision = int(precision) rounded = (int(number) + precision / 2) // precision * precision return rounded"}, {"nl_input": "modify the dice roll program to call a function for the die roll s python", "code_input": "import randomdef roll_dice(sides):    return random.randint(1, sides)# Test the functionprint(roll_dice(6))", "url": 3313, "gt": "def roll_dice(): sums = 0 # will return the sum of the roll calls. while True: roll = random.randint(1, 6) sums += roll if(input(\"Enter y or n to continue: \").upper()) == 'N': print(sums) # prints the sum of the roll calls break"}, {"nl_input": "python 'namespace' object is not iterable", "code_input": "import sys# Create a namespacenamespace = {}# Add an object to the namespacenamespace['object'] = 'value'# Try to iterate over the namespacefor key, value in namespace:    print(f'Key: {key}, Value: {value}')", "url": 4431, "gt": "def __add_namespaceinfo(self, ni): self.__ns_uri_map[ni.uri] = ni for prefix in ni.prefixes: self.__prefix_map[prefix] = ni"}, {"nl_input": "how to specify seed for python random", "code_input": "import random# Set the seedrandom.seed(1)# Generate a list of 10 random numbersrandom_list = [random.random() for _ in range(10)]print(random_list)", "url": 1994, "gt": "def generate_seed(seed): if seed is None: random.seed() seed = random.randint(0, sys.maxsize) random.seed(a=seed) return seed"}, {"nl_input": "python use default arg", "code_input": "def greet(name=\"World\"):    print(f\"Hello, {name}!\")# Call the function with a namegreet(\"Alice\")# Call the function without a namegreet()", "url": 1432, "gt": "def arg_default(*args, **kwargs): parser = argparse.ArgumentParser() parser.add_argument(*args, **kwargs) args = vars(parser.parse_args([])) _, default = args.popitem() return default"}, {"nl_input": "python change array dtype to int", "code_input": "import numpy as np# Create a numpy arrayarr = np.array([1.1, 2.2, 3.3, 4.4, 5.5])# Change the data type to integerarr = arr.astype(int)print(arr)", "url": 5736, "gt": "def to_int64(a): # build new dtype and replace i4 --> i8 def promote_i4(typestr): if typestr[1:] == 'i4': typestr = typestr[0]+'i8' return typestr dtype = [(name, promote_i4(typestr)) for name,typestr in a.dtype.descr] return a.astype(dtype)"}, {"nl_input": "python forcible close socket before opening", "code_input": "import socketdef close_socket(sock):    if sock:        sock.close()sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)# Use the socket hereclose_socket(sock)", "url": 4558, "gt": "def close(self): try: self._conn.send((self._CLOSE, None)) self._conn.close() except IOError: # The connection was already closed. pass self._process.join()"}, {"nl_input": "python series'value non zero index", "code_input": "def get_value_at_non_zero_index(series):    for i in range(len(series)):        if series[i] != 0:            return series[i]    return None# Test the functionseries = [1, 2, 3, 4, 0, 6, 7, 8, 9, 0, 10]print(get_value_at_non_zero_index(series))  # Output: 1", "url": 621, "gt": "def reduce_fn(x): values = x.values if pd and isinstance(x, pd.Series) else x for v in values: if not is_nan(v): return v return np.NaN"}, {"nl_input": "how to add a number to certain elements of an array numpy python", "code_input": "import numpy as np# Create a numpy arrayarr = np.array([1, 2, 3, 4, 5])# Create a number to addnum = 10# Use broadcasting to add the number to certain elementsresult = arr + numprint(result)", "url": 4629, "gt": "def _increment(arr, indices): arr = _as_array(arr) indices = _as_array(indices) bbins = np.bincount(indices) arr[:len(bbins)] += bbins return arr"}, {"nl_input": "python unit test and coverage at same time", "code_input": "# my_module.pydef add(a, b):    return a + b", "url": 4778, "gt": "def coverage(ctx, opts=\"\"): return test(ctx, coverage=True, include_slow=True, opts=opts)"}, {"nl_input": "python only list files with specific extension", "code_input": "import osdef list_files_with_extension(directory, extension):    return [f for f in os.listdir(directory) if f.endswith(extension)]# Usageprint(list_files_with_extension('/path/to/directory', '.txt'))", "url": 868, "gt": "def glob_by_extensions(directory, extensions): directorycheck(directory) files = [] xt = files.extend for ex in extensions: xt(glob.glob('{0}/*.{1}'.format(directory, ex))) return files"}, {"nl_input": "python global type hinting", "code_input": "from typing import List, Uniondef get_list_length(lst: List[Union[int, str]]) -> int:    return len(lst)# Test the functionmy_list = [1, 2, 3, 4, 5]print(get_list_length(my_list))  # Output: 5my_list = [1, \"2\", 3, 4, 5]print(get_list_length(my_list))  # Output: 5my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]print(get_list_length(my_list))  # Output: 10", "url": 534, "gt": "def is_builtin_type(tp): return hasattr(__builtins__, tp.__name__) and tp is getattr(__builtins__, tp.__name__)"}, {"nl_input": "how to make a function in python to take the average of list numbers", "code_input": "def average(numbers):    return sum(numbers) / len(numbers)", "url": 2957, "gt": "def calc_list_average(l): total = 0.0 for value in l: total += value return total / len(l)"}, {"nl_input": "check if two arrays are equal python", "code_input": "def check_if_arrays_equal(arr1, arr2):    return arr1 == arr2", "url": 180, "gt": "def numpy_aware_eq(a, b): if isinstance(a, np.ndarray) or isinstance(b, np.ndarray): return np.array_equal(a, b) if ((isinstance(a, Iterable) and isinstance(b, Iterable)) and not isinstance(a, str) and not isinstance(b, str)): if len(a) != len(b): return False return all(numpy_aware_eq(x, y) for x, y in zip(a, b)) return a == b"}, {"nl_input": "python round down numpy", "code_input": "import numpy as npdef round_down(num, decimals=0):    multiplier = 10 ** decimals    return np.floor(num / multiplier) * multiplier# Test the functionnum = 12.3456decimals = 2print(round_down(num, decimals))", "url": 1487, "gt": "def round_array(array_in): if isinstance(array_in, ndarray): return np.round(array_in).astype(int) else: return int(np.round(array_in))"}, {"nl_input": "python pywin32 screenshoot refresh", "code_input": "import pyautogui# Take a screenshotscreenshot = pyautogui.screenshot()# Save the screenshotscreenshot.save('screenshot.png')# Refresh the screenpyautogui.moveTo(0, 0)", "url": 4699, "gt": "def win32_refresh_window(cls): # Get console handle handle = windll.kernel32.GetConsoleWindow() RDW_INVALIDATE = 0x0001 windll.user32.RedrawWindow(handle, None, None, c_uint(RDW_INVALIDATE))"}, {"nl_input": "get largest date from a list python", "code_input": "def get_largest_date(date_list):    return max(date_list)# Test the functiondates = ['2022-01-01', '2022-02-01', '2022-03-01']print(get_largest_date(dates))  # Output: 2022-03-01", "url": 4978, "gt": "def _latest_date(self, query, datetime_field_name): return list( query.aggregate(django.db.models.Max(datetime_field_name)).values() )[0]"}, {"nl_input": "python lock no blocking", "code_input": "import threading# Create a locklock = threading.Lock()# Function to be executed by a threaddef function_to_be_executed():    # Acquire the lock    lock.acquire()    try:        # Critical section        print(\"Critical section\")    finally:        # Release the lock        lock.release()# Create threadsthread1 = threading.Thread(target=function_to_be_executed)thread2 = threading.Thread(target=function_to_be_executed)# Start threadsthread1.start()thread2.start()# Wait for threads to finishthread1.join()thread2.join()", "url": 739, "gt": "def lock(self, block=True): self._locked = True return self._lock.acquire(block)"}, {"nl_input": "delete item from a set python", "code_input": "def delete_item(set, item):    if item in set:        set.remove(item)    else:        print(\"Item not found in the set\")    return set# Test the functionmy_set = {1, 2, 3, 4, 5}print(\"Original set:\", my_set)my_set = delete_item(my_set, 3)print(\"Set after deletion:\", my_set)", "url": 5741, "gt": "def remove_once(gset, elem): remove = getattr(gset, 'remove', None) if remove is not None: remove(elem) else: del gset[elem] return elem"}, {"nl_input": "how to make a sentence into underscores with python", "code_input": "def underscore_sentence(sentence):    return sentence.replace(' ', '_')# Test the functionprint(underscore_sentence(\"Hello World\"))", "url": 358, "gt": "def us2mc(string): return re.sub(r'_([a-z])', lambda m: (m.group(1).upper()), string)"}, {"nl_input": "python timestamp remove timezone", "code_input": "from datetime import datetimeimport pytzdef remove_timezone(timestamp):    # Create a datetime object from the timestamp    dt = datetime.strptime(timestamp, '%Y-%m-%d %H:%M:%S')    # Create a timezone object for UTC    utc_tz = pytz.timezone('UTC')    # Convert the datetime object to UTC    utc_dt = dt.astimezone(utc_tz)    # Return the UTC datetime object    return utc_dt# Test the functiontimestamp = '2022-01-01 12:00:00'print(remove_timezone(timestamp))", "url": 1581, "gt": "def convert_tstamp(response): if response is None: # Allow passing None to convert_tstamp() return response # Overrides the set timezone to UTC - I think... tz = timezone.utc if settings.USE_TZ else None return datetime.datetime.fromtimestamp(response, tz)"}, {"nl_input": "python sanic change all object id to string", "code_input": "from sanic import Sanicfrom mongoengine import *# Connect to MongoDBconnect('your_database_name')# Define your modelclass User(Document):    name = StringField()    email = StringField()    password = StringField()# Create a Sanic appapp = Sanic('my_app')@app.route('/change_all_ids')async def change_all_ids(request):    # Get all users    users = User.objects().all()    # Change all ObjectId fields to string    for user in users:        user.id = str(user.id)        user.save()    return 'All ObjectId fields changed to string'if __name__ == '__main__':    app.run(host='0.0.0.0', port=80", "url": 4302, "gt": "def generate_id(self, obj): object_type = type(obj).__name__.lower() return '{}_{}'.format(object_type, self.get_object_id(obj))"}, {"nl_input": "python mock mark a test as expected failure", "code_input": "def mock_test_failure():    # Simulate a test failure    raise Exception(\"This is a mock test failure\")# Call the functiontry:    mock_test_failure()except Exception as e:    print(\"Test failed:\", e)", "url": 4220, "gt": "def assert_called(_mock_self): self = _mock_self if self.call_count == 0: msg = (\"Expected '%s' to have been called.\" % self._mock_name or 'mock') raise AssertionError(msg)"}, {"nl_input": "python get current users desktop", "code_input": "import psutildef get_current_users_desktop():    # Get all users    users = psutil.users()    # Get the current user's desktop    current_user_desktop = [user for user in users if user.pid == psutil.pid()]    return current_user_desktop[0].desktopprint(get_current_users_desktop())", "url": 4922, "gt": "def get_current_desktop(self): desktop = ctypes.c_long(0) _libxdo.xdo_get_current_desktop(self._xdo, ctypes.byref(desktop)) return desktop.value"}, {"nl_input": "python connect to redis in other docker container", "code_input": "import redisdef connect_to_redis():    r = redis.Redis(host='redis', port=6379, db=0)    r.set('foo', 'bar')    print(r.get('foo'))if __name__ == \"__main__\":    connect_to_redis()", "url": 2168, "gt": "def __connect(): global redis_instance if use_tcp_socket: redis_instance = redis.StrictRedis(host=hostname, port=port) else: redis_instance = redis.StrictRedis(unix_socket_path=unix_socket)"}, {"nl_input": "python subplot second y axis", "code_input": "import matplotlib.pyplot as pltimport numpy as np# Create some datax = np.linspace(0, 2 * np.pi, 100)y1 = np.sin(x)y2 = np.cos(x)# Create the figure and the subplotfig, ax1 = plt.subplots()# Plot the first y-axisax1.plot(x, y1, 'b-')ax1.set_xlabel('x')ax1.set_ylabel('sin(x)', color='b')ax1.tick_params('y', colors='b')# Create the second y-axisax2 = ax1.twinx()ax2.plot(x, y2, 'r-')ax2.set_ylabel('cos(x)', color='r')ax2.tick_", "url": 2426, "gt": "def show_yticklabels(self, row, column): subplot = self.get_subplot_at(row, column) subplot.show_yticklabels()"}, {"nl_input": "python function to detect first element of list", "code_input": "def first_element(lst):    if lst:        return lst[0]    else:        return None", "url": 5545, "gt": "def find_first_in_list(txt: str, str_list: [str]) -> int: # type: ignore start = len(txt) + 1 for item in str_list: if start > txt.find(item) > -1: start = txt.find(item) return start if len(txt) + 1 > start > -1 else -1"}, {"nl_input": "how to flip a matrix in python", "code_input": "def flip_matrix(matrix):    return [row[::-1] for row in matrix]# Test the functionmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]flipped_matrix = flip_matrix(matrix)print(flipped_matrix)", "url": 538, "gt": "def imflip(img, direction='horizontal'): assert direction in ['horizontal', 'vertical'] if direction == 'horizontal': return np.flip(img, axis=1) else: return np.flip(img, axis=0)"}, {"nl_input": "python full name of object from global", "code_input": "def get_global_name():    return globals()print(get_global_name())", "url": 354, "gt": "def _fullname(o): return o.__module__ + \".\" + o.__name__ if o.__module__ else o.__name__"}, {"nl_input": "check if input is an integer or boolean python", "code_input": "def check_input(input):    if isinstance(input, int) or (isinstance(input, bool) and (input == True or input == False)):        return True    else:        return False# Test the functionprint(check_input(10))  # Returns: Trueprint(check_input(True))  # Returns: Trueprint(check_input('10'))  # Returns: Falseprint(check_input(True))  # Returns: Trueprint(check_input(None))  # Returns: False", "url": 5567, "gt": "def is_integer(value: Any) -> bool: return (isinstance(value, int) and not isinstance(value, bool)) or ( isinstance(value, float) and isfinite(value) and int(value) == value )"}, {"nl_input": "storing columns as array python", "code_input": "import numpy as np# Create a 2D numpy arraydata = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])# Access the first columnfirst_column = data[:, 0]# Access the second columnsecond_column = data[:, 1]# Access the third columnthird_column = data[:, 2]print(first_column)print(second_column)print(third_column)", "url": 5209, "gt": "def to_array(self): dt = np.dtype(list(zip(self.labels, (c.dtype for c in self.columns)))) arr = np.empty_like(self.columns[0], dt) for label in self.labels: arr[label] = self[label] return arr"}, {"nl_input": "create column in python by joining columns", "code_input": "import pandas as pd# Assuming df is your DataFrame and column1 and column2 are your existing columnsdf['new_column'] = df['column1'] + df['column2']", "url": 306, "gt": "def join_cols(cols): return \", \".join([i for i in cols]) if isinstance(cols, (list, tuple, set)) else cols"}, {"nl_input": "how to remove blank lines in python file", "code_input": "with open('file.txt', 'r') as file:    lines = file.readlines()with open('file.txt', 'w') as file:    for line in lines:        if line.strip():            file.write(line)", "url": 964, "gt": "def lines(input): for raw_line in input: line = raw_line.strip() if line and not line.startswith('#'): yield strip_comments(line)"}, {"nl_input": "how to know size of queue in python", "code_input": "import queue# Create a new queueq = queue.Queue()# Add elements to the queueq.put(1)q.put(2)q.put(3)# Get the size of the queueprint(len(q))  # Output: 3", "url": 425, "gt": "def qsize(self): self.mutex.acquire() n = self._qsize() self.mutex.release() return n"}, {"nl_input": "python substring index of", "code_input": "def substring_index(main_string, sub_string):    if sub_string in main_string:        return main_string.index(sub_string)    else:        return \"Substring not found in main string\"# Test the functionprint(substring_index(\"Hello, World!\", \"World\"))  # Output: 6print(substring_index(\"Hello, World!\", \"Python\"))  # Output: \"Substring not found in main string\"", "url": 1832, "gt": "def get_substring_idxs(substr, string): return [match.start() for match in re.finditer(substr, string)]"}, {"nl_input": "comparing int to none python", "code_input": "def compare_int_none(int_value):    if int_value is None:        return \"The integer is None\"    elif int_value == 0:        return \"The integer is zero\"    else:        return \"The integer is not None or zero\"# Test the functionprint(compare_int_none(None))  # The integer is Noneprint(compare_int_none(0))  # The integer is zeroprint(compare_int_none(1))  # The integer is not None or zero", "url": 5540, "gt": "def is_natural(x): try: is_integer = int(x) == x except (TypeError, ValueError): return False return is_integer and x >= 0"}, {"nl_input": "json to protobuf python", "code_input": "from json2protobuf import Converterfrom google.protobuf import text_format# Define the JSON datajson_data = \"\"\"{  \"name\": \"John\",  \"age\": 30,  \"email\": \"john@example.com\"}\"\"\"# Convert JSON to Protobufprotobuf_data = Converter.json_to_pb(json_data, \"com.example.User\")# Print the Protobuf dataprint(text_format.Parse(protobuf_data.SerializeToString(), Message()))", "url": 2465, "gt": "def toJson(protoObject, indent=None): # Using the internal method because this way we can reformat the JSON js = json_format.MessageToDict(protoObject, False) return json.dumps(js, indent=indent)"}, {"nl_input": "how to join 2 data frames in python", "code_input": "import pandas as pd# Assuming df1 and df2 are your data framesdf1 = pd.DataFrame({'A': ['A0', 'A1', 'A2', 'A3'],                   'B': ['B0', 'B1', 'B2', 'B3']},                  index=[0, 1, 2, 3])df2 = pd.DataFrame({'C': ['C0', 'C1', 'C2', 'C3'],                   'D': ['D0', 'D1', 'D2', 'D3']},                  index=[0, 1, 2, 3])# Join df1 and df2 on indexjoined_df = pd.merge(df1, df2, how='inner', on='A')print(joined_df)", "url": 793, "gt": "def cross_join(df1, df2): if len(df1) == 0: return df2 if len(df2) == 0: return df1 # Add as lists so that the new index keeps the items in # the order that they are added together all_columns = pd.Index(list(df1.columns) + list(df2.columns)) df1['key'] = 1 df2['key'] = 1 return pd.merge(df1, df2, on='key').loc[:, all_columns]"}, {"nl_input": "how to product of a list in python", "code_input": "def product_of_list(lst):    product = 1    for num in lst:        product *= num    return product# Test the functionlst = [1, 2, 3, 4, 5]print(product_of_list(lst))  # Output: 120", "url": 5599, "gt": "def dotproduct(X, Y): return sum([x * y for x, y in zip(X, Y)])"}, {"nl_input": "get all dates between range datetime python", "code_input": "from datetime import datetime, timedeltadef get_dates(start_date, end_date):    date_generated = start_date    while date_generated <= end_date:        yield date_generated        date_generated += timedelta(days=1)start_date = datetime(2022, 1, 1)end_date = datetime(2022, 1, 31)for date in get_dates(start_date, end_date):    print(date)", "url": 573, "gt": "def dates_in_range(start_date, end_date): return [ start_date + timedelta(n) for n in range(int((end_date - start_date).days)) ]"}, {"nl_input": "python access file on remote", "code_input": "import paramiko# Create a new SSH clientssh = paramiko.SSHClient()# Auto add the server's keyssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())# Connect to the serverssh.connect(hostname='your_server_ip', username='your_username', password='your_password')# Open a SFTP sessionsftp = ssh.open_sftp()# Get the filefile = sftp.get('/path/to/remote/file', '/local/path/to/save/file')# Close the SFTP sessionsftp.close()# Close the SSH connectionssh.close()", "url": 1848, "gt": "def get_remote_content(filepath): with hide('running'): temp = BytesIO() get(filepath, temp) content = temp.getvalue().decode('utf-8') return content.strip()"}, {"nl_input": "how to download txt file from internet in python", "code_input": "import requestsdef download_file(url, local_filename):    # Get the response of the URL    response = requests.get(url)    # Check if the GET request was successful    if response.status_code == 200:        # Open the file in write binary mode        with open(local_filename, 'wb') as f:            f.write(response.content)        return True    else:        print('Failed to download file.')        return False# Replace 'http://example.com/file.txt' with your URLurl = 'http://example.com/file.txt'# Replace 'local_file.txt' with the local path where you want to save the filelocal_filename = 'local_file.txt'download_file(url, local_filename)", "url": 4235, "gt": "def get_dates_link(url): urllib.request.urlretrieve(url, \"temp.txt\") dates = get_dates_file(\"temp.txt\") os.remove(\"temp.txt\") return dates"}, {"nl_input": "stopwords list remove python", "code_input": "def remove_stopwords(words):    stopwords = ['is', 'the', 'and', 'in', 'it', 'an', 'a', 'of', 'on', 'to', 'as', 'by', 'for', 'with', 'he', 'she', 'it', 'this', 'that', 'but', 'if', 'at', 'which', 'from', 'into', 'up', 'out', 'over', 'under', 'again', 'further', 'then', 'once', 'here', 'there', 'when', 'where', 'why', 'how', 'all', 'any', 'both', 'each', 'few', 'more', 'most', 'other', 'some', 'such', 'no', 'nor', 'not', 'only', 'own', 'same', 'so', 'than', 'too', 'very', 's', 't', 'can', 'will', 'just', 'don", "url": 1153, "gt": "def _removeStopwords(text_list): output_list = [] for word in text_list: if word.lower() not in _stopwords: output_list.append(word) return output_list"}, {"nl_input": "limit on open file handles in python", "code_input": "import sysdef limit_file_handles(max_handles):    # Get the current limit    current_limit = sys.getrecursionlimit()    # If the new limit is less than the current limit, set the new limit    if max_handles < current_limit:        sys.setrecursionlimit(max_handles)    else:        print(\"The new limit is greater than the current limit.\")    # Print the new limit    print(\"The new recursion limit is:\", sys.getrecursionlimit())# Test the functionlimit_file_handles(5000)", "url": 2901, "gt": "def _increase_file_handle_limit(): logging.info('Increasing file handle limit to {}'.format(constants.FILE_HANDLE_LIMIT)) resource.setrlimit(resource.RLIMIT_NOFILE, (constants.FILE_HANDLE_LIMIT, resource.RLIM_INFINITY))"}, {"nl_input": "determine the longest sentence in corpus in nlp python ocde", "code_input": "import nltkfrom nltk.corpus import stopwordsfrom nltk.tokenize import sent_tokenize, word_tokenize# Download the stopwordsnltk.download('punkt')nltk.download('stopwords')def longest_sentence(text):    stop_words = set(stopwords.words('english'))    words = word_tokenize(text)    freq_dist = nltk.FreqDist(words)    words = [word for word in words if not word in stop_words]    sentences = sent_tokenize(text)    sentences = [sent for sent in sentences if len(word_tokenize(sent)) > 5]    sentences_with_freq = [(sent, sum(freq_dist[word] for word in word_tokenize(sent))) for sent in sentences]    sentences_with_freq.sort(key=lambda x:", "url": 3106, "gt": "def get_longest_orf(orfs): sorted_orf = sorted(orfs, key=lambda x: len(x['sequence']), reverse=True)[0] return sorted_orf"}, {"nl_input": "python deterministic dictionary printing", "code_input": "def print_dict(d):    for key in sorted(d):        print(f\"{key}: {d[key]}\")# Test the functionprint_dict({\"b\": 2, \"a\": 1, \"c\": 3})", "url": 920, "gt": "def pprint_for_ordereddict(): od_saved = OrderedDict.__repr__ try: OrderedDict.__repr__ = dict.__repr__ yield finally: OrderedDict.__repr__ = od_saved"}, {"nl_input": "remove namespace from xml tag python", "code_input": "import xml.etree.ElementTree as ETdef remove_namespace(xml_str, old_namespace, new_namespace):    # Parse the XML string    root = ET.fromstring(xml_str)    # Iterate over all elements in the XML tree    for elem in root.iter():        # If the element has a namespace and it matches the old namespace,        # replace it with the new namespace        if elem.tag.startswith(old_namespace):            new_tag = elem.tag[len(old_namespace):]            elem.tag = new_tag    # Return the modified XML string    return ET.tostring(root, encoding='unicode')# Test the functionxml_str = '<root xmlns=\"old\"><a xmlns=\"old\">1</a><b xmlns=\"new\">2</b></root>'print(remove_namespace(", "url": 2580, "gt": "def strip_xml_namespace(root): try: root.tag = root.tag.split('}')[1] except IndexError: pass for element in root.getchildren(): strip_xml_namespace(element)"}, {"nl_input": "fill is null with other columns python", "code_input": "import pandas as pd# Assuming df is your DataFramedf = pd.DataFrame({    'A': [1, 2, 3, None, 5],    'B': [4, 5, 6, 7, None],    'C': [8, 9, 10, 11, 12]})# Fill null values with the value in the same rowdf = df.fillna(df)print(df)", "url": 889, "gt": "def clean_dataframe(df): df = df.fillna(method='ffill') df = df.fillna(0.0) return df"}, {"nl_input": "python async input from gui", "code_input": "import asyncioimport tkinter as tkdef get_input():    # Create a new Tk instance    root = tk.Tk()    # Create a new text entry widget    entry = tk.Entry(root)    entry.pack()    # Start the event loop    root.mainloop()    # Return the input    return entry.get()async def main():    # Get the input    input_ = await get_input()    # Print the input    print(input_)# Run the main functionasyncio.run(main())", "url": 975, "gt": "async def async_input(prompt): print(prompt, end='', flush=True) return (await loop.run_in_executor(None, sys.stdin.readline)).rstrip()"}, {"nl_input": "how to identify the index of an element of a set in python", "code_input": "def find_index(set, element):    try:        index = set.index(element)        return index    except ValueError:        return \"Element not in set\"# Test the functionmy_set = {1, 2, 3, 4, 5}print(find_index(my_set, 3))  # Output: 2print(find_index(my_set, 6))  # Output: Element not in set", "url": 1272, "gt": "def find_geom(geom, geoms): for i, g in enumerate(geoms): if g is geom: return i"}, {"nl_input": "python 3 print object string", "code_input": "# Python 3print(\"Object String\")", "url": 1942, "gt": "def _get_pretty_string(obj): sio = StringIO() pprint.pprint(obj, stream=sio) return sio.getvalue()"}, {"nl_input": "python get most recent file containing string", "code_input": "import osimport globdef get_most_recent_file(string):    # Get the current directory    current_dir = os.getcwd()    # Use glob to find all files in the current directory    files = glob.glob(current_dir + '/*')    # Sort the files by modification time in descending order    files.sort(key=os.path.getmtime, reverse=True)    # Loop through the files    for file in files:        # If the file is a regular file and contains the string        if os.path.isfile(file) and string in open(file).read():            # Return the file name            return file    # If no file contains the string, return None    return None# Test the functionprint(get_most_recent_file('your_string'))", "url": 958, "gt": "def newest_file(file_iterable): return max(file_iterable, key=lambda fname: os.path.getmtime(fname))"}, {"nl_input": "python sqlite3 delete doesn't delete records", "code_input": "import sqlite3# Connect to the SQLite databaseconn = sqlite3.connect('my_database.db')# Create a cursor objectcur = conn.cursor()# Define the SQL queryquery = \"DELETE FROM my_table WHERE id = ?\"# Define the values to be used in the queryvalues = (1,)# Execute the querycur.execute(query, values)# Commit the changesconn.commit()# Close the connectionconn.close()", "url": 5107, "gt": "def truncate_table(self, tablename): self.get(tablename).remove() self.db.commit()"}, {"nl_input": "python apply function to iterator", "code_input": "# Define a list of numbersnumbers = [1, 2, 3, 4, 5]# Define a function that takes a number and returns its squaredef square(n):    return n ** 2# Apply the function to each number in the listsquares = map(square, numbers)# Print the squaresfor square in squares:    print(square)", "url": 3963, "gt": "def find_all(self, string, callback): for index, output in self.iter(string): callback(index, output)"}, {"nl_input": "use python next to iterate through", "code_input": "# Define a listmy_list = [1, 2, 3, 4, 5]# Use a for loop to iterate through the listfor i in my_list:    print(i)", "url": 1968, "gt": "def __next__(self, reward, ask_id, lbl): return self.next(reward, ask_id, lbl)"}, {"nl_input": "how to print all the variables in an object python", "code_input": "class MyClass:    def __init__(self, var1, var2):        self.var1 = var1        self.var2 = var2# Create an instance of MyClassobj = MyClass('value1', 'value2')# Print all the variables in the objectprint(vars(obj))", "url": 2570, "gt": "def var_dump(*obs): i = 0 for x in obs: str = var_dump_output(x, 0, ' ', '\\n', True) print (str.strip()) #dump(x, 0, i, '', object) i += 1"}, {"nl_input": "how to determine the index interval for given range of array python", "code_input": "def get_index_interval(array, start, end):    if start > end or start < 0 or end > len(array):        return \"Invalid range\"    else:        return array[start:end+1]", "url": 6063, "gt": "def _infer_interval_breaks(coord): coord = np.asarray(coord) deltas = 0.5 * (coord[1:] - coord[:-1]) first = coord[0] - deltas[0] last = coord[-1] + deltas[-1] return np.r_[[first], coord[:-1] + deltas, [last]]"}, {"nl_input": "python print numpy array with string", "code_input": "import numpy as np# Create a numpy arrayarray = np.array([1, 2, 3, 4, 5])# Convert the numpy array to a stringarray_string = str(array)# Print the stringprint(array_string)", "url": 5651, "gt": "def array2string(arr: numpy.ndarray) -> str: shape = str(arr.shape)[1:-1] if shape.endswith(\",\"): shape = shape[:-1] return numpy.array2string(arr, threshold=11) + \"%s[%s]\" % (arr.dtype, shape)"}, {"nl_input": "python assert value is of type", "code_input": "def assert_type(value, expected_type):    assert isinstance(value, expected_type), f\"Expected type {expected_type}, but got {type(value)}\"", "url": 1519, "gt": "def _assert_is_type(name, value, value_type): if not isinstance(value, value_type): if type(value_type) is tuple: types = ', '.join(t.__name__ for t in value_type) raise ValueError('{0} must be one of ({1})'.format(name, types)) else: raise ValueError('{0} must be {1}' .format(name, value_type.__name__))"}, {"nl_input": "python multiproccessing map with multiple inputs", "code_input": "from multiprocessing import Pooldef multiply(numbers):    return numbers[0] * numbers[1]if __name__ == '__main__':    numbers = [(1, 2), (3, 4), (5, 6)]    with Pool(processes=3) as pool:        result = pool.map(multiply, numbers)    print(result)", "url": 3696, "gt": "def imapchain(*a, **kwa): imap_results = map( *a, **kwa ) return itertools.chain( *imap_results )"}, {"nl_input": "python add suffix to filename", "code_input": "import osdef add_suffix_to_filename(directory, suffix):    # Get a list of all files in the directory    files = os.listdir(directory)    # Add the suffix to each file name    for file in files:        # Get the file extension        file_extension = os.path.splitext(file)[1]        # Get the base name of the file (without the extension)        base_name = os.path.splitext(file)[0]        # Combine the base name and the suffix        new_file_name = base_name + suffix + file_extension        # Rename the file        os.rename(os.path.join(directory, file), os.path.join(directory, new_file_name))# Use the functionadd_suffix_to_filename", "url": 2100, "gt": "def add_suffix(fullname, suffix): name, ext = os.path.splitext(fullname) return name + '_' + suffix + ext"}, {"nl_input": "best way to deal with pagination in python", "code_input": "from sqlalchemy import create_engine, text, Table, MetaData# Create a connection to the databaseengine = create_engine('postgresql://user:password@localhost/dbname')# Define the tablemetadata = MetaData()table = Table('table_name', metadata, autoload_with=engine)# Define the pagination parameterspage_size = 10page_number = 1# Calculate the offsetoffset = (page_number - 1) * page_size# Use a with statement to ensure the connection is closed after the querywith engine.connect() as connection:    # Execute the query    result = connection.execute(text(\"SELECT * FROM table_name ORDER BY id LIMIT :limit OFFSET :offset\"),                                {\"limit\": page_size, \"offset\": offset})    # Fetch the results    rows = result.fetchall()# Process the rows as neededfor row in rows:", "url": 4271, "gt": "def paginate(self, request, offset=0, limit=None): return self.collection.offset(offset).limit(limit), self.collection.count()"}, {"nl_input": "finding factors in python and return list", "code_input": "def find_factors(n):    factors = []    for i in range(1, n + 1):        if n % i == 0:            factors.append(i)    return factors# Test the functionprint(find_factors(12))  # Output: [1, 2, 3, 4, 6, 12]", "url": 6090, "gt": "def factors(n): return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(n ** 0.5) + 1) if n % i == 0)))"}, {"nl_input": "best way to read xml in python", "code_input": "import xml.etree.ElementTree as ETdef read_xml(file_name):    tree = ET.parse(file_name)    root = tree.getroot()    for child in root:        print(child.tag, child.attrib)        for grandchild in child:            print('\\t', grandchild.tag, grandchild.attrib)# Use the functionread_xml('your_file.xml')", "url": 89, "gt": "def xmltreefromfile(filename): try: return ElementTree.parse(filename, ElementTree.XMLParser(collect_ids=False)) except TypeError: return ElementTree.parse(filename, ElementTree.XMLParser())"}, {"nl_input": "how to put a string in a yaml file python", "code_input": "import yaml# Define the stringdata = \"This is a string\"# Write the string to a YAML filewith open('output.yaml', 'w') as file:    yaml.dump(data, file)", "url": 4299, "gt": "def generate_yaml_file(filename, contents): with open(filename, 'w') as file: file.write(yaml.dump(contents, default_flow_style=False))"}, {"nl_input": "python move cursor to secific line", "code_input": "import osdef move_cursor_to_line(file_name, line_number):    os.system(f'echo -e \"\\033[{line_number}f{file_name}\"')# Usagemove_cursor_to_line('your_file.txt', 10)", "url": 814, "gt": "def _go_to_line(editor, line): b = editor.application.current_buffer b.cursor_position = b.document.translate_row_col_to_index(max(0, int(line) - 1), 0)"}, {"nl_input": "token to id python", "code_input": "import requestsimport jsondef get_token_to_id(url):    # Send a GET request to the URL    response = requests.get(url)    # Check if the request was successful    if response.status_code == 200:        # Parse the JSON response        data = response.json()        # Extract the 'token' and 'id' fields        token = data.get('token')        id = data.get('id')        # Return the token and id        return token, id    else:        print(f\"Error: {response.status_code}\")        return None, None# Test the functionurl = 'http://example.com/api'  # replace with your actual URLtoken, id = get_token_to_id(url)if", "url": 6012, "gt": "def strids2ids(tokens: Iterable[str]) -> List[int]: return list(map(int, tokens))"}, {"nl_input": "python urlparse get domain", "code_input": "from urllib.parse import urlparsedef get_domain(url):    parsed_url = urlparse(url)    domain = '{uri.netloc}'.format(uri=parsed_url)    return domain# Test the functionprint(get_domain('http://www.google.com'))", "url": 5798, "gt": "def get_domain(url): parse_result = urlparse(url) domain = \"{schema}://{netloc}\".format( schema=parse_result.scheme, netloc=parse_result.netloc) return domain"}, {"nl_input": "python turn a string into a number", "code_input": "def string_to_number(s):    return int(s) if s.isdigit() else float(s)# Test the functionprint(string_to_number(\"123\"))print(string_to_number(\"123.45\"))", "url": 40, "gt": "def get_number(s, cast=int): import string d = \"\".join(x for x in str(s) if x in string.digits) return cast(d)"}, {"nl_input": "python check if all are type string in a column", "code_input": "def check_string(df):    return df.apply(lambda x: isinstance(x, str)).all()", "url": 5597, "gt": "def is_sqlatype_string(coltype: Union[TypeEngine, VisitableType]) -> bool: coltype = _coltype_to_typeengine(coltype) return isinstance(coltype, sqltypes.String)"}, {"nl_input": "bin means python numpy", "code_input": "import numpy as np# Create a numpy arraya = np.array([1, 2, 3, 4, 5])# Perform a binary operationresult = np.binary_repr(a, width=4)print(result)", "url": 521, "gt": "def val_to_bin(edges, x): ibin = np.digitize(np.array(x, ndmin=1), edges) - 1 return ibin"}, {"nl_input": "python boto3 delete key from s3", "code_input": "import boto3def delete_key_from_s3(bucket_name, key):    s3 = boto3.client('s3')    try:        s3.delete_object(Bucket=bucket_name, Key=key)        print(f\"Key {key} deleted from bucket {bucket_name}\")    except Exception as e:        print(f\"Error occurred: {e}\")# Usagedelete_key_from_s3('your-bucket-name', 'your-key')", "url": 1455, "gt": "def remove_file_from_s3(awsclient, bucket, key): client_s3 = awsclient.get_client('s3') response = client_s3.delete_object(Bucket=bucket, Key=key)"}, {"nl_input": "random walk steps python", "code_input": "import randomdef random_walk(steps):    x, y = 0, 0    for _ in range(steps):        direction = random.choice(['N', 'S', 'E', 'W'])        if direction == 'N':            y += 1        elif direction == 'S':            y -= 1        elif direction == 'E':            x += 1        elif direction == 'W':            x -= 1    return x, y# Test the functionprint(random_walk(10))", "url": 5912, "gt": "def returned(n): ## `takei` yield lazily so we can short-circuit and avoid computing the rest of the walk for pos in randwalk() >> drop(1) >> takei(xrange(n-1)): if pos == Origin: return True return False"}, {"nl_input": "python delete objects inside of objects", "code_input": "import json# Let's assume we have the following JSON objectjson_object = '{\"name\": \"John\", \"age\": 30, \"city\": \"New York\"}'# We can parse the JSON object into a Python dictionarydata = json.loads(json_object)# Now we can delete a specific key-value pair from the dictionarydel data['age']# We can also delete an entire key from the dictionarydel data['city']# Finally, we can convert the dictionary back into a JSON objectnew_json_object = json.dumps(data)print(new_json_object)", "url": 1103, "gt": "def _removeTags(tags, objects): for t in tags: for o in objects: o.tags.remove(t) return True"}, {"nl_input": "truncate seconds from a timestamp in python code", "code_input": "from datetime import datetimedef truncate_seconds(timestamp):    return timestamp.replace(second=0)# Test the functiontimestamp = datetime.now()print(truncate_seconds(timestamp))", "url": 3242, "gt": "def RoundToSeconds(cls, timestamp): leftovers = timestamp % definitions.MICROSECONDS_PER_SECOND scrubbed = timestamp - leftovers rounded = round(float(leftovers) / definitions.MICROSECONDS_PER_SECOND) return int(scrubbed + rounded * definitions.MICROSECONDS_PER_SECOND)"}, {"nl_input": "python json load unorde", "code_input": "import jsondef load_json(file_path):    with open(file_path, 'r') as file:        data = json.load(file)    return data", "url": 1300, "gt": "def read_json(location): location = ensure_path(location) with location.open('r', encoding='utf8') as f: return ujson.load(f)"}, {"nl_input": "python yaml expected single document", "code_input": "import yamldef parse_yaml(file_path):    with open(file_path, 'r') as file:        data = yaml.safe_load(file)    return data", "url": 1355, "gt": "def yaml_to_param(obj, name): return from_pyvalue(u\"yaml:%s\" % name, unicode(yaml.dump(obj)))"}, {"nl_input": "python filter object at", "code_input": "def filter_object_at(obj, index):    if isinstance(obj, list):        try:            return obj[index]        except IndexError:            return None    elif isinstance(obj, tuple):        try:            return obj[index]        except IndexError:            return None    elif isinstance(obj, dict):        try:            return obj[index]        except KeyError:            return None    else:        return None# Test the functionprint(filter_object_at([1, 2, 3, 4, 5], 2))  # Output: 3print(filter_object_at((1, 2, 3, 4, 5), 2))  # Output: 3print(filter_object_at({'a': 1, 'b': 2, 'c': 3}, 'b'))  # Output: 2print(filter_object_at({'a': ", "url": 4102, "gt": "def __init__(self, function): super(filter, self).__init__() self.function = function"}, {"nl_input": "python nonetype object has no attributte", "code_input": "class Nonetype:    pass# Create an instance of the Nonetype classnonetype_object = Nonetype()# Attempt to access an attribute of the nonetype objecttry:    print(nonetype_object.attribute)except AttributeError:    print(\"The nonetype object has no attribute named 'attribute'\")", "url": 94, "gt": "def listlike(obj): return hasattr(obj, \"__iter__\") \\ and not issubclass(type(obj), str)\\ and not issubclass(type(obj), unicode)"}, {"nl_input": "python tkinter how to create scrollable canvas", "code_input": "import tkinter as tkfrom tkinter import ttkdef create_scrollable_canvas():    root = tk.Tk()    root.geometry(\"400x400\")    # Create a canvas    canvas = tk.Canvas(root, width=400, height=400)    canvas.pack(side=\"top\", fill=\"both\", expand=True)    # Create a scrollbar    scrollbar = ttk.Scrollbar(root, orient=\"vertical\", command=canvas.yview)    scrollbar.pack(side=\"right\", fill=\"y\")    # Configure the canvas to use the scrollbar    canvas.configure(yscrollcommand=scrollbar.set)    # Create a frame inside the canvas    frame = tk.Frame(canvas, width=400, height=400)    frame.pack(side=\"top\", fill=\"both\",", "url": 1083, "gt": "def _set_scroll_v(self, *args): self._canvas_categories.yview(*args) self._canvas_scroll.yview(*args)"}, {"nl_input": "geojson to topojson python", "code_input": "import geojsonimport topojson# Load GeoJSON datawith open('data.geojson', 'r') as f:    geojson_data = geojson.load(f)# Convert GeoJSON to TopoJSONtopojson_data = topojson.feature(geojson_data, [])# Write TopoJSON data to a filewith open('data.topojson', 'w') as f:    f.write(topojson_data)", "url": 4600, "gt": "def to_topojson(self): topojson = self.topojson topojson[\"objects\"][\"points\"] = { \"type\": \"GeometryCollection\", \"geometries\": [point.to_topojson() for point in self.points.all()], } return json.dumps(topojson)"}, {"nl_input": "python get png image dimensions", "code_input": "from PIL import Imagedef get_image_dimensions(image_path):    with Image.open(image_path) as img:        return img.size# Test the functionprint(get_image_dimensions('path_to_your_image.png'))", "url": 5568, "gt": "def getDimensionForImage(filename, maxsize): try: from PIL import Image except ImportError: return None img = Image.open(filename) width, height = img.size if width > maxsize[0] or height > maxsize[1]: img.thumbnail(maxsize) out.info(\"Downscaled display size from %s to %s\" % ((width, height), img.size)) return img.size"}, {"nl_input": "python flask separate functions get and post", "code_input": "from flask import Flask, request, jsonifyapp = Flask(__name__)@app.route('/', methods=['GET'])def get_data():    # Get data from the request    data = request.get_json()    # Return the data    return jsonify(data)@app.route('/', methods=['POST'])def post_data():    # Get data from the request    data = request.get_json()    # Return the data    return jsonify(data)if __name__ == '__main__':    app.run(debug=True)", "url": 310, "gt": "def handleFlaskPostRequest(flaskRequest, endpoint): if flaskRequest.method == \"POST\": return handleHttpPost(flaskRequest, endpoint) elif flaskRequest.method == \"OPTIONS\": return handleHttpOptions() else: raise exceptions.MethodNotAllowedException()"}, {"nl_input": "return year from date python", "code_input": "from datetime import datetimedef extract_year(date):    return date.year# Test the functiondate = datetime.now()print(extract_year(date))", "url": 5670, "gt": "def year(date): try: fmt = '%m/%d/%Y' return datetime.strptime(date, fmt).timetuple().tm_year except ValueError: return 0"}, {"nl_input": "how to get all modes python", "code_input": "from collections import Counterdef get_modes(lst):    count = Counter(lst)    max_count = max(list(count.values()))    modes = [num for num, freq in count.items() if freq == max_count]    return modes# Test the functionlst = [1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5]print(get_modes(lst))", "url": 5046, "gt": "def __iter__(self): return iter([v for k, v in sorted(self._modes.items())])"}, {"nl_input": "integer and returns a random bitstring of size python", "code_input": "import randomdef generate_random_bitstring(length):    return ''.join(str(random.randint(0, 1)) for _ in range(length))print(generate_random_bitstring(10))", "url": 5717, "gt": "def binary(length): num = randint(1, 999999) mask = '0' * length return (mask + ''.join([str(num >> i & 1) for i in range(7, -1, -1)]))[-length:]"}, {"nl_input": "how to get the encoding of a file python", "code_input": "import codecsdef get_encoding(file_path):    with codecs.open(file_path, 'r', encoding='utf-8') as f:        encoding = f.encoding    return encoding# Usageprint(get_encoding('path_to_your_file'))", "url": 4685, "gt": "def smartread(path): with open(path, \"rb\") as f: content = f.read() result = chardet.detect(content) return content.decode(result[\"encoding\"])"}, {"nl_input": "python connect to aws rds", "code_input": "import boto3def connect_to_rds():    rds = boto3.client('rds')    response = rds.describe_db_instances()    for db_instance in response['DBInstances']:        if db_instance['DBInstanceStatus'] == 'available':            print(f\"Connected to {db_instance['DBInstanceIdentifier']}\")connect_to_rds()", "url": 5229, "gt": "def connect_rds(aws_access_key_id=None, aws_secret_access_key=None, **kwargs): from boto.rds import RDSConnection return RDSConnection(aws_access_key_id, aws_secret_access_key, **kwargs)"}, {"nl_input": "python cv2 check if image is empty", "code_input": "import cv2def is_image_empty(image_path):    # Read the image    image = cv2.imread(image_path)    # If the image is empty, the size of the image will be (0, 0)    if image.size == 0:        return True    else:        return False# Test the functionprint(is_image_empty('path_to_your_image.jpg'))", "url": 2948, "gt": "def is_empty(self): if(((self.channels == []) and (not self.shape == (0, 0))) or ((not self.channels == []) and (self.shape == (0, 0)))): raise RuntimeError(\"Channels-shape mismatch.\") return self.channels == [] and self.shape == (0, 0)"}, {"nl_input": "how to hide a window using a button in python", "code_input": "import tkinter as tkdef hide_window():    window.pack_forget()root = tk.Tk()button = tk.Button(root, text=\"Hide Window\", command=hide_window)button.pack()window = tk.Toplevel()window.title(\"Hidden Window\")window.mainloop()", "url": 3119, "gt": "def hide(self): if not HidePrevention(self.window).may_hide(): return self.hidden = True self.get_widget('window-root').unstick() self.window.hide()"}, {"nl_input": "python marshmallow validation schema from parent", "code_input": "from marshmallow import Schema, fieldsclass BaseSchema(Schema):    id = fields.Integer()    name = fields.String()", "url": 4707, "gt": "def validate(schema, data, owner=None): schema._validate(data=data, owner=owner)"}, {"nl_input": "fillna with string for specific columnin python", "code_input": "import pandas as pd# Assuming df is your DataFrame and 'column_name' is the name of the column you want to filldf['column_name'] = df['column_name'].fillna('your_string')", "url": 1462, "gt": "def stringify_col(df, col_name): df = df.copy() df[col_name] = df[col_name].fillna(\"\") df[col_name] = df[col_name].astype(str) return df"}, {"nl_input": "how to separate list elements by white space python", "code_input": "def separate_by_space(lst):    return ' '.join(lst)# Test the functionlst = ['Hello', 'World', 'This', 'is', 'a', 'test']print(separate_by_space(lst))", "url": 1146, "gt": "def split_strings_in_list_retain_spaces(orig_list): temp_list = list() for line in orig_list: line_split = __re.split(r'(\\s+)', line) temp_list.append(line_split) return temp_list"}, {"nl_input": "how to default value in python", "code_input": "def get_value(val=None):    if val is None:        val = \"Default Value\"    return valprint(get_value())  # Output: Default Valueprint(get_value(\"Custom Value\"))  # Output: Custom Value", "url": 2494, "gt": "def safe_int(val, default=None): try: val = int(val) except (ValueError, TypeError): val = default return val"}, {"nl_input": "python dict keys lowercase", "code_input": "def lowercase_keys(d):    return {k.lower(): v for k, v in d.items()}# Test the functiond = {'Key1': 'value1', 'Key2': 'value2', 'Key3': 'value3'}print(lowercase_keys(d))", "url": 173, "gt": "def keys_to_snake_case(camel_case_dict): return dict((to_snake_case(key), value) for (key, value) in camel_case_dict.items())"}, {"nl_input": "python get index of list values that equal", "code_input": "def get_index(lst, val):    try:        return lst.index(val)    except ValueError:        return \"Value not in list\"# Test the functionlst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]print(get_index(lst, 5))  # Output: 4print(get_index(lst, 15))  # Output: \"Value not in list\"", "url": 480, "gt": "def equal(list1, list2): return [item1 == item2 for item1, item2 in broadcast_zip(list1, list2)]"}, {"nl_input": "python requests logging not work", "code_input": "import loggingimport requests# Set up logginglogging.basicConfig(filename='app.log', level=logging.INFO)def make_request(url):    try:        response = requests.get(url)        logging.info(f'Request made to {url}')        return response.json()    except requests.exceptions.RequestException as e:        logging.error(f'Error making request to {url}: {str(e)}')# Usagemake_request('http://example.com')", "url": 2496, "gt": "def process_request(self, request, response): self.logger.info('Requested: {0} {1} {2}'.format(request.method, request.relative_uri, request.content_type))"}, {"nl_input": "python static files flask", "code_input": "from flask import Flask, send_from_directoryapp = Flask(__name__)@app.route('/')def home():    return app.send_static_file('index.html')if __name__ == '__main__':    app.run(debug=True)", "url": 2404, "gt": "def glr_path_static(): return os.path.abspath(os.path.join(os.path.dirname(__file__), '_static'))"}, {"nl_input": "rest json schema validation python", "code_input": "import jsonfrom jsonschema import validate# Define the JSON schemaschema = {    \"type\": \"object\",    \"properties\": {        \"name\": {\"type\": \"string\"},        \"age\": {\"type\": \"number\"},    },    \"required\": [\"name\", \"age\"]}# Define the JSON object to validatedata = {    \"name\": \"John\",    \"age\": 30}# Validate the JSON objecttry:    validate(instance=data, schema=schema)    print(\"The JSON object is valid.\")except jsonschema.exceptions.ValidationError as err:    print(\"The JSON object is not valid. Error:\", err)", "url": 6156, "gt": "def validate(request: Union[Dict, List], schema: dict) -> Union[Dict, List]: jsonschema_validate(request, schema) return request"}, {"nl_input": "write in bold and read in color of the print mesaage in python", "code_input": "print(\"\\033[1mHello, World!\\033[0m\")", "url": 362, "gt": "def good(txt): print(\"%s# %s%s%s\" % (PR_GOOD_CC, get_time_stamp(), txt, PR_NC)) sys.stdout.flush()"}, {"nl_input": "python type cast to bigint", "code_input": "def type_cast_to_bigint(input_str):    return int(input_str)# Test the functionprint(type_cast_to_bigint(\"1234567890\"))", "url": 1205, "gt": "def _from_bytes(bytes, byteorder=\"big\", signed=False): return int.from_bytes(bytes, byteorder=byteorder, signed=signed)"}, {"nl_input": "converts matrix to pictures by python", "code_input": "import matplotlib.pyplot as pltimport numpy as np# Create a 2D numpy arraymatrix = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])# Plot the matrixplt.imshow(matrix, cmap='hot', interpolation='nearest')plt.show()", "url": 1120, "gt": "def im2mat(I): return I.reshape((I.shape[0] * I.shape[1], I.shape[2]))"}, {"nl_input": "python random selection from function", "code_input": "import randomdef random_selection(lst):    return random.choice(lst)# Test the functionlst = [1, 2, 3, 4, 5]print(random_selection(lst))", "url": 1398, "gt": "def sometimesish(fn): def wrapped(*args, **kwargs): if random.randint(1, 2) == 1: return fn(*args, **kwargs) return wrapped"}, {"nl_input": "python keep processpool open until tasks complete", "code_input": "import concurrent.futuresdef process_task(task):    # Your task logic here    passwith concurrent.futures.ProcessPoolExecutor() as executor:    executor.map(process_task, range(10))  # Replace with your tasks", "url": 5005, "gt": "def wait(self, timeout=None): if not self.__running: raise RuntimeError(\"ThreadPool ain't running\") self.__queue.wait(timeout)"}, {"nl_input": "running a def a specified amount of time python 3", "code_input": "import timedef delay_execution(seconds):    time.sleep(seconds)# Call the function with the desired delaydelay_execution(5)", "url": 2450, "gt": "def seconds(num): now = pytime.time() end = now + num until(end)"}, {"nl_input": "python str to dateal time", "code_input": "from datetime import datetimedef str_to_datetime(s):    return datetime.strptime(s, '%Y-%m-%d %H:%M:%S')# Test the functions = '2022-01-01 12:00:00'print(str_to_datetime(s))", "url": 5606, "gt": "def str_to_time(time_str: str) -> datetime.datetime: pieces: Any = [int(piece) for piece in time_str.split('-')] return datetime.datetime(*pieces)"}, {"nl_input": "python check if file is executable", "code_input": "import osdef is_executable(file_path):    if os.path.isfile(file_path):        return os.access(file_path, os.X_OK)    else:        return False", "url": 2939, "gt": "def is_executable(path): return os.path.isfile(path) and os.access(path, os.X_OK)"}, {"nl_input": "python how to check the queue lenght", "code_input": "def check_queue_length(queue):    return len(queue)# Test the functionimport queuemy_queue = queue.Queue()my_queue.put('a')my_queue.put('b')my_queue.put('c')print(check_queue_length(my_queue))  # Output: 3", "url": 5555, "gt": "def full(self): return self.maxsize and len(self.list) >= self.maxsize or False"}, {"nl_input": "query server objects ldap in python", "code_input": "import ldap3# Create a connection to the LDAP serverconnection = ldap3.Connection(    \"ldap.example.com\",  # LDAP server address    389,  # LDAP server port    \"username\",  # LDAP server username    \"password\",  # LDAP server password    # use_ssl=True,  # use SSL/TLS for secure connection    # start_tls=True,  # use TLS for secure connection)# Bind to the LDAP serverconnection.bind()# Search for all objectssearch = connection.search(    \"dc=example,dc=com\", ", "url": 5470, "gt": "def search(self, filterstr, attrlist): return self._paged_search_ext_s(self.settings.BASE, ldap.SCOPE_SUBTREE, filterstr=filterstr, attrlist=attrlist, page_size=self.settings.PAGE_SIZE)"}, {"nl_input": "python docx document section different page", "code_input": "from docx import Document# Create a new documentdoc = Document()# Add a section to the documentdoc.add_heading('Section', level=1)# Add a paragraph to the sectiondoc.add_paragraph('This is an example of a paragraph.')# Add a section to the documentdoc.add_heading('Section', level=1)# Add a paragraph to the sectiondoc.add_paragraph('This is another example of a paragraph.')# Save the documentdoc.save('document.docx')", "url": 1938, "gt": "def fill_document(doc): with doc.create(Section('A section')): doc.append('Some regular text and some ') doc.append(italic('italic text. ')) with doc.create(Subsection('A subsection')): doc.append('Also some crazy characters: $&#{}')"}, {"nl_input": "write a json object to file python", "code_input": "import json# Define the JSON objectdata = {    \"name\": \"John\",    \"age\": 30,    \"city\": \"New York\"}# Write the JSON object to a filewith open('data.json', 'w') as f:    json.dump(data, f)", "url": 1198, "gt": "def _serialize_json(obj, fp): json.dump(obj, fp, indent=4, default=serialize)"}, {"nl_input": "how to compute the minimum value of a tensor in python", "code_input": "import numpy as np# Create a tensortensor = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])# Compute the minimum valuemin_value = np.min(tensor)print(min_value)", "url": 5578, "gt": "def last_location_of_minimum(x): x = np.asarray(x) return 1.0 - np.argmin(x[::-1]) / len(x) if len(x) > 0 else np.NaN"}, {"nl_input": "python unittest how to assert 2 lists are almost equal", "code_input": "import unittestimport numpy as npclass TestLists(unittest.TestCase):    def test_almost_equal(self):        list1 = [1, 2, 3, 4, 5]        list2 = [1, 2, 3, 4, 5]        self.assertTrue(np.array_equal(list1, list2))        list1 = [1, 2, 3, 4, 5]        list2 = [1, 2, 3, 4, 6]        self.assertFalse(np.array_equal(list1, list2))        list1 = [1, 2, 3, 4, 5]        list2 = [1, 2, 3, 4, 5, 6]        self.assertFalse(np.array_equal(list1, list2))if __name__ == '__", "url": 2621, "gt": "def expect_all(a, b): assert all(_a == _b for _a, _b in zip_longest(a, b))"}, {"nl_input": "how to check if 2 inputs are equal in python assert equal", "code_input": "def check_equal(input1, input2):    assert input1 == input2, \"The inputs are not equal\"    print(\"The inputs are equal\")# Test the functioncheck_equal(10, 10)check_equal(10, 20)", "url": 2621, "gt": "def expect_all(a, b): assert all(_a == _b for _a, _b in zip_longest(a, b))"}, {"nl_input": "python loop through proxies request", "code_input": "import requests# List of proxiesproxies_list = [\"http://proxy1.com:port1\", \"http://proxy2.com:port2\", \"http://proxy3.com:port3\"]# Loop through the proxiesfor proxy in proxies_list:    try:        # Make a request to a website        response = requests.get('http://example.com', proxies={'http': proxy})        # Check if the request was successful        if response.status_code == 200:            print(f'Successfully connected to the website using proxy {proxy}')        else:            print(f'Failed to connect to the website using proxy {proxy}')    except requests.exceptions.Request", "url": 934, "gt": "def load(self): self._list = self._source.load() self._list_iter = itertools.cycle(self._list)"}, {"nl_input": "python loess with gaussian kernel", "code_input": "from scipy.stats import loessimport numpy as np# Let's create a simple datasetx = np.linspace(0, 10, 100)y = np.sin(x) + np.random.normal(0, 0.5, len(x))# Fit a Loess model to the datamodel = loess(y, x)# Now we can use the model to predict the values of y for a new set of xx_new = np.linspace(0, 10, 20)y_new = model.predict(x_new)# Print the new values of yprint(y_new)", "url": 741, "gt": "def lognorm(x, mu, sigma=1.0): return stats.lognorm(sigma, scale=mu).pdf(x)"}, {"nl_input": "greatest common divisor function in python", "code_input": "def gcd(a, b):    while b != 0:        a, b = b, a % b    return a", "url": 5816, "gt": "def gcd_float(numbers, tol=1e-8): def pair_gcd_tol(a, b): \"\"\"Calculate the Greatest Common Divisor of a and b. Unless b==0, the result will have the same sign as b (so that when b is divided by it, the result comes out positive). \"\"\" while b > tol: a, b = b, a % b return a n = numbers[0] for i in numbers: n = pair_gcd_tol(n, i) return n"}, {"nl_input": "how to clear up memory python", "code_input": "import gcdef clear_memory():    gc.collect()    print(\"Memory cleared\")# Call the functionclear_memory()", "url": 254, "gt": "def Flush(self): while self._age: node = self._age.PopLeft() self.KillObject(node.data) self._hash = dict()"}, {"nl_input": "get eucliedan distance between two vectors python", "code_input": "import mathdef euclidean_distance(vector1, vector2):    if len(vector1) != len(vector2):        raise ValueError(\"Vectors must have the same dimension\")    return math.sqrt(sum((x - y) ** 2 for x, y in zip(vector1, vector2)))", "url": 466, "gt": "def vector_distance(a, b): a = np.array(a) b = np.array(b) return np.linalg.norm(a - b)"}, {"nl_input": "python interactive shell color", "code_input": "import osdef change_color(color):    color_codes = {        'black': '0',        'red': '1',        'green': '2',        'yellow': '3',        'blue': '4',        'magenta': '5',        'cyan': '6',        'white': '7'    }    if color in color_codes:        os.system('color ' + color_codes[color])    else:        print(\"Invalid color. Available colors: black, red, green, yellow, blue, magenta, cyan, white\")# Test the functionchange_color('red')", "url": 1007, "gt": "def auto(): try: Style.enabled = False Style.enabled = sys.stdout.isatty() except (AttributeError, TypeError): pass"}, {"nl_input": "passing a range of values python years", "code_input": "def check_years(years):    if isinstance(years, range):        for year in years:            if year < 1500 or year > 2020:                return False        return True    else:        return False# Test the functionyears = range(1990, 2000)print(check_years(years))  # This should print: Trueyears = range(1500, 2021)print(check_years(years))  # This should print: False", "url": 3206, "gt": "def from_years_range(start_year, end_year): start = datetime.date(start_year, 1 , 1) end = datetime.date(end_year, 12 , 31) return DateRange(start, end)"}, {"nl_input": "python yaml for each key value", "code_input": "import yamldef parse_yaml(file):    with open(file, 'r') as stream:        try:            data = yaml.safe_load(stream)            for key, value in data.items():                print(f'Key: {key}, Value: {value}')        except yaml.YAMLError as exc:            print(exc)# Replace 'your_file.yaml' with your actual YAML file pathparse_yaml('your_file.yaml')", "url": 1351, "gt": "def safe_dump(data, stream=None, **kwds): return yaml.dump(data, stream=stream, Dumper=ODYD, **kwds)"}, {"nl_input": "python test if value is ctypes array", "code_input": "import ctypesdef is_ctypes_array(value):    if isinstance(value, ctypes.Array):        return True    else:        return False# Test the functionprint(is_ctypes_array(ctypes.Array(ctypes.c_int, 5)))  # Returns: Trueprint(is_ctypes_array(123))  # Returns: False", "url": 5116, "gt": "def is_array(type_): nake_type = remove_alias(type_) nake_type = remove_reference(nake_type) nake_type = remove_cv(nake_type) return isinstance(nake_type, cpptypes.array_t)"}, {"nl_input": "function return apply async python", "code_input": "async def apply_async(n):    return await n**2", "url": 4964, "gt": "def apply(self, func, args=(), kwds=dict()): return self.apply_async(func, args, kwds).get()"}, {"nl_input": "reload device program code in python", "code_input": "def reload_device_program(device, language):    if device.is_connected():        if language == 'Python':            device.reload_program()        else:            print(\"Unsupported language. Only Python is supported.\")    else:        print(\"Device is not connected.\")# Usagereload_device_program(my_device, 'Python')", "url": 4804, "gt": "def reload(self, save_config=True): if save_config: self.device.send(\"copy running-config startup-config\") self.device(\"reload\", wait_for_string=\"This command will reboot the system\") self.device.ctrl.sendline(\"y\")"}, {"nl_input": "split string into n parts python", "code_input": "def split_string(string, n):    return [string[i:i+n] for i in range(0, len(string), n)]# Test the functionstring = \"Hello, world!\"n = 3print(split_string(string, n))", "url": 424, "gt": "def _split_str(s, n): length = len(s) return [s[i:i + n] for i in range(0, length, n)]"}, {"nl_input": "python get object as dict", "code_input": "class MyObject:    def __init__(self, name, age):        self.name = name        self.age = age# Create an objectobj = MyObject(\"John\", 25)# Get the object as a dictionaryobj_dict = obj.__dict__print(obj_dict)", "url": 650, "gt": "def conv_dict(self): return dict(integer=self.integer, real=self.real, no_type=self.no_type)"}, {"nl_input": "selecting a range of 2d elements from a numpy array gives empty array in python 3", "code_input": "import numpy as np# Create a 2D numpy arrayarr = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])# Select a range of 2D elementsselected_elements = arr[0:2, 1:3]print(selected_elements)", "url": 5815, "gt": "def to_0d_array(value: Any) -> np.ndarray: if np.isscalar(value) or (isinstance(value, np.ndarray) and value.ndim == 0): return np.array(value) else: return to_0d_object_array(value)"}, {"nl_input": "python read tokens from line", "code_input": "def read_tokens(line):    return line.split()# Test the functionline = \"This is a test line\"print(read_tokens(line))", "url": 6106, "gt": "def get_tokens(line: str) -> Iterator[str]: for token in line.rstrip().split(): if len(token) > 0: yield token"}, {"nl_input": "write data into fits file python", "code_input": "import astropy.tableimport astropy.io.fits# Create a table of datatable = astropy.table.Table([[1, 2, 3], [4, 5, 6]], names=('col1', 'col2', 'col3'))# Write the table to a FITS fileastropy.io.fits.writeto('output.fits', table, clobber=True)", "url": 1138, "gt": "def write_fits(self, fitsfile): tab = self.create_table() hdu_data = fits.table_to_hdu(tab) hdus = [fits.PrimaryHDU(), hdu_data] fits_utils.write_hdus(hdus, fitsfile)"}, {"nl_input": "python print string with visible ansi codes", "code_input": "print(\"\\033[1;31mHello, World!\\033[0m\")", "url": 2234, "gt": "def ansi(color, text): code = COLOR_CODES[color] return '\\033[1;{0}m{1}{2}'.format(code, text, RESET_TERM)"}, {"nl_input": "python check if value in enum", "code_input": "def is_in_enum(value, enum):    return value in enum# Test the functionprint(is_in_enum('a', ('a', 'b', 'c')))  # Returns: Trueprint(is_in_enum('d', ('a', 'b', 'c')))  # Returns: False", "url": 5812, "gt": "def has_value(cls, value: int) -> bool: return any(value == item.value for item in cls)"}, {"nl_input": "python sqlite table names in database", "code_input": "import sqlite3def get_table_names(db_path):    conn = sqlite3.connect(db_path)    cursor = conn.cursor()    cursor.execute(\"SELECT name FROM sqlite_master WHERE type='table';\")    table_names = cursor.fetchall()    return [name[0] for name in table_names]# Usagetable_names = get_table_names('my_database.db')print(table_names)", "url": 716, "gt": "def get_table_names(connection): cursor = connection.cursor() cursor.execute(\"SELECT name FROM sqlite_master WHERE type == 'table'\") return [name for (name,) in cursor]"}, {"nl_input": "how to remove all element from a python dictionary", "code_input": "# Create a dictionarydict = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}# Use the clear() method to remove all elementsdict.clear()# Print the dictionary to check if it's emptyprint(dict)", "url": 5748, "gt": "def clean_map(obj: Mapping[Any, Any]) -> Mapping[Any, Any]: return {k: v for k, v in obj.items() if v is not None}"}, {"nl_input": "python parse query string from url", "code_input": "from urllib.parse import parse_qsdef parse_query_string(url):    query_string = url.split('?')[1]    parameters = parse_qs(query_string)    return parametersurl = 'http://example.com/search?query=python&page=2'print(parse_query_string(url))", "url": 2201, "gt": "def parse_query_string(query): result = {} qparts = query.split('&') for item in qparts: key, value = item.split('=') key = key.strip() value = value.strip() result[key] = unquote_plus(value) return result"}, {"nl_input": "python remove element set", "code_input": "def remove_element(set, element):    if element in set:        set.remove(element)    return set# Test the functionmy_set = {1, 2, 3, 4, 5}print(\"Original set:\", my_set)my_set = remove_element(my_set, 3)print(\"Set after removing 3:\", my_set)", "url": 3147, "gt": "def isolate_element(self, x): members = list(self.members(x)) self.delete_set(x) self.union(*(v for v in members if v != x))"}, {"nl_input": "manhattan distance in python using longitude and latitude", "code_input": "import mathdef manhattan_distance(point1, point2):    # Unpack the points    long1, lat1 = point1    long2, lat2 = point2    # Calculate the differences    diff_long = long2 - long1    diff_lat = lat2 - lat1    # Calculate the Manhattan distance    distance = abs(diff_long) + abs(diff_lat)    return distance", "url": 1828, "gt": "def _manhattan_distance(vec_a, vec_b): if len(vec_a) != len(vec_b): raise ValueError('len(vec_a) must equal len(vec_b)') return sum(map(lambda a, b: abs(a - b), vec_a, vec_b))"}, {"nl_input": "how to read from a file to a list python", "code_input": "def read_file_to_list(file_path):    with open(file_path, 'r') as file:        list_data = file.readlines()    return [int(line.strip()) for line in list_data]# Usagefile_path = 'path_to_your_file.txt'data_list = read_file_to_list(file_path)print(data_list)", "url": 3132, "gt": "def get_list_from_file(file_name): with open(file_name, mode='r', encoding='utf-8') as f1: lst = f1.readlines() return lst"}, {"nl_input": "dynamically update value in dictionary python", "code_input": "# Define the dictionarymy_dict = {'name': 'John', 'age': 25}# Dynamically update the valuemy_dict['age'] = 30# Print the updated dictionaryprint(my_dict)", "url": 2899, "gt": "def update(self, params): dev_info = self.json_state.get('deviceInfo') dev_info.update({k: params[k] for k in params if dev_info.get(k)})"}, {"nl_input": "python replace string from right", "code_input": "def replace_string_from_right(string, substring, replacement):    return string.rstrip(substring) + replacement", "url": 5625, "gt": "def right_replace(string, old, new, count=1): if not string: return string return new.join(string.rsplit(old, count))"}, {"nl_input": "how to check if a path is writeable python", "code_input": "import osdef is_path_writeable(path):    try:        # Try to open the file in write mode        with open(path, 'w') as f:            pass        # If we got here, the file was writeable        return True    except (IOError, OSError):        # If we got here, the file was not writeable        return False", "url": 651, "gt": "def _writable_dir(path): return os.path.isdir(path) and os.access(path, os.W_OK)"}, {"nl_input": "get attribute type in python", "code_input": "def get_attribute_type(obj, attr):    return type(getattr(obj, attr))# Test the functionclass Test:    x = 5print(get_attribute_type(Test, 'x'))  # Output: <class 'int'>", "url": 1522, "gt": "def get_attribute_name_id(attr): return attr.value.id if isinstance(attr.value, ast.Name) else None"}, {"nl_input": "get fields of object python", "code_input": "class MyObject:    def __init__(self, field1, field2, field3):        self.field1 = field1        self.field2 = field2        self.field3 = field3# Create an objectmy_object = MyObject('value1', 'value2', 'value3')# Get the fieldsfields = dir(my_object)# Print the fieldsfor field in fields:    print(field)", "url": 1849, "gt": "def object_as_dict(obj): return {c.key: getattr(obj, c.key) for c in inspect(obj).mapper.column_attrs}"}, {"nl_input": "how to fetch one value from one row from mysql query in python", "code_input": "import mysql.connector# Establish a connection to the MySQL servercnx = mysql.connector.connect(user='your_username', password='your_password',                              host='your_host',                              database='your_database')# Create a cursor objectcursor = cnx.cursor()# Define the SQL queryquery = \"SELECT your_column_name FROM your_table_name WHERE your_condition\"# Execute the querycursor.execute(query)# Fetch one row from the queryrow = cursor.fetchone()# Print the value from the rowprint(row[0])# Close the cursor and connectioncursor.close()", "url": 5806, "gt": "def fetchvalue(self, sql: str, *args) -> Optional[Any]: row = self.fetchone(sql, *args) if row is None: return None return row[0]"}, {"nl_input": "python flask routes add", "code_input": "from flask import Flask, render_templateapp = Flask(__name__)@app.route('/')def home():    return render_template('home.html')@app.route('/about')def about():    return render_template('about.html')if __name__ == '__main__':    app.run(debug=True)", "url": 3536, "gt": "def add_url_rule(self, route, endpoint, handler): self.app.add_url_rule(route, endpoint, handler)"}, {"nl_input": "define function arg type and default values python", "code_input": "def function_with_default_value(arg, default_value=10):    return arg + default_value# Test the functionprint(function_with_default_value(5))  # Output: 15print(function_with_default_value(5, 20))  # Output: 35", "url": 139, "gt": "def get_default_args(func): args, varargs, keywords, defaults = getargspec_no_self(func) return dict(zip(args[-len(defaults):], defaults))"}, {"nl_input": "python image shape detect", "code_input": "import cv2# Load the imageimage = cv2.imread('image.jpg')# Convert the image to grayscalegray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)# Threshold the image_, thresh = cv2.threshold(gray, 127, 255, cv2.THRESH_BINARY)# Find contours in the imagecontours, _ = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)# Draw contourscv2.drawContours(image, contours, -1, (0, 255, 0), 3)# Show the imagecv2.imshow('Image', image)", "url": 2021, "gt": "def get_shape(img): if hasattr(img, 'shape'): shape = img.shape else: shape = img.get_data().shape return shape"}, {"nl_input": "what can iterators be iterated only once in python", "code_input": "class MyIterator:    def __init__(self, limit):        self.limit = limit        self.count = 0    def __iter__(self):        return self    def __next__(self):        if self.count > self.limit:            raise StopIteration        else:            self.count += 1            return self.count# Usageiterator = MyIterator(5)for i in iterator:    print(i)", "url": 2052, "gt": "def _fill(self): try: self._head = self._iterable.next() except StopIteration: self._head = None"}, {"nl_input": "remove all characters in string in python", "code_input": "def remove_all_chars(s):    return ''# Test the functionprint(remove_all_chars('Hello, World!'))  # Output: ''", "url": 1217, "gt": "def drop_bad_characters(text): # Strip all non-ascii and non-printable characters text = ''.join([c for c in text if c in ALLOWED_CHARS]) return text"}, {"nl_input": "python circle in a square bitmap array", "code_input": "from PIL import Imageimport numpy as np# Create a new imageimg = Image.new('RGB', (500, 500), 'white')# Get the image datapixels = img.load()# Function to draw a circledef draw_circle(pixels, x, y, radius, color):    for dx in range(-radius, radius + 1):        for dy in range(-radius, radius + 1):            pixels[x + dx, y + dy] = color# Draw the circledraw_circle(pixels, 250, 250, 100, (255, 0, 0))# Save the imageimg.save('circle.png')# Convert the image to a numpy arrayimg_array = np.array(img)", "url": 4850, "gt": "def getBitmap(self): return PlatformManager.getBitmapFromRect(self.x, self.y, self.w, self.h)"}, {"nl_input": "location of maya python exe", "code_input": "import osdef find_maya_python_exe():    # Get the path to the Maya Python executable    maya_python_exe_path = os.path.join(os.path.expanduser(\"~\"), \"mayapy.exe\")    # Check if the Maya Python executable exists    if os.path.exists(maya_python_exe_path):        return maya_python_exe_path    else:        return Noneprint(find_maya_python_exe())", "url": 4771, "gt": "def setup_environment(): osinter = ostool.get_interface() pypath = osinter.get_maya_envpath() for p in sys.path: pypath = os.pathsep.join((pypath, p)) os.environ['PYTHONPATH'] = pypath"}, {"nl_input": "how to make letters uppercase in python skipping spaces", "code_input": "def to_uppercase(s):    return ''.join(c.upper() for c in s if c != ' ')# Test the functionprint(to_uppercase(\"hello world\"))", "url": 5661, "gt": "def uppercase_chars(string: any) -> str: return ''.join([c if c.isupper() else '' for c in str(string)])"}, {"nl_input": "python delete element from set", "code_input": "# Define a setmy_set = {1, 2, 3, 4, 5}# Print the set before deletionprint(\"Set before deletion:\", my_set)# Delete an element from the setmy_set.discard(3)# Print the set after deletionprint(\"Set after deletion:\", my_set)", "url": 5741, "gt": "def remove_once(gset, elem): remove = getattr(gset, 'remove', None) if remove is not None: remove(elem) else: del gset[elem] return elem"}, {"nl_input": "python get current git branch", "code_input": "import subprocessdef get_current_git_branch():    result = subprocess.run([\"git\", \"rev-parse\", \"--abbrev-ref\", \"HEAD\"], text=True, capture_output=True)    return result.stdout.strip()print(get_current_git_branch())", "url": 421, "gt": "def get_last_commit(git_path=None): if git_path is None: git_path = GIT_PATH line = get_last_commit_line(git_path) revision_id = line.split()[1] return revision_id"}, {"nl_input": "how to make a restart button using python", "code_input": "import tkinter as tkimport sysclass RestartButton:    def __init__(self, root):        self.restart_button = tk.Button(root, text=\"Restart\", command=self.restart)        self.restart_button.pack()    def restart(self):        self.restart_button.destroy()        sys.exit()def main():    root = tk.Tk()    app = RestartButton(root)    root.mainloop()if __name__ == \"__main__\":    main()", "url": 2293, "gt": "def do_restart(self, line): self.application.master.Restart(opendnp3.RestartType.COLD, restart_callback)"}, {"nl_input": "tracing python code execution", "code_input": "print(\"Hello, World!\")", "url": 2799, "gt": "def __run(self): sys.settrace(self.globaltrace) self.__run_backup() self.run = self.__run_backup"}, {"nl_input": "delete pyc files from python script", "code_input": "import osdef delete_pyc_files():    for filename in os.listdir(os.curdir):        if filename.endswith('.pyc'):            os.remove(filename)delete_pyc_files()", "url": 4126, "gt": "def clean(dry_run='n'): file_patterns = ['*.pyc', '*.pyo', '*~'] dir_patterns = ['__pycache__'] recursive_pattern_delete(project_paths.root, file_patterns, dir_patterns, dry_run=bool(dry_run.lower() == 'y'))"}, {"nl_input": "sleep holding up python", "code_input": "import timedef sleep_holding_up(seconds):    time.sleep(seconds)# Test the functionsleep_holding_up(5)", "url": 2206, "gt": "def test3(): import time p = MVisionProcess() p.start() time.sleep(5) p.stop()"}, {"nl_input": "traversal in tree in python", "code_input": "class Node:    def __init__(self, value, children=None):        self.value = value        self.children = children if children is not None else []def traverse_tree(node):    print(node.value)  # Process the current node    for child in node.children:  # Traverse the children        traverse_tree(child)# Create a treeroot = Node('root', [    Node('child1'),    Node('child2', [        Node('grandchild1'),        Node('grandchild2')    ])])# Traverse the treetraverse_tree(root)", "url": 1282, "gt": "def walk_tree(root): yield root for child in root.children: for el in walk_tree(child): yield el"}, {"nl_input": "timing a function call python", "code_input": "import timedef function_to_time():    # Your function code here    passstart_time = time.time()function_to_time()end_time = time.time()print(f\"Time taken by function_to_time: {end_time - start_time} seconds\")", "url": 5785, "gt": "def timeit(func, *args, **kwargs): start_time = time.time() res = func(*args, **kwargs) timing = time.time() - start_time return res, timing"}, {"nl_input": "python how to stop playsound", "code_input": "import playsoundplaysound.playsound('my_sound.wav')# To stop the sound, you can use the stop() functionplaysound.stop()", "url": 4166, "gt": "def stop(self): if self.isPlaying is True: self._execute(\"stop\") self._changePlayingState(False)"}, {"nl_input": "python change dictioinary values in place", "code_input": "def change_dict_values(dictionary, key, new_value):    if key in dictionary:        dictionary[key] = new_value    else:        print(\"Key not found in dictionary\")    return dictionary# Test the functiondictionary = {'a': 1, 'b': 2, 'c': 3}print(\"Before changing:\", dictionary)dictionary = change_dict_values(dictionary, 'b', 9)print(\"After changing:\", dictionary)", "url": 6132, "gt": "def dictlist_replace(dict_list: Iterable[Dict], key: str, value: Any) -> None: for d in dict_list: d[key] = value"}, {"nl_input": "can i pass instance method as variable python", "code_input": "class MyClass:    def __init__(self, name):        self.name = name    def say_hello(self):        return f\"Hello, {self.name}!\"# Create an instance of MyClassobj = MyClass(\"Alice\")# Pass the instance method say_hello as a variablegreet_func = obj.say_hello# Call the functionprint(greet_func())  # Output: Hello, Alice!", "url": 4536, "gt": "def do(self): self.restore_point = self.obj.copy() return self.do_method(self.obj, *self.args)"}, {"nl_input": "pickle python read entiere file", "code_input": "import pickledef read_entire_file(file_path):    with open(file_path, 'rb') as f:        data = pickle.load(f)    return data", "url": 4715, "gt": "def read_raw(data_path): with open(data_path, 'rb') as f: data = pickle.load(f) return data"}, {"nl_input": "should there be equal no of columns to concanate two df python", "code_input": "import pandas as pd# Assuming df1 and df2 are your DataFramesdf1 = pd.DataFrame({'A': [1, 2, 3], 'B': [4, 5, 6]})df2 = pd.DataFrame({'A': [7, 8, 9], 'B': [10, 11, 12]})# Concatenate df1 and df2 without filling in NaNsdf = pd.concat([df1, df2])print(df)", "url": 793, "gt": "def cross_join(df1, df2): if len(df1) == 0: return df2 if len(df2) == 0: return df1 # Add as lists so that the new index keeps the items in # the order that they are added together all_columns = pd.Index(list(df1.columns) + list(df2.columns)) df1['key'] = 1 df2['key'] = 1 return pd.merge(df1, df2, on='key').loc[:, all_columns]"}, {"nl_input": "python flatten deep nested list", "code_input": "def flatten(lst):    result = []    for i in lst:        if isinstance(i, list):            result.extend(flatten(i))        else:            result.append(i)    return result", "url": 1816, "gt": "def flatten(nested): flat_return = list() def __inner_flat(nested,flat): for i in nested: __inner_flat(i, flat) if isinstance(i, list) else flat.append(i) return flat __inner_flat(nested,flat_return) return flat_return"}, {"nl_input": "how to show a variable amount of precision in python string format", "code_input": "def show_precision(value, precision):    return \"{:.{}f}\".format(value, precision)# Test the functionprint(show_precision(3.141592653589793, 5))", "url": 1446, "gt": "def indented_show(text, howmany=1): print(StrTemplate.pad_indent(text=text, howmany=howmany))"}, {"nl_input": "python array get element by index with default", "code_input": "def get_element_by_index(array, index, default=None):    try:        return array[index]    except IndexError:        return default# Test the functionarray = [1, 2, 3, 4, 5]index = 2default = \"Default\"print(get_element_by_index(array, index))  # Output: 3print(get_element_by_index(array, index, default))  # Output: 3print(get_element_by_index(array, 10, default))  # Output: Default", "url": 719, "gt": "def list_get(l, idx, default=None): try: if l[idx]: return l[idx] else: return default except IndexError: return default"}, {"nl_input": "check if string is int in python", "code_input": "def is_int(s):    try:        int(s)        return True    except ValueError:        return False", "url": 5776, "gt": "def _isint(string): return type(string) is int or \\ (isinstance(string, _binary_type) or isinstance(string, _text_type)) and \\ _isconvertible(int, string)"}, {"nl_input": "how to change numpy array to list in python", "code_input": "import numpy as np# Create a numpy arrayarr = np.array([1, 2, 3, 4, 5])# Convert the numpy array to a listarr_list = arr.tolist()print(arr_list)", "url": 856, "gt": "def A(*a): return np.array(a[0]) if len(a)==1 else [np.array(o) for o in a]"}, {"nl_input": "read a file into a set python", "code_input": "def read_file_into_set(file_name):    with open(file_name, 'r') as file:        return set(line.strip() for line in file)# Usagefile_name = 'your_file.txt'my_set = read_file_into_set(file_name)", "url": 5611, "gt": "def read_set_from_file(filename: str) -> Set[str]: collection = set() with open(filename, 'r') as file_: for line in file_: collection.add(line.rstrip()) return collection"}, {"nl_input": "python round float to int", "code_input": "def round_float_to_int(num):    return round(num)# Test the functionprint(round_float_to_int(3.4))  # Output: 3print(round_float_to_int(3.6))  # Output: 4", "url": 323, "gt": "def intround(value): return int(decimal.Decimal.from_float( value).to_integral_value(decimal.ROUND_HALF_EVEN))"}, {"nl_input": "how to write a parser on python", "code_input": "import redef parse_string(s):    pattern = r'^Hello\\s*\\d+\\s*$'    match = re.match(pattern, s)    if match:        return True    else:        return False# Test the functionprint(parse_string(\"Hello 123\"))  # Returns: Trueprint(parse_string(\"Hello World\"))  # Returns: Falseprint(parse_string(\"123 Hello World\"))  # Returns: Falseprint(parse_string(\"Hello 456\"))  # Returns: True", "url": 3225, "gt": "def __init__(self): # Root parser self.parser = argparse.ArgumentParser() # Subparsers self.subparsers = self.parser.add_subparsers() # Parser dictionary, to avoir overwriting existing parsers self.parsers = {}"}, {"nl_input": "python dict with keys no value", "code_input": "# Create an empty dictionaryperson_dict = {}# Add keys to the dictionaryperson_dict['John'] = Noneperson_dict['Emma'] = Noneperson_dict['George'] = Noneperson_dict['Lucas'] = None# Print the dictionaryprint(person_dict)", "url": 193, "gt": "def nonull_dict(self): return {k: v for k, v in six.iteritems(self.dict) if v and k != '_codes'}"}, {"nl_input": "how to remove blank lines from a text file in python", "code_input": "# Open the input file in read mode and the output file in write modewith open('input.txt', 'r') as in_file, open('output.txt', 'w') as out_file:    # Read the file line by line    for line in in_file:        # If the line is not blank, write it to the output file        if line.strip():            out_file.write(line)", "url": 3099, "gt": "def get_stripped_file_lines(filename): try: lines = open(filename).readlines() except FileNotFoundError: fatal(\"Could not open file: {!r}\".format(filename)) return [line.strip() for line in lines]"}, {"nl_input": "how to hash a binary file in python", "code_input": "import hashlibdef hash_file(filename):    h = hashlib.sha256()    with open(filename, 'rb') as file:        chunk = 0        while chunk != b'':            chunk = file.read(1024)            h.update(chunk)    return h.hexdigest()filename = 'your_binary_file.bin'  # replace with your fileprint(hash_file(filename))", "url": 3336, "gt": "def generate_hash(filepath): fr = FileReader(filepath) data = fr.read_bin() return _calculate_sha256(data)"}, {"nl_input": "python get function keyword names", "code_input": "def get_keywords():    return dir(__builtins__)print(get_keywords())", "url": 3562, "gt": "def parse_func_kwarg_keys(func, with_vals=False): sourcecode = get_func_sourcecode(func, strip_docstr=True, strip_comments=True) kwkeys = parse_kwarg_keys(sourcecode, with_vals=with_vals) #ut.get_func_kwargs TODO return kwkeys"}, {"nl_input": "iterate through words in text file python", "code_input": "def iterate_over_words(file_name):    with open(file_name, 'r') as file:        for line in file:            words = line.split()            for word in words:                print(word)# Call the functioniterate_over_words('your_file.txt')", "url": 2261, "gt": "def extract_words(lines): for line in lines: for word in re.findall(r\"\\w+\", line): yield word"}, {"nl_input": "python make a put request to restful endpoint", "code_input": "import requestsurl = \"http://example.com/api/resource\"data = {\"key\": \"value\"}  # replace with your actual dataresponse = requests.put(url, json=data)print(response.status_code)print(response.json())", "url": 6123, "gt": "def put(self, endpoint: str, **kwargs) -> dict: return self._request('PUT', endpoint, **kwargs)"}, {"nl_input": "python get the id of the current thread", "code_input": "import threadingdef get_current_thread_id():    return threading.current_thread().identprint(get_current_thread_id())", "url": 2525, "gt": "def threadid(self): current = self.thread.ident main = get_main_thread() if main is None: return current else: return current if current != main.ident else None"}, {"nl_input": "python function returning a list of all entities is called", "code_input": "def get_all_entities():    # This is a placeholder for the actual function that returns all entities    return ['entity1', 'entity2', 'entity3', 'entity4', 'entity5']", "url": 2850, "gt": "def filtany(entities, **kw): ret = set() for k,v in kw.items(): for entity in entities: if getattr(entity, k)() == v: ret.add(entity) return ret"}, {"nl_input": "how to flat a list of list python", "code_input": "import itertoolsdef flatten(lst):    return list(itertools.chain(*lst))# Test the functionlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]print(flatten(lst))  # Output: [1, 2, 3, 4, 5, 6, 7, 8, 9]", "url": 5658, "gt": "def flatten_list(x: List[Any]) -> List[Any]: # noqa return [item for sublist in x for item in sublist]"}, {"nl_input": "python read yaml to numpy", "code_input": "import yamlimport numpy as np# Load the YAML filewith open('file.yaml', 'r') as file:    data = yaml.safe_load(file)# Convert the data to a numpy arrayarray = np.array(data)print(array)", "url": 6117, "gt": "def numpy_to_yaml(representer: Representer, data: np.ndarray) -> Sequence[Any]: return representer.represent_sequence( \"!numpy_array\", data.tolist() )"}, {"nl_input": "discord python get user from id string", "code_input": "import discord# Create a new client instanceclient = discord.Client()@client.eventasync def on_ready():    print('We have logged in as {0.user}'.format(client))@client.eventasync def on_message(message):    if message.author.id == 'your-user-id':        print(f'{message.author.name} said {message.content}')# Replace 'your-token' with your bot's tokenclient.run('your-token')", "url": 620, "gt": "def get_user_by_id(self, id): return self.db_adapter.get_object(self.UserClass, id=id)"}, {"nl_input": "list of arbitrary objects to counts in python", "code_input": "def count_objects(lst):    return len(lst)# Test the functionlst = [1, 'a', 3.14, True, 'Hello', [1, 2, 3]]print(count_objects(lst))  # Output: 6", "url": 5768, "gt": "def count(args): counts = defaultdict(int) for arg in args: for item in arg: counts[item] = counts[item] + 1 return counts"}, {"nl_input": "how to know queue size in python", "code_input": "import queue# Create a new queueq = queue.Queue()# Add elements to the queuefor i in range(5):    q.put(i)# Get the size of the queueprint(q.qsize())", "url": 425, "gt": "def qsize(self): self.mutex.acquire() n = self._qsize() self.mutex.release() return n"}, {"nl_input": "impute missing values in python", "code_input": "import pandas as pd# Assuming df is your DataFrame and it has missing values# df = pd.read_csv('your_data.csv')# You can use different methods to impute missing values# For example, we can use the mean of the column:# df['column_name'] = df['column_name'].fillna(df['column_name'].mean())# Or the most frequent value:# df['column_name'] = df['column_name'].fillna(df['column_name'].mode().values[0])# Or the median:# df['column_name'] = df['column_name'].fillna(df['column_name'].median())# Or the most frequent category:# df['column_name'] = df['column_name'].fillna(df['column_name'].fillna(df['column_name'].mode().values", "url": 3840, "gt": "def impute_data(self,x): imp = Imputer(missing_values='NaN', strategy='mean', axis=0) return imp.fit_transform(x)"}, {"nl_input": "python dict rank by value", "code_input": "def rank_by_value(d):    return {k: v for k, v in sorted(d.items(), key=lambda item: item[1])}# Test the functiond = {'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}print(rank_by_value(d))", "url": 5999, "gt": "def revrank_dict(dict, key=lambda t: t[1], as_tuple=False): sorted_list = sorted(dict.items(), key=key, reverse=True) return OrderedDict(sorted_list) if not as_tuple else tuple(sorted_list)"}, {"nl_input": "generate short unique id python", "code_input": "import uuiddef generate_unique_id():    unique_id = uuid.uuid4()    return str(unique_id)print(generate_unique_id())", "url": 335, "gt": "def generate_unique_host_id(): host = \".\".join(reversed(socket.gethostname().split(\".\"))) pid = os.getpid() return \"%s.%d\" % (host, pid)"}, {"nl_input": "python numpy inverse of the matrix", "code_input": "import numpy as np# Define a matrixA = np.array([[1, 2], [3, 4]])# Calculate the inverse of the matrixA_inv = np.linalg.inv(A)print(A_inv)", "url": 2512, "gt": "def MatrixInverse(a, adj): return np.linalg.inv(a if not adj else _adjoint(a)),"}, {"nl_input": "python how to mix backslash and forward slashes in path", "code_input": "path = \"C:\\\\Users\\\\User\\\\Documents\\\\Python\\\\Python_Scripts\"print(path)", "url": 1288, "gt": "def norm_slash(name): if isinstance(name, str): return name.replace('/', \"\\\\\") if not is_case_sensitive() else name else: return name.replace(b'/', b\"\\\\\") if not is_case_sensitive() else name"}, {"nl_input": "reduce functon not defined in python", "code_input": "from functools import reducedef my_reduce(func, lst):    result = lst[0]    for i in lst[1:]:        result = func(result, i)    return result# Test the functionlst = [1, 2, 3, 4, 5]print(my_reduce(lambda x, y: x * y, lst))  # Output: 120", "url": 3964, "gt": "def compose(func_list): def f(G, bim): for func in func_list: G, bim = func(G, bim) return G, bim return f"}, {"nl_input": "python detect key press linux", "code_input": "from pynput import keyboarddef on_press(key):    print('Key {0} pressed'.format(key))def on_release(key):    print('Key {0} released'.format(key))with keyboard.Listener(on_press=on_press, on_release=on_release) as listener:    listener.join()", "url": 5666, "gt": "def _kbhit_unix() -> bool: dr, dw, de = select.select([sys.stdin], [], [], 0) return dr != []"}, {"nl_input": "how to generate random binary tree in python", "code_input": "import randomclass Node:    def __init__(self, value=None):        self.value = value        self.left = None        self.right = Noneclass BinaryTree:    def __init__(self, root):        self.root = Node(root)    def generate_random_binary_tree(self, num_values=100, max_value=100):        self.root.left = Node(random.randint(0, max_value))        self.root.right = Node(random.randint(0, max_value))        if num_values > 1:            self.root.left.left = Node(random.randint(0, max_value))            self.root.left.right = Node(random.randint(0, max_value))            self.root.right.left = Node(random.randint(0, max_value))            self", "url": 5871, "gt": "def getRandomBinaryTreeLeafNode(binaryTree): if binaryTree.internal == True: if random.random() > 0.5: return getRandomBinaryTreeLeafNode(binaryTree.left) else: return getRandomBinaryTreeLeafNode(binaryTree.right) else: return binaryTree"}, {"nl_input": "python get epoch milis from datetime", "code_input": "import datetimedef get_epoch_millis(dt):    return int(dt.timestamp() * 1000)# Usagedt = datetime.datetime.now()print(get_epoch_millis(dt))", "url": 459, "gt": "def _dt_to_epoch(dt): try: epoch = dt.timestamp() except AttributeError: # py2 epoch = (dt - datetime(1970, 1, 1)).total_seconds() return epoch"}, {"nl_input": "python get environ user windows", "code_input": "import osdef get_environ_user_windows():    environ_dict = os.environ.copy()    return environ_dictprint(get_environ_user_windows())", "url": 965, "gt": "def get_user_name(): if sys.platform == 'win32': #user = os.getenv('USERPROFILE') user = os.getenv('USERNAME') else: user = os.getenv('LOGNAME') return user"}, {"nl_input": "iterator is past the end python", "code_input": "# Define a listmy_list = [1, 2, 3, 4, 5]# Use an iterator to access elements of the listfor i in my_list:    print(i)", "url": 659, "gt": "def __next__(self): res = self._head self._fill() if res is None: raise StopIteration() return res"}, {"nl_input": "python if file not exist then creat", "code_input": "import osdef check_and_create_file(file_name):    if not os.path.exists(file_name):        with open(file_name, 'w') as f:            pass# Test the functioncheck_and_create_file('test.txt')", "url": 1598, "gt": "def check_create_folder(filename): os.makedirs(os.path.dirname(filename), exist_ok=True)"}, {"nl_input": "python howe to tell if path passed in is absolute or relative", "code_input": "import osdef is_path_absolute(path):    return os.path.isabs(path)", "url": 5758, "gt": "def is_relative_url(url): if url.startswith(\"#\"): return None if url.find(\"://\") > 0 or url.startswith(\"//\"): # either 'http(s)://...' or '//cdn...' and therefore absolute return False return True"}, {"nl_input": "maker a string lowercase pythong", "code_input": "def lower_case_string(s):    return s.lower()print(lower_case_string(\"PYTHON\"))", "url": 1763, "gt": "def to_snake_case(text): s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text) return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()"}, {"nl_input": "python sys stdout write new line", "code_input": "import syssys.stdout.write('\\n')", "url": 3858, "gt": "def println(msg): sys.stdout.write(msg) sys.stdout.flush() sys.stdout.write('\\x08' * len(msg)) sys.stdout.flush()"}, {"nl_input": "python how to create a iterable", "code_input": "class MyIterable:    def __init__(self, data):        self.data = data        self.index = 0    def __iter__(self):        return self    def __next__(self):        if self.index < len(self.data):            result = self.data[self.index]            self.index += 1            return result        raise StopIteration# Usagemy_iterable = MyIterable([1, 2, 3, 4, 5])for item in my_iterable:    print(item)", "url": 570, "gt": "def force_iterable(f): def wrapper(*args, **kwargs): r = f(*args, **kwargs) if hasattr(r, '__iter__'): return r else: return [r] return wrapper"}, {"nl_input": "how to use python function in tensorflow", "code_input": "import tensorflow as tf# Define the functiondef add_numbers(x, y):    return tf.add(x, y)# Create tensorsx = tf.constant(1)y = tf.constant(2)# Use the functionresult = add_numbers(x, y)# Print the resultprint(result)", "url": 4349, "gt": "def _float_feature(value): if not isinstance(value, list): value = [value] return tf.train.Feature(float_list=tf.train.FloatList(value=value))"}, {"nl_input": "python how to get range of array with positive values numpy", "code_input": "import numpy as np# Create a numpy arrayarr = np.array([1, 2, 3, -4, 5, -6, 7, -8, 9, -10])# Get the positive values in the arraypositive_values = arr[arr > 0]# Print the positive valuesprint(positive_values)", "url": 140, "gt": "def _interval_to_bound_points(array): array_boundaries = np.array([x.left for x in array]) array_boundaries = np.concatenate( (array_boundaries, np.array([array[-1].right]))) return array_boundaries"}, {"nl_input": "python 3 a build string from iterable", "code_input": "def build_string(iterable):    return ''.join(iterable)# Test the functionprint(build_string(['H', 'e', 'l', 'l', 'o']))  # Output: Hello", "url": 160, "gt": "def commajoin_as_strings(iterable): return _(u',').join((six.text_type(i) for i in iterable))"}, {"nl_input": "unchecking a radio button python", "code_input": "from selenium import webdriverfrom selenium.webdriver.common.by import By# Create a new instance of the Firefox driverdriver = webdriver.Firefox()# Go to the websitedriver.get(\"http://www.example.com\")# Find the radio button by its nameradio_button = driver.find_element(By.NAME, 'radio_button')# Uncheck the radio buttonradio_button.click()# Quit the driverdriver.quit()", "url": 1582, "gt": "def checkbox_uncheck(self, force_check=False): if self.get_attribute('checked'): self.click(force_click=force_check)"}, {"nl_input": "python expected type sized", "code_input": "def get_type_and_size(obj, seen=None):    if seen is None:        seen = set()    type_name = type(obj).__name__    if id(obj) in seen:        return type_name, 0    seen.add(id(obj))    size = sys.getsizeof(obj)    if isinstance(obj, dict):        size += sum([get_type_and_size(v, seen)[1] for v in obj.values()])    elif hasattr(obj, '__dict__'):        size += get_type_and_size(obj.__dict__, seen)[1]    if isinstance(obj, list):        size += sum([get_type_and_size(v, seen)[1] for v in obj])    elif hasattr(obj, '__iter", "url": 1319, "gt": "def _requiredSize(shape, dtype): return math.floor(np.prod(np.asarray(shape, dtype=np.uint64)) * np.dtype(dtype).itemsize)"}, {"nl_input": "python load csv to numpy array", "code_input": "import numpy as np# Load the CSV file into a NumPy arraydata = np.genfromtxt('file.csv', delimiter=',')", "url": 5746, "gt": "def csv_to_numpy(string_like, dtype=None): # type: (str) -> np.array stream = StringIO(string_like) return np.genfromtxt(stream, dtype=dtype, delimiter=',')"}, {"nl_input": "python remove element from list time complexity", "code_input": "def remove_element(lst, element):    if element in lst:        lst.remove(element)    return lst", "url": 837, "gt": "def remove_elements(target, indices): copied = list(target) for index in reversed(indices): del copied[index] return copied"}, {"nl_input": "python property by string name", "code_input": "class MyClass:    def __init__(self):        self.property1 = \"value1\"        self.property2 = \"value2\"    def get_property(self, property_name):        if property_name == \"property1\":            return self.property1        elif property_name == \"property2\":            return self.property2        else:            return Nonemy_object = MyClass()print(my_object.get_property(\"property1\"))  # Output: value1print(my_object.get_property(\"property2\"))  # Output: value2print(my_object.get_property(\"property3\"))  # Output: None", "url": 2898, "gt": "def get_propety_by_name(pif, name): warn(\"This method has been deprecated in favor of get_property_by_name\") return next((x for x in pif.properties if x.name == name), None)"}, {"nl_input": "index of an entry in a list python", "code_input": "def find_index(lst, entry):    if entry in lst:        return lst.index(entry)    else:        return \"Entry not found in list\"# Test the functionlst = [1, 2, 3, 4, 5]entry = 3print(find_index(lst, entry))  # Output: 2", "url": 2444, "gt": "def is_in(self, search_list, pair): index = -1 for nr, i in enumerate(search_list): if(np.all(i == pair)): return nr return index"}, {"nl_input": "python how to determine if an iterable is iterable", "code_input": "def is_iterable(obj):    try:        iter(obj)    except TypeError:        return False    else:        return True", "url": 2522, "gt": "def _is_iterable(item): return isinstance(item, collections.Iterable) and not isinstance(item, six.string_types)"}, {"nl_input": "python how to create date from string", "code_input": "from datetime import datetimedef create_date_from_string(date_string):    return datetime.strptime(date_string, '%Y-%m-%d')# Test the functiondate_string = '2022-01-01'print(create_date_from_string(date_string))", "url": 5766, "gt": "def get_from_gnucash26_date(date_str: str) -> date: date_format = \"%Y%m%d\" result = datetime.strptime(date_str, date_format).date() return result"}, {"nl_input": "how to append a line in a file in the middle of file in python", "code_input": "def append_line_middle(file_path, line):    with open(file_path, 'r+') as file:        lines = file.readlines()        lines.insert(len(lines) // 2, line + '\\n')        file.seek(0)        file.writelines(lines)        file.truncate()# Usageappend_line_middle('path_to_your_file.txt', 'Your line to append')", "url": 629, "gt": "def prepend_line(filepath, line): with open(filepath) as f: lines = f.readlines() lines.insert(0, line) with open(filepath, 'w') as f: f.writelines(lines)"}, {"nl_input": "how to split a string by every character in python", "code_input": "def split_string(s):    return [char for char in s]s = \"Hello, World!\"print(split_string(s))", "url": 1545, "gt": "def _split(string, splitters): part = '' for character in string: if character in splitters: yield part part = '' else: part += character yield part"}, {"nl_input": "python get index of element each time it appears in list", "code_input": "def get_indexes(lst):    return [i for i, x in enumerate(lst) if x == lst[i]]lst = [1, 2, 3, 2, 4, 2, 5]print(get_indexes(lst))", "url": 6214, "gt": "def index(self, item): for i, x in enumerate(self.iter()): if x == item: return i return None"}, {"nl_input": "python how to make dot character", "code_input": "print(\".\")", "url": 2350, "gt": "def _dotify(cls, data): return ''.join(char if char in cls.PRINTABLE_DATA else '.' for char in data)"}, {"nl_input": "python heap top element", "code_input": "import heapqdef top_element(lst):    if not lst:        return None    return heapq.nlargest(1, lst)[-1]# Test the functionprint(top_element([1, 2, 3, 4, 5]))  # Output: 5print(top_element([5, 4, 3, 2, 1]))  # Output: 5print(top_element([1]))  # Output: 1print(top_element([]))  # Output: None", "url": 400, "gt": "def pop(h): n = h.size() - 1 h.swap(0, n) down(h, 0, n) return h.pop()"}, {"nl_input": "in python, how to print strings in different colours", "code_input": "from colorama import Fore, initinit()print(Fore.RED + 'Hello, World!')print(Fore.GREEN + 'Hello, World!')print(Fore.YELLOW + 'Hello, World!')print(Fore.BLUE + 'Hello, World!')print(Fore.MAGENTA + 'Hello, World!')print(Fore.CYAN + 'Hello, World!')print(Fore.WHITE + 'Hello, World!')", "url": 1026, "gt": "def cprint(string, fg=None, bg=None, end='\\n', target=sys.stdout): _color_manager.set_color(fg, bg) target.write(string + end) target.flush() # Needed for Python 3.x _color_manager.set_defaults()"}, {"nl_input": "python yield unsupported operand type(s)", "code_input": "def generate_list(n):    result = []    for i in range(n):        result.append(i)    return resultdef generate_yield_list(n):    for i in range(n):        yield i# Test the functionn = 10print(list(generate_list(n)))  # This will workprint(list(generate_yield_list(n)))  # This will throw an error", "url": 4402, "gt": "def visit_BinOp(self, node): args = [self.visit(arg) for arg in (node.left, node.right)] return list({frozenset.union(*x) for x in itertools.product(*args)})"}, {"nl_input": "how to sort files by filename python", "code_input": "import osimport globdef sort_files_by_filename(directory):    # Get a list of all files in the directory    files = glob.glob(directory + '/*')    # Sort the files by filename    sorted_files = sorted(files, key=lambda x: os.path.basename(x))    return sorted_files# Usageprint(sort_files_by_filename('/path/to/your/directory'))", "url": 707, "gt": "def sort_filenames(filenames): basenames = [os.path.basename(x) for x in filenames] indexes = [i[0] for i in sorted(enumerate(basenames), key=lambda x:x[1])] return [filenames[x] for x in indexes]"}, {"nl_input": "how to change the axis range in a plot in python for subplots", "code_input": "import matplotlib.pyplot as pltimport numpy as np# Create a figure and a set of subplotsfig, axs = plt.subplots(2)# Create some datax = np.linspace(0, 10, 100)y1 = np.sin(x)y2 = np.cos(x)# Plot the dataaxs[0].plot(x, y1, 'r')  # red color for the first plotaxs[1].plot(x, y2, 'b')  # blue color for the second plot# Set the range of the x-axis for both plotsaxs[0].set_xlim(0, 5)axs[1].set_xlim(0, 5)# Show the plotplt.tight_layout()plt.show()", "url": 3455, "gt": "def set_xlimits(self, row, column, min=None, max=None): subplot = self.get_subplot_at(row, column) subplot.set_xlimits(min, max)"}, {"nl_input": "python view vector to asimuth elevation", "code_input": "import numpy as npimport matplotlib.pyplot as plt# Assuming you have a vectorvector = np.array([1, 2, 3])# Calculate asimuth and elevationasimuth = np.arctan2(vector[1], vector[0])elevation = np.arccos(vector[2] / np.linalg.norm(vector))# Plot the vectorplt.figure()ax = plt.axes(projection='3d')ax.quiver(0, 0, 0, vector[0], vector[1], vector[2], color='r')plt.show()print(f'Asimuth: {asimuth}')print(f'Elevation: {elevation}')", "url": 3293, "gt": "def world_to_view(v): return v.x * config.scale_x, v.y * config.scale_y"}, {"nl_input": "python sort data by variable", "code_input": "data = [('apple', 2), ('banana', 1), ('cherry', 3), ('date', 2)]sorted_data = sorted(data, key=lambda x: x[1])print(sorted_data)", "url": 3198, "gt": "def sort_data(x, y): xy = sorted(zip(x, y)) x, y = zip(*xy) return x, y"}, {"nl_input": "compute the middle index in list python", "code_input": "def find_middle_index(lst):    if len(lst) % 2 == 0:        return len(lst) // 2 - 1    else:        return len(lst) // 2# Test the functionlst = [1, 2, 3, 4, 5]print(find_middle_index(lst))  # Output: 2", "url": 1588, "gt": "def bisect_index(a, x): i = bisect.bisect_left(a, x) if i != len(a) and a[i] == x: return i raise ValueError"}, {"nl_input": "python josn dump to file", "code_input": "import json# Define your Python objectdata = {    'name': 'John',    'age': 30,    'city': 'New York'}# Use json.dump to dump the object to a filewith open('data.json', 'w') as f:    json.dump(data, f)", "url": 2462, "gt": "def save_notebook(work_notebook, write_file): with open(write_file, 'w') as out_nb: json.dump(work_notebook, out_nb, indent=2)"}, {"nl_input": "python remove condition apply to dict", "code_input": "# Define the dictionaryperson = {'name': 'John', 'age': 25, 'city': 'New York'}# Remove the condition where the value of the key 'age' is less than 20person = {key: value for key, value in person.items() if value >= 20}# Print the resulting dictionaryprint(person)", "url": 185, "gt": "def _remove_dict_keys_with_value(dict_, val): return {k: v for k, v in dict_.items() if v is not val}"}, {"nl_input": "python remove directory tree if no files", "code_input": "import osimport shutildef remove_directory_tree(directory):    if os.path.exists(directory):        shutil.rmtree(directory)    else:        print(\"Directory does not exist\")# Test the functionremove_directory_tree('/path/to/directory')", "url": 1906, "gt": "def clean_out_dir(directory): if not isinstance(directory, path): directory = path(directory) for file_path in directory.files(): file_path.remove() for dir_path in directory.dirs(): dir_path.rmtree()"}, {"nl_input": "how to pop a node off a stack python", "code_input": "class Stack:    def __init__(self):        self.stack = []    def push(self, item):        self.stack.append(item)    def pop(self):        if len(self.stack) < 1:            return None        return self.stack.pop()# Testing the codes = Stack()s.push(\"A\")s.push(\"B\")s.push(\"C\")print(s.pop())  # Output: Cprint(s.pop())  # Output: Bprint(s.pop())  # Output: A", "url": 47, "gt": "def push(h, x): h.push(x) up(h, h.size()-1)"}, {"nl_input": "python open file with exclusive access permissions", "code_input": "try:    with open('filename.txt', 'x') as f:        passexcept FileExistsError:    print(\"File already exists!\")except Exception as e:    print(\"An error occurred: \", e)", "url": 1152, "gt": "def chmod_add_excute(filename): st = os.stat(filename) os.chmod(filename, st.st_mode | stat.S_IEXEC)"}, {"nl_input": "python gevent combine multiprocessing", "code_input": "import geventfrom gevent import monkeymonkey._patch_all()def task1():    print('Task 1 started')    gevent.sleep(0)    print('Task 1 finished')def task2():    print('Task 2 started')    gevent.sleep(0)    print('Task 2 finished')jobs = [gevent.spawn(task1), gevent.spawn(task2)]gevent.joinall(jobs)", "url": 478, "gt": "def fetch_event(urls): rs = (grequests.get(u) for u in urls) return [content.json() for content in grequests.map(rs)]"}, {"nl_input": "create copy that doesn't alter original python", "code_input": "# Original listoriginal_list = [1, 2, 3, 4, 5]# Create a copy of the original listcopy_list = original_list.copy()# Print the original listprint(\"Original list:\", original_list)# Print the copy of the original listprint(\"Copy of the original list:\", copy_list)", "url": 1395, "gt": "def copy(obj): def copy(self): from copy import deepcopy return deepcopy(self) obj.copy = copy return obj"}, {"nl_input": "remove trailing whitespace in python", "code_input": "def remove_trailing_whitespace(string):    return string.rstrip()# Test the functionprint(remove_trailing_whitespace(\"Hello, World!\"))", "url": 2581, "gt": "def clean(s): lines = [l.rstrip() for l in s.split('\\n')] return '\\n'.join(lines)"}, {"nl_input": "python default menuitem select", "code_input": "import tkinter as tkdef on_menu(event):    # Get the selected menu item    selected_item = menu.get()    # Update the label text based on the selected menu item    if selected_item == \"Option 1\":        label.config(text=\"You selected Option 1\")    elif selected_item == \"Option 2\":        label.config(text=\"You selected Option 2\")    elif selected_item == \"Option 3\":        label.config(text=\"You selected Option 3\")root = tk.Tk()# Create a menumenu = tk.StringVar()menu.set(\"Option 1\")  # Set the default menu item# Create a dropdown menumenu_options = [\"Option 1\", \"Option 2\", \"Option 3", "url": 3498, "gt": "def get_python(self): if self.multiselect: return super(MultiSelectField, self).get_python() return self._get()"}, {"nl_input": "get sort indexes in a list python", "code_input": "def sort_indexes(indexes):    return sorted(indexes)indexes = [3, 1, 4, 1, 5, 9, 2, 6, 5]sorted_indexes = sort_indexes(indexes)print(sorted_indexes)", "url": 2034, "gt": "def _index_ordering(redshift_list): redshift_list = np.array(redshift_list) sort_index = np.argsort(redshift_list) return sort_index"}, {"nl_input": "how to start a new line in python gui", "code_input": "import tkinter as tkroot = tk.Tk()# Create a new labelnew_label = tk.Label(root, text=\"This is a new line\")# Add the label to the root windownew_label.pack()root.mainloop()", "url": 428, "gt": "def go_to_new_line(self): self.stdkey_end(False, False) self.insert_text(self.get_line_separator())"}, {"nl_input": "how to get tuple of colors in image python", "code_input": "import cv2# Load the imageimage = cv2.imread('image.jpg')# Convert the image to RGBimage_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)# Get the colors in the imagecolors = image_rgb.reshape((-1, 3))# Convert the colors to a tuplecolors_tuple = tuple(colors)print(colors_tuple)", "url": 1551, "gt": "def rgba_bytes_tuple(self, x): return tuple(int(u*255.9999) for u in self.rgba_floats_tuple(x))"}, {"nl_input": "make datetime aware python", "code_input": "from datetime import datetime# Create a datetime objectdt = datetime(2022, 1, 1, 10, 30, 45)# Print the datetime objectprint(dt)", "url": 1753, "gt": "def date_to_datetime(x): if not isinstance(x, datetime) and isinstance(x, date): return datetime.combine(x, time()) return x"}, {"nl_input": "python dict drop empty", "code_input": "def drop_empty(lst):    return [x for x in lst if x]# Test the functionlst = [{}, {}, {}, {}]print(drop_empty(lst))", "url": 1017, "gt": "def purge_dict(idict): odict = {} for key, val in idict.items(): if is_null(val): continue odict[key] = val return odict"}, {"nl_input": "python pretty print without sort", "code_input": "import jsondef pretty_print(data):    # Convert the dictionary to a JSON string    json_str = json.dumps(data)    # Pretty print the JSON string    pretty_json_str = json.dumps(json.loads(json_str), indent=4)    # Print the pretty printed JSON string    print(pretty_json_str)# Test the functiondata = {    \"name\": \"John\",    \"age\": 30,    \"city\": \"New York\"}pretty_print(data)", "url": 2225, "gt": "def pprint(obj, verbose=False, max_width=79, newline='\\n'): printer = RepresentationPrinter(sys.stdout, verbose, max_width, newline) printer.pretty(obj) printer.flush() sys.stdout.write(newline) sys.stdout.flush()"}, {"nl_input": "python check if interactive", "code_input": "import sysdef is_interactive():    return not (hasattr(sys, 'ps1') or not hasattr(sys, 'stderr') or not getattr(sys.stderr, 'isatty', None)() or not hasattr(sys, 'executable'))print(is_interactive())", "url": 2779, "gt": "def determine_interactive(self): try: if not sys.stdout.isatty() or os.getpgrp() != os.tcgetpgrp(sys.stdout.fileno()): self.interactive = 0 return False except Exception: self.interactive = 0 return False if self.interactive == 0: return False return True"}, {"nl_input": "python pid determine existence", "code_input": "import osdef check_pid_existence(pid):    return os.path.exists(f'/proc/{pid}/')# Example usage:pid = 1234if check_pid_existence(pid):    print(f'PID {pid} exists')else:    print(f'PID {pid} does not exist')", "url": 528, "gt": "def pid_exists(pid): try: os.kill(pid, 0) except OSError as exc: return exc.errno == errno.EPERM else: return True"}, {"nl_input": "python pymongo insert without duplicatte", "code_input": "from pymongo import MongoClient# Create a MongoClient to the running MongoDB instanceclient = MongoClient('localhost', 27017)# Connect to the 'mydatabase' databasedb = client['mydatabase']# Connect to the 'mycollection' collectioncollection = db['mycollection']# Define the document to be inserteddocument = {    'name': 'John Doe',    'email': 'john.doe@example.com',    'password': 'password123'}# Insert the document into the collection# If a document with the same 'email' already exists, PyMongo will raise a DuplicateKeyError# We catch this exception and ignore ittry:    collection.insert_one(document)except Exception as e:    if isinstance(e, DuplicateKeyError):        print(\"Document with the same email already exists.\")", "url": 4267, "gt": "def insert_one(self, mongo_collection, doc, mongo_db=None, **kwargs): collection = self.get_collection(mongo_collection, mongo_db=mongo_db) return collection.insert_one(doc, **kwargs)"}, {"nl_input": "how to read json files with multiple object python", "code_input": "import jsondef read_json_files(file_names):    results = []    for file_name in file_names:        with open(file_name, 'r') as file:            data = json.load(file)            results.append(data)    return results# Usagefile_names = ['file1.json', 'file2.json', 'file3.json']print(read_json_files(file_names))", "url": 3131, "gt": "def _read_json_file(self, json_file): self.log.debug(\"Reading '%s' JSON file...\" % json_file) with open(json_file, 'r') as f: return json.load(f, object_pairs_hook=OrderedDict)"}, {"nl_input": "python discord leave voice channel", "code_input": "import discord# Create a new discord clientclient = discord.Client()@client.eventasync def on_ready():    print('We have logged in as {0.user}'.format(client))@client.eventasync def on_voice_state_update(member, before, after):    if after.channel and after.channel.is_voice_channel():        if before.channel and before.channel.is_voice_channel():            if after.channel != before.channel:                voice_client = discord.utils.get(client.voice_clients, guild=after.guild)                await voice_client.disconnect()# Replace 'your-token-here' with your bot's tokenclient.run('your-token-here')", "url": 1923, "gt": "async def join(self, ctx, *, channel: discord.VoiceChannel): if ctx.voice_client is not None: return await ctx.voice_client.move_to(channel) await channel.connect()"}, {"nl_input": "python unittest make tests discoverable", "code_input": "import unittest# Define a test suiteclass TestMyModule(unittest.TestCase):    # Define a test method    def test_addition(self):        self.assertEqual(1+1, 2)    def test_subtraction(self):        self.assertEqual(3-2, 1)# Create a test suitetest_suite = unittest.TestSuite()# Add the tests to the test suitetest_suite.addTest(unittest.makeSuite(TestMyModule))# Run the test suiterunner = unittest.TextTestRunner()runner.run(test_suite)", "url": 199, "gt": "def test(): import unittest tests = unittest.TestLoader().discover('tests') unittest.TextTestRunner(verbosity=2).run(tests)"}, {"nl_input": "multiline text send message python", "code_input": "from twilio.rest import Client# Your Twilio account SID and auth tokenaccount_sid = 'your_account_sid'auth_token = 'your_auth_token'client = Client(account_sid, auth_token)# The phone number you're sending fromfrom_number = 'your_phone_number'# The phone number you're sending toto_number = 'recipient_phone_number'# The message you're sendingmessage = 'Hello, World!'message = client.messages.create(    body=message,    from_=from_number,    to=to_number)print(", "url": 1510, "gt": "async def _send_plain_text(self, request: Request, stack: Stack): await self._send_text(request, stack, None)"}, {"nl_input": "extract integers from string in python", "code_input": "def extract_integers(s):    return [int(i) for i in s.split() if i.isdigit()]# Test the functionprint(extract_integers(\"12 34 abc 56 def 78 90\"))", "url": 2828, "gt": "def get_numbers(s): result = map(int, re.findall(r'[0-9]+', unicode(s))) return result + [1] * (2 - len(result))"}, {"nl_input": "python take a string after the title", "code_input": "def take_string_after_title(input_string):    title = \"Title: \"    if input_string.startswith(title):        return input_string[len(title):]    else:        return \"Title not found in the string\"# Test the functionprint(take_string_after_title(\"Title: This is a test string\"))", "url": 4355, "gt": "def _format_title_string(self, title_string): return self._title_string_format_text_tag(title_string.replace(self.icy_tokkens[0], self.icy_title_prefix))"}, {"nl_input": "how to randomly select rows in ndarray in python", "code_input": "import numpy as np# Assuming `data` is your numpy arraydata = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])# To randomly select rows, you can use numpy's random choice function# The second parameter is the size of the sample you want to select# The third parameter is the size of the population from which you want to selectselected_rows = np.random.choice(a=data.shape[0], size=10, replace=False)# Now, `selected_rows` is a list of indices of the selected rows# You can use these indices to select the corresponding rows from `data`selected_data = data[selected_rows]print(selected_data)", "url": 794, "gt": "def downsample(array, k): length = array.shape[0] indices = random.sample(xrange(length), k) return array[indices]"}, {"nl_input": "how to open a file with a path in python", "code_input": "def open_file(path):    try:        with open(path, 'r') as file:            data = file.read()        return data    except FileNotFoundError:        print(\"File not found\")        return None    except Exception as e:        print(\"An error occurred: \", e)        return None# Usagepath = \"/path/to/your/file.txt\"print(open_file(path))", "url": 1051, "gt": "def get_file_string(filepath): with open(os.path.abspath(filepath)) as f: return f.read()"}, {"nl_input": "python count distance between two vectors", "code_input": "import mathdef euclidean_distance(vector1, vector2):    if len(vector1) != len(vector2):        raise ValueError(\"Vectors must have the same dimensions\")    return math.sqrt(sum((x - y) ** 2 for x, y in zip(vector1, vector2)))", "url": 2719, "gt": "def distance(vec1, vec2): if isinstance(vec1, Vector2) \\ and isinstance(vec2, Vector2): dist_vec = vec2 - vec1 return dist_vec.length() else: raise TypeError(\"vec1 and vec2 must be Vector2's\")"}, {"nl_input": "python get dimensions of list", "code_input": "def get_dimensions(lst):    return len(lst), len(lst[0]) if len(lst) > 0 and len(lst[0]) > 0 else 0# Test the functionlst = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]print(get_dimensions(lst))", "url": 2080, "gt": "def get_dimension_array(array): if all(isinstance(el, list) for el in array): result = [len(array), len(max([x for x in array], key=len,))] # elif array and isinstance(array, list): else: result = [len(array), 1] return result"}, {"nl_input": "python filter lowpass minmum cutoff frequency", "code_input": "def low_pass_filter(data, cutoff):    # Initialize an empty list to store the filtered data    filtered_data = []    # Loop through the data    for i in range(len(data)):        # If the current data point is within the cutoff frequency, add it to the filtered data        if abs(data[i]) >= cutoff:            filtered_data.append(data[i])    # Return the filtered data    return filtered_data# Test the functiondata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]cutoff = 5print(low_pass_filter(data, cutoff))", "url": 1552, "gt": "def fft_bandpassfilter(data, fs, lowcut, highcut): fft = np.fft.fft(data) # n = len(data) # timestep = 1.0 / fs # freq = np.fft.fftfreq(n, d=timestep) bp = fft.copy() # Zero out fft coefficients # bp[10:-10] = 0 # Normalise # bp *= real(fft.dot(fft))/real(bp.dot(bp)) bp *= fft.dot(fft) / bp.dot(bp) # must multipy by 2 to get the correct amplitude ibp = 12 * np.fft.ifft(bp) return ibp"}, {"nl_input": "python 3, seperate a string into a list at comma", "code_input": "def separate_string_into_list(s):    return s.split(',')# Test the functions = \"item1,item2,item3,item4\"print(separate_string_into_list(s))", "url": 3278, "gt": "def comma_delimited_to_list(list_param): if isinstance(list_param, list): return list_param if isinstance(list_param, str): return list_param.split(',') else: return []"}, {"nl_input": "how to delete an element in a python dictionary", "code_input": "def delete_element(dictionary, key):    if key in dictionary:        del dictionary[key]    else:        print(\"Key not found in dictionary\")    return dictionary# Test the functiondictionary = {'name': 'John', 'age': 25, 'city': 'New York'}key = 'age'print(\"Original Dictionary:\", dictionary)dictionary = delete_element(dictionary, key)print(\"Dictionary after deletion:\", dictionary)", "url": 5594, "gt": "def dictlist_wipe_key(dict_list: Iterable[Dict], key: str) -> None: for d in dict_list: d.pop(key, None)"}, {"nl_input": "how know if the box was selected in checkbox in python", "code_input": "from flask import Flask, requestapp = Flask(__name__)@app.route('/', methods=['POST'])def check_box():    if request.method == 'POST':        if 'checkbox_name' in request.form:            return 'Checkbox was selected'        else:            return 'Checkbox was not selected'if __name__ == '__main__':    app.run(debug=True)", "url": 1655, "gt": "def set_value(self, value): if value: self.setChecked(Qt.Checked) else: self.setChecked(Qt.Unchecked)"}, {"nl_input": "standard scalar function in python", "code_input": "def scalar_product(lst):    return sum(lst) * len(lst)", "url": 2107, "gt": "def Softsign(a): return np.divide(a, np.add(np.abs(a), 1)),"}, {"nl_input": "python random gaussian distribution noise", "code_input": "import numpy as npdef generate_gaussian_noise(size, mean=0, std_dev=1):    return np.random.normal(mean, std_dev, size)# Test the functionprint(generate_gaussian_noise(10))", "url": 551, "gt": "def rlognormal(mu, tau, size=None): return np.random.lognormal(mu, np.sqrt(1. / tau), size)"}, {"nl_input": "return the number of numeric attributes in python", "code_input": "def count_numeric_attributes():    numeric_attributes = [int, float, complex]    return len(numeric_attributes)print(count_numeric_attributes())", "url": 4818, "gt": "def __len__(self): return len([i for i in (set(dir(self)) - self._STANDARD_ATTRS) if i[0] != '_'])"}, {"nl_input": "python pil camera capture", "code_input": "import cv2# Open the default cameracap = cv2.VideoCapture(0)while True:    # Capture frame-by-frame    ret, frame = cap.read()    # Display the resulting frame    cv2.imshow('Camera', frame)    # Break the loop on 'q' key press    if cv2.waitKey(1) & 0xFF == ord('q'):        break# After the loop release the cap objectcap.release()# Destroy all the windowscv2.destroyAllWindows()", "url": 3731, "gt": "def read(self): stream = BytesIO() self.cam.capture(stream, format='png') # \"Rewind\" the stream to the beginning so we can read its content stream.seek(0) return Image.open(stream)"}, {"nl_input": "python flask create cookie expiration", "code_input": "from flask import Flask, make_responseapp = Flask(__name__)@app.route('/setcookie')def setcookie():    resp = make_response('Cookie set!')    resp.set_cookie('test_cookie', 'value')    return respif __name__ == '__main__':    app.run(debug=True)", "url": 1809, "gt": "def logout(cache): cache.set(flask.session['auth0_key'], None) flask.session.clear() return True"}, {"nl_input": "python sqlalchemy model *", "code_input": "from sqlalchemy import Column, Integer, String, create_enginefrom sqlalchemy.orm import sessionmakerfrom sqlalchemy.ext.declarative import declarative_baseBase = declarative_base()class User(Base):    __tablename__ = 'users'    id = Column(Integer, primary_key=True)    name = Column(String)    email = Column(String)engine = create_engine('sqlite:///:memory:')Base.metadata.create_all(engine)Session = sessionmaker(bind=engine)session = Session()# Create a new usernew_user = User(name='John Doe', email='john.doe@example.com')session.add(new_user)session.commit()# Query the", "url": 3229, "gt": "def save(self): self.session.add(self) self.session.flush() return self"}, {"nl_input": "python how to move to next command in for loop", "code_input": "for i in range(10):    if i == 5:        continue    print(i)", "url": 36, "gt": "def do_next(self, args): self._do_print_from_last_cmd = True self._interp.step_over() return True"}, {"nl_input": "python check if object is a char", "code_input": "def is_char(obj):    return isinstance(obj, str) and len(obj) == 1", "url": 1789, "gt": "def is_string(obj): if PYTHON3: str_type = (bytes, str) else: str_type = (bytes, str, unicode) return isinstance(obj, str_type)"}, {"nl_input": "how to achieve logarithmic complexity in python", "code_input": "import numpy as np# Create a numpy arrayarr = np.array([1, 2, 3, 4, 5])# Calculate the logarithm of each element in the arraylog_arr = np.log(arr)print(log_arr)", "url": 1366, "gt": "def log_loss(preds, labels): log_likelihood = np.sum(labels * np.log(preds)) / len(preds) return -log_likelihood"}, {"nl_input": "python listbox scrollbar not tk", "code_input": "import tkinter as tkfrom tkinter import ttkdef on_list_scroll(event):    print(\"Scroll:\", listbox.get(listbox.nearest(event.x)))root = tk.Tk()listbox = ttk.Treeview(root)listbox.pack(fill='both', expand=True)scrollbar = ttk.Scrollbar(root, orient='vertical', command=listbox.yview)scrollbar.pack(fill='y', side='right')listbox['yscrollcommand'] = scrollbar.setfor i in range(100):    listbox.insert('', 'end', values=(f'Item {i}'))root.bind('<Configure>', on_list_scroll)root.mainloop()", "url": 2585, "gt": "def __init__(self, master=None, compound=tk.RIGHT, autohidescrollbar=True, **kwargs): ttk.Frame.__init__(self, master) self.columnconfigure(1, weight=1) self.rowconfigure(0, weight=1) self.listbox = tk.Listbox(self, **kwargs) if autohidescrollbar: self.scrollbar = AutoHideScrollbar(self, orient=tk.VERTICAL, command=self.listbox.yview) else: self.scrollbar = ttk.Scrollbar(self, orient=tk.VERTICAL, command=self.listbox.yview) self.config_listbox(yscrollcommand=self.scrollbar.set) if compound is not tk.LEFT and compound is not tk.RIGHT: raise ValueError(\"Invalid compound value passed: {0}\".format(compound)) self.__compound = compound self._grid_widgets()"}, {"nl_input": "identify the most common number in an array python", "code_input": "def most_common(lst):    return max(set(lst), key=lst.count)# Test the functionnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9]print(most_common(numbers))", "url": 5604, "gt": "def most_significant_bit(lst: np.ndarray) -> int: return np.argwhere(np.asarray(lst) == 1)[0][0]"}, {"nl_input": "pull multiple values to make table python", "code_input": "import sqlite3from tabulate import tabulate# Connect to the SQLite databaseconn = sqlite3.connect('my_database.db')# Create a cursor objectcur = conn.cursor()# SQL query to pull multiple valuescur.execute(\"SELECT column1, column2, column3 FROM my_table\")# Fetch all the rowsrows = cur.fetchall()# Create a list to hold the table datatable_data = []# Loop through the rows and add them to the table_data listfor row in rows:    table_data.append(row)# Create a table from the dataprint(tabulate(table_data, headers=['Column1', 'Column2', 'Column3'], tablefmt='pretty'))# Close the connectionconn.close()", "url": 3949, "gt": "def _tab(content): response = _data_frame(content).to_csv(index=False,sep='\\t') return response"}, {"nl_input": "python adjust data to normal distribution", "code_input": "import scipy.statsdef adjust_to_normal_distribution(data):    mean = scipy.stats.norm.mean(data)    std_dev = scipy.stats.norm.std(data)    adjusted_data = [scipy.stats.norm.ppf(i, mean, std_dev) for i in data]    return adjusted_data", "url": 4155, "gt": "def normalize(data): out_data = data.copy() for i, sample in enumerate(out_data): out_data[i] /= sum(out_data[i]) return out_data"}, {"nl_input": "python check if float has no floating points", "code_input": "def is_float(n):    try:        float(n)        return True    except ValueError:        return False# Test the functionprint(is_float(1.23))  # Trueprint(is_float('1.23'))  # Trueprint(is_float('abc'))  # False", "url": 5686, "gt": "def is_finite(value: Any) -> bool: return isinstance(value, int) or (isinstance(value, float) and isfinite(value))"}, {"nl_input": "string remove the last blank python", "code_input": "def remove_last_blank(string):    if string.endswith(\" \"):        return string[:-1]    else:        return string# Test the functionprint(remove_last_blank(\"Hello World \"))  # Output: \"Hello World\"", "url": 5725, "gt": "def remove_blank_lines(string): return \"\\n\".join(line for line in string.split(\"\\n\") if len(line.strip()))"}, {"nl_input": "python how to display object attributes", "code_input": "class MyObject:    def __init__(self, attribute1, attribute2):        self.attribute1 = attribute1        self.attribute2 = attribute2# Create an instance of MyObjectobj = MyObject('Attribute1Value', 'Attribute2Value')# Display object attributesprint(\"Attribute1:\", obj.attribute1)print(\"Attribute2:\", obj.attribute2)", "url": 1533, "gt": "def _repr(obj): vals = \", \".join(\"{}={!r}\".format( name, getattr(obj, name)) for name in obj._attribs) if vals: t = \"{}(name={}, {})\".format(obj.__class__.__name__, obj.name, vals) else: t = \"{}(name={})\".format(obj.__class__.__name__, obj.name) return t"}, {"nl_input": "determine if a list of numbers contains duplicates python", "code_input": "def has_duplicates(lst):    return len(lst) != len(set(lst))# Test the functionprint(has_duplicates([1, 2, 3, 4, 5]))  # Falseprint(has_duplicates([1, 1, 2, 3, 4]))  # True", "url": 5743, "gt": "def find_duplicates(l: list) -> set: return set([x for x in l if l.count(x) > 1])"}, {"nl_input": "python figure add title label size", "code_input": "import matplotlib.pyplot as plt# Create a figurefig = plt.figure()# Add a titlefig.suptitle('My Figure', fontsize=16)# Add a labelfig.legend(['Data1', 'Data2', 'Data3'], loc='center right', bbox_to_anchor=(0.9, 0.9))# Set the size of the figurefig.set_size_inches(10, 6)# Show the figureplt.show()", "url": 4900, "gt": "def label_saves(name): plt.legend(loc=0) plt.ylim([0, 1.025]) plt.xlabel('$U/D$', fontsize=20) plt.ylabel('$Z$', fontsize=20) plt.savefig(name, dpi=300, format='png', transparent=False, bbox_inches='tight', pad_inches=0.05)"}, {"nl_input": "python networkx longest path directed acyclic graph", "code_input": "import networkx as nxdef longest_path(G):    # Get the nodes with the maximum degree    sources = [node for node, degree in G.degree() if degree == max(G.degree().values())]    # For each source, find the longest path    longest_paths = {}    for source in sources:        try:            path = nx.single_source_shortest_path(G, source)            longest_paths[source] = max(path.values(), key=len)        except nx.NetworkXUnfeasible:            pass    return longest_paths# Example usage:G = nx.DiGraph()G.add_edge(1, 2)G.add_edge(2, 3)G.add_edge(3, 1)G.add_edge(1, 4)G.add_edge(4, 5)G", "url": 5910, "gt": "def dag_longest_path(graph, source, target): if source == target: return [source] allpaths = nx.all_simple_paths(graph, source, target) longest_path = [] for l in allpaths: if len(l) > len(longest_path): longest_path = l return longest_path"}, {"nl_input": "how to take list as input in python seperated with spaces", "code_input": "# Take input from the userinput_str = input(\"Enter numbers separated by spaces: \")# Split the input string into a list of stringsinput_list = input_str.split()# Convert each string in the list to an integerint_list = [int(i) for i in input_list]# Print the resulting listprint(int_list)", "url": 5110, "gt": "def itemlist(item, sep, suppress_trailing=True): return condense(item + ZeroOrMore(addspace(sep + item)) + Optional(sep.suppress() if suppress_trailing else sep))"}, {"nl_input": "is a list in python an array", "code_input": "def is_list(var):    return isinstance(var, list)# Test the functionprint(is_list([1, 2, 3]))  # Returns: Trueprint(is_list(\"Hello\"))  # Returns: False", "url": 2686, "gt": "def to_list(self): return [[int(self.table.cell_values[0][1]), int(self.table.cell_values[0][2])], [int(self.table.cell_values[1][1]), int(self.table.cell_values[1][2])]]"}, {"nl_input": "python cosine similarity of two vectors", "code_input": "import numpy as npdef cosine_similarity(vec1, vec2):    \"\"\"    Calculate the cosine similarity of two vectors.    Args:    vec1: A list or numpy array representing the first vector.    vec2: A list or numpy array representing the second vector.    Returns:    The cosine similarity of the two vectors.    \"\"\"    vec1 = np.array(vec1)    vec2 = np.array(vec2)    return np.dot(vec1, vec2) / (np.linalg.norm(vec1) * np.linalg.norm(vec2))# Test the functionvec1 = [1, 2, 3, 4, 5]vec2 = [6, 7, 8, 9, 10]print(cosine_similarity(vec1, vec2))", "url": 4513, "gt": "def cross_v2(vec1, vec2): return vec1.y * vec2.x - vec1.x * vec2.y"}, {"nl_input": "how to model a sphere python", "code_input": "import mathclass Sphere:    def __init__(self, radius):        self.radius = radius    def volume(self):        return (4/3) * math.pi * (self.radius ** 3)    def surface_area(self):        return 4 * math.pi * (self.radius ** 2)# Create a sphere with radius 5sphere = Sphere(5)# Print the volume and surface area of the sphereprint(\"Volume: \", sphere.volume())print(\"Surface Area: \", sphere.surface_area())", "url": 1008, "gt": "def Fsphere(q, R): return 4 * np.pi / q ** 3 * (np.sin(q * R) - q * R * np.cos(q * R))"}, {"nl_input": "how to check paths in python", "code_input": "import osdef check_paths():    # Get the current working directory    cwd = os.getcwd()    # List all files and directories in the current directory    list_of_files = os.listdir(cwd)    # Print the list of files and directories    for file in list_of_files:        print(file)# Call the functioncheck_paths()", "url": 1644, "gt": "def is_readable_dir(path): return os.path.isdir(path) and os.access(path, os.R_OK) and os.access(path, os.X_OK)"}, {"nl_input": "python test truth value of list", "code_input": "def test_truth_value_of_list(lst):    if lst:        return True    else:        return False# Test the functionprint(test_truth_value_of_list([1, 2, 3]))  # Output: Trueprint(test_truth_value_of_list([]))  # Output: False", "url": 69, "gt": "def assert_exactly_one_true(bool_list): assert isinstance(bool_list, list) counter = 0 for item in bool_list: if item: counter += 1 return counter == 1"}, {"nl_input": "python string value of enum", "code_input": "def enum_to_str(enum):    return str(enum.value)# Test the functionfrom enum import Enumclass MyEnum(Enum):    A = 1    B = 2    C = 3print(enum_to_str(MyEnum.A))  # Output: '1'print(enum_to_str(MyEnum.B))  # Output: '2'print(enum_to_str(MyEnum.C))  # Output: '3'", "url": 471, "gt": "def EnumValueName(self, enum, value): return self.enum_types_by_name[enum].values_by_number[value].name"}, {"nl_input": "python create null pointer with ctypes", "code_input": "import ctypes# Create a null pointernull_pointer = ctypes.c_void_p()# Now you can use the null pointer as you would with any other pointer# For example, you can assign it a valuenull_pointer = ctypes.c_int(10)# Or you can read its valueprint(null_pointer.value)  # Outputs: 0", "url": 1683, "gt": "def POINTER(obj): p = ctypes.POINTER(obj) if not isinstance(p.from_param, classmethod): def from_param(cls, x): if x is None: return cls() else: return x p.from_param = classmethod(from_param) return p"}, {"nl_input": "python md5 hash string", "code_input": "import hashlibdef generate_md5_hash(input_string):    md5_hash = hashlib.md5()    md5_hash.update(input_string.encode('utf-8'))    return md5_hash.hexdigest()# Test the functionprint(generate_md5_hash(\"Hello, World!\"))", "url": 1193, "gt": "def md5_string(s): m = hashlib.md5() m.update(s) return str(m.hexdigest())"}, {"nl_input": "python how to match dictionarys", "code_input": "def match_dictionaries(dict1, dict2):    return dict1 == dict2", "url": 556, "gt": "def intersect(d1, d2): return dict((k, d1[k]) for k in d1 if k in d2 and d1[k] == d2[k])"}, {"nl_input": "select elements from a list, then delete these elements in the original list python", "code_input": "# Define a listmy_list = [1, 2, 3, 4, 5]# Select elements from the listselected_elements = my_list[1:3]# Print the selected elementsprint(\"Selected elements:\", selected_elements)# Delete the selected elements from the original listfor element in selected_elements:    my_list.remove(element)# Print the modified listprint(\"Modified list:\", my_list)", "url": 837, "gt": "def remove_elements(target, indices): copied = list(target) for index in reversed(indices): del copied[index] return copied"}, {"nl_input": "pybool to c++ python 3", "code_input": "def bool_to_other(bool_val):    if bool_val:        return \"True\"    else:        return \"False\"def main():    bool_val = input(\"Enter a boolean value (True/False): \")    bool_val = bool_val.lower()    if bool_val == \"true\":        print(\"C++: \", bool_to_other(True))        print(\"Python 3: \", bool_to_other(True))        print(\"Java: \", bool_to_other(true))    elif bool_val == \"false\":        print(\"C++: \", bool_to_other(False))        print(\"Python 3: \", bool_to_other(False))        print(\"Java: \", bool_to_other(false))    else:        print(\"Invalid input\")if __name__ == \"__main__\":    main()", "url": 257, "gt": "def convertToBool(): if not OPTIONS.strictBool.value: return [] REQUIRES.add('strictbool.asm') result = [] result.append('pop af') result.append('call __NORMALIZE_BOOLEAN') result.append('push af') return result"}, {"nl_input": "how to add a ? in python url", "code_input": "from urllib.parse import urlparse, urlunparse, urlencodedef add_query_param(url, param, value):    parsed_url = urlparse(url)    query = dict(urlparse.parse_qs(parsed_url.query))    query[param] = value    new_query = urlencode(query)    return urlunparse((parsed_url.scheme, parsed_url.netloc, parsed_url.path, '', new_query, ''))# Usageurl = 'http://example.com'param = 'myparam'value = 'myvalue'new_url = add_query_param(url, param, value)print(new_url)", "url": 4628, "gt": "def append_query_parameter(url, parameters, ignore_if_exists=True): if ignore_if_exists: for key in parameters.keys(): if key + \"=\" in url: del parameters[key] parameters_str = \"&\".join(k + \"=\" + v for k, v in parameters.items()) append_token = \"&\" if \"?\" in url else \"?\" return url + append_token + parameters_str"}, {"nl_input": "python how to check whether the process with pid exist", "code_input": "import psutildef is_process_running(pid):    try:        # Check if process exists        process = psutil.Process(pid)        return True    except psutil.NoSuchProcess:        return False# Test the functionprint(is_process_running(1234))  # This should return Trueprint(is_process_running(9999))  # This should return False", "url": 528, "gt": "def pid_exists(pid): try: os.kill(pid, 0) except OSError as exc: return exc.errno == errno.EPERM else: return True"}, {"nl_input": "how to cehck if somethign is a constant python", "code_input": "def is_constant(obj):    # Check if the object is a class    if isinstance(obj, type):        return False    # Check if the object is a variable    if hasattr(obj, '__dict__'):        return False    # Check if the object is a function    if callable(obj):        return False    # If none of the above conditions are met, the object is a constant    return True", "url": 1184, "gt": "def is_static(*p): return all(is_CONST(x) or is_number(x) or is_const(x) for x in p)"}, {"nl_input": "python check if variable exists in locals", "code_input": "def check_variable(variable):    if variable in locals():        return True    else:        return False# Test the functionprint(check_variable('my_variable'))  # This should return Trueprint(check_variable('another_variable'))  # This should return False", "url": 1793, "gt": "def getvariable(name): import inspect fr = inspect.currentframe() try: while fr: fr = fr.f_back vars = fr.f_locals if name in vars: return vars[name] except: pass return None"}, {"nl_input": "python filter a dictionary by value", "code_input": "def filter_dict_by_value(dictionary, value):    return {key: val for key, val in dictionary.items() if val == value}# Test the functiondictionary = {'a': 1, 'b': 2, 'c': 3, 'd': 2, 'e': 4}value = 2filtered_dict = filter_dict_by_value(dictionary, value)print(filtered_dict)", "url": 5644, "gt": "def _(f, x): return {k: v for k, v in x.items() if f(k, v)}"}, {"nl_input": "read json file and turn into dictionary using python", "code_input": "import jsondef read_json_file(file_path):    with open(file_path, 'r') as file:        data = json.load(file)    return data# Usagedata = read_json_file('path_to_your_file.json')print(data)", "url": 5563, "gt": "def from_file(file_path) -> dict: with io.open(file_path, 'r', encoding='utf-8') as json_stream: return Json.parse(json_stream, True)"}, {"nl_input": "python change the shape of list", "code_input": "# Original list of listsoriginal_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]# Use list comprehension to change the shapenew_list = [(i, j, k) for i, sublist in enumerate(original_list) for j, k in enumerate(sublist)]print(new_list)", "url": 2814, "gt": "def shape_list(l,shape,dtype): return np.array(l, dtype=dtype).reshape(shape)"}, {"nl_input": "how to get the datatypes in python", "code_input": "import builtinsdef get_datatypes():    datatypes = dir(builtins)    return datatypesprint(get_datatypes())", "url": 5803, "gt": "def dtypes(self): return [(str(f.name), f.dataType.simpleString()) for f in self.schema.fields]"}, {"nl_input": "initializing an empty string with a size python", "code_input": "# Initialize an empty string with a size of 10string = \"\" * 10# Print the stringprint(string)", "url": 276, "gt": "def random_str(size=10): return ''.join(random.choice(string.ascii_lowercase) for _ in range(size))"}, {"nl_input": "cast str as int in python", "code_input": "def cast_str_as_int(str):    return int(str)# Test the functionprint(cast_str_as_int(\"123\"))", "url": 5603, "gt": "def try_cast_int(s): try: temp = re.findall('\\d', str(s)) temp = ''.join(temp) return int(temp) except: return s"}, {"nl_input": "python, sql table column details", "code_input": "import sqlite3def get_table_column_details(db_name, table_name):    conn = sqlite3.connect(db_name)    cursor = conn.cursor()    cursor.execute(\"SELECT * FROM {} LIMIT 0\".format(table_name))    column_names = [desc[0] for desc in cursor.description]    cursor.execute(\"SELECT * FROM {}\".format(table_name))    rows = cursor.fetchall()    data = []    for row in rows:        dict_row = {}        for i in range(len(row)):            dict_row[column_names[i]] = row[i]        data.append(dict_row)    conn.close()    return data# Usageprint(get_table_column_details('my_database.db', 'my_table'))", "url": 2535, "gt": "def column_names(self, table): table_info = self.execute( u'PRAGMA table_info(%s)' % quote(table)) return (column['name'] for column in table_info)"}, {"nl_input": "python pathlib to traverse directories", "code_input": "from pathlib import Pathdef traverse_directories(root_path):    root = Path(root_path)    for sub_path in root.iterdir():        if sub_path.is_dir():            print(f'Directory: {sub_path}')            traverse_directories(sub_path)        else:            print(f'File: {sub_path}')# Replace 'root_path' with the path of the root directory you want to traverseroot_path = '/path/to/root/directory'traverse_directories(root_path)", "url": 2992, "gt": "def get_files(dir_name): return [(os.path.join('.', d), [os.path.join(d, f) for f in files]) for d, _, files in os.walk(dir_name)]"}, {"nl_input": "python create list of columns with their dtype", "code_input": "import pandas as pd# Assuming you have a pandas DataFrame dfdf = pd.DataFrame()# Get the column names and their data typescolumn_dtypes = df.dtypes.to_dict()# Print the resultfor column, dtype in column_dtypes.items():    print(f\"Column: {column}, Data Type: {dtype}\")", "url": 1858, "gt": "def _get_str_columns(sf): return [name for name in sf.column_names() if sf[name].dtype == str]"}, {"nl_input": "python turn all nested object to dict", "code_input": "def turn_nested_to_dict(obj):    if isinstance(obj, dict):        return {k: turn_nested_to_dict(v) for k, v in obj.items()}    elif isinstance(obj, list):        return [turn_nested_to_dict(v) for v in obj]    elif isinstance(obj, tuple):        return tuple(turn_nested_to_dict(v) for v in obj)    else:        return obj", "url": 3775, "gt": "def as_dict(self): dicts = [x.as_dict for x in self.children] return {'{0} {1}'.format(self.name, self.value): dicts}"}, {"nl_input": "python read dicom images", "code_input": "pip install pydicom", "url": 1089, "gt": "def numpy(self): # load GDCM's image reading functionality image_reader = gdcm.ImageReader() image_reader.SetFileName(self.fname) if not image_reader.Read(): raise IOError(\"Could not read DICOM image\") pixel_array = self._gdcm_to_numpy(image_reader.GetImage()) return pixel_array"}, {"nl_input": "python making string lower case", "code_input": "def lower_case(string):    return string.lower()# Test the functionprint(lower_case(\"HELLO WORLD\"))", "url": 3683, "gt": "def to_camel(s): # r'(?!^)_([a-zA-Z]) original regex wasn't process first groups return re.sub(r'_([a-zA-Z])', lambda m: m.group(1).upper(), '_' + s)"}, {"nl_input": "how to implement a macro in python", "code_input": "import pyautoguidef macro():    # Press 'a' to simulate key press    pyautogui.press('a')    # Wait for 1 second    pyautogui.sleep(1)    # Release 'a' key    pyautogui.press('a', presses=1)# Call the macromacro()", "url": 4263, "gt": "def define_macro(self, name, themacro): from IPython.core import macro if isinstance(themacro, basestring): themacro = macro.Macro(themacro) if not isinstance(themacro, macro.Macro): raise ValueError('A macro must be a string or a Macro instance.') self.user_ns[name] = themacro"}, {"nl_input": "python subprocess close stdin", "code_input": "import subprocessdef close_stdin(command):    # Create a new process    process = subprocess.Popen(command, stdin=subprocess.PIPE)    # Close the stdin    process.stdin.close()    # Wait for the process to finish    process.wait()# Test the functionclose_stdin(['echo', 'Hello, world'])", "url": 3531, "gt": "def _finish(self): if self._process.returncode is None: self._process.stdin.flush() self._process.stdin.close() self._process.wait() self.closed = True"}, {"nl_input": "sum within a comprehension python", "code_input": "numbers = [1, 2, 3, 4, 5]sum_of_numbers = sum(num for num in numbers)print(sum_of_numbers)", "url": 325, "gt": "def _accumulate(sequence, func): iterator = iter(sequence) total = next(iterator) yield total for element in iterator: total = func(total, element) yield total"}, {"nl_input": "python timedelta without microseconds", "code_input": "from datetime import datetime# Define the two datesdate1 = datetime(2022, 1, 1)date2 = datetime(2022, 1, 2)# Calculate the differencediff = date2 - date1# Print the differenceprint(diff)", "url": 4766, "gt": "def timedelta_seconds(timedelta): return (timedelta.total_seconds() if hasattr(timedelta, \"total_seconds\") else timedelta.days * 24 * 3600 + timedelta.seconds + timedelta.microseconds / 1000000.)"}, {"nl_input": "change python object to string", "code_input": "def object_to_string(obj):    return str(obj)# Test the functionprint(object_to_string(123))  # Output: '123'print(object_to_string(\"Hello\"))  # Output: 'Hello'print(object_to_string(True))  # Output: 'True'print(object_to_string(None))  # Output: 'None'", "url": 5541, "gt": "def string(value) -> str: return system_json.dumps(Json(value).safe_object(), ensure_ascii=False)"}, {"nl_input": "eit request header in python flask", "code_input": "from flask import Flask, requestapp = Flask(__name__)@app.route('/')def home():    headers = request.headers    return str(headers)if __name__ == '__main__':    app.run(debug=True)", "url": 1456, "gt": "def get_trace_id_from_flask(): if flask is None or not flask.request: return None header = flask.request.headers.get(_FLASK_TRACE_HEADER) if header is None: return None trace_id = header.split(\"/\", 1)[0] return trace_id"}, {"nl_input": "python lower all elements in list", "code_input": "def lower_list(lst):    return [i.lower() for i in lst]# Test the functionlst = ['Hello', 'WORLD', 'hOw', 'ArE', 'YoU']print(lower_list(lst))", "url": 5592, "gt": "def gen_lower(x: Iterable[str]) -> Generator[str, None, None]: for string in x: yield string.lower()"}, {"nl_input": "using sort to move element in to new position in list python", "code_input": "def sort_list(lst):    lst.sort()    return lst# Test the functionprint(sort_list([5, 2, 3, 1, 4]))  # Output: [1, 2, 3, 4, 5]", "url": 3348, "gt": "def insort_no_dup(lst, item): import bisect ix = bisect.bisect_left(lst, item) if lst[ix] != item: lst[ix:ix] = [item]"}, {"nl_input": "remove special characters from column names in python", "code_input": "import redef remove_special_characters(df):    df.columns = [re.sub('[^A-Za-z0-9_]+', '', col) for col in df.columns]    return df", "url": 6049, "gt": "def normalize_column_names(df): r columns = df.columns if hasattr(df, 'columns') else df columns = [c.lower().replace(' ', '_') for c in columns] return columns"}, {"nl_input": "calculate the average of a given list in python", "code_input": "def calculate_average(lst):    return sum(lst) / len(lst)# Test the functionnumbers = [1, 2, 3, 4, 5]print(calculate_average(numbers))", "url": 1278, "gt": "def mean(inlist): sum = 0 for item in inlist: sum = sum + item return sum / float(len(inlist))"}, {"nl_input": "past python git clone", "code_input": "import subprocessdef git_clone(repo_url, destination):    subprocess.run([\"git\", \"clone\", repo_url, destination])# Usagegit_clone(\"https://github.com/username/repo.git\", \"/path/to/destination\")", "url": 4425, "gt": "def mkhead(repo, path): return git.Head(repo, git.Head.to_full_path(path))"}, {"nl_input": "python lambda function with 3 params", "code_input": "lambda_func = lambda x, y, z: x + y + z", "url": 2067, "gt": "def make_lambda(call): empty_args = ast.arguments(args=[], vararg=None, kwarg=None, defaults=[]) return ast.Lambda(args=empty_args, body=call)"}, {"nl_input": "check for punctuation python", "code_input": "def check_punctuation(string):    punctuation = '''!()-[]{};:'\"\\,<>./?@#$%^&*_~'''    for char in string:        if char in punctuation:            return True    return False# Test the functionprint(check_punctuation(\"Hello, World!\"))  # Should return Trueprint(check_punctuation(\"Hello World\"))  # Should return False", "url": 3520, "gt": "def is_punctuation(text): return not (text.lower() in config.AVRO_VOWELS or text.lower() in config.AVRO_CONSONANTS)"}, {"nl_input": "unsupported media type json python", "code_input": "import requestsimport jsondef get_json(url):    response = requests.get(url)    if response.status_code == 200:        return response.json()    else:        return None# Test the functionurl = 'https://jsonplaceholder.typicode.com/posts/1'  # Replace with your URLdata = get_json(url)if data is not None:    print(json.dumps(data, indent=4))else:    print('Failed to fetch data')", "url": 2695, "gt": "def parse(self, data, mimetype): encoding = mimetype.params.get('charset') or 'utf-8' return json.loads(data.decode(encoding))"}, {"nl_input": "python separate string to list", "code_input": "def separate_string_to_list(s):    return s.split()# Test the functions = \"This is a test string\"print(separate_string_to_list(s))", "url": 5723, "gt": "def _str_to_list(value, separator): value_list = [item.strip() for item in value.split(separator)] value_list_sanitized = builtins.list(filter(None, value_list)) if len(value_list_sanitized) > 0: return value_list_sanitized else: raise ValueError('Invalid list variable.')"}, {"nl_input": "python remove phrase from list of strings", "code_input": "def remove_phrase(lst, phrase):    return [item for item in lst if phrase not in item]# Test the functionlst = ['Hello world', 'Python is fun', 'I love Python']phrase = 'Python is'print(remove_phrase(lst, phrase))", "url": 5557, "gt": "def remove_empty_text(utterances: List[Utterance]) -> List[Utterance]: return [utter for utter in utterances if utter.text.strip() != \"\"]"}, {"nl_input": "python fastest way to load data", "code_input": "import pandas as pd# Load data from a CSV filedf = pd.read_csv('data.csv')# Load data from a Excel filedf = pd.read_excel('data.xlsx')# Load data from a SQLite databasedf = pd.read_sql_query(\"SELECT * FROM data\", conn)# Load data from a JSON filedf = pd.read_json('data.json')# Load data from a SQL querydf = pd.read_sql_query(\"SELECT * FROM data\", conn)", "url": 2830, "gt": "def get_data(self): try: return DocumentDataDict(self.__dict__['data']) except KeyError: self._lazy_load() return DocumentDataDict(self.__dict__['data'])"}, {"nl_input": "add noise to the audio python", "code_input": "import numpy as npimport librosadef add_noise(audio_path, noise_path, output_path):    # Load the audio    signal, sr = librosa.load(audio_path)    # Load the noise    noise = librosa.load(noise_path, sr=sr)[0]    # Add the noise to the audio    noisy_signal = signal + noise    # Save the noisy audio    librosa.output.write_wav(output_path, noisy_signal, sr)# Usageadd_noise('input.wav', 'noise.wav', 'output.wav')", "url": 694, "gt": "def synthesize(self, duration): sr = self.samplerate.samples_per_second seconds = duration / Seconds(1) samples = np.random.uniform(low=-1., high=1., size=int(sr * seconds)) return AudioSamples(samples, self.samplerate)"}, {"nl_input": "object with commas turned into list python", "code_input": "def string_to_list(s):    return [int(i) for i in s.split(',')]# Test the functionprint(string_to_list(\"1,2,3,4,5\"))", "url": 1439, "gt": "def seq_to_str(obj, sep=\",\"): if isinstance(obj, string_classes): return obj elif isinstance(obj, (list, tuple)): return sep.join([str(x) for x in obj]) else: return str(obj)"}, {"nl_input": "python set limits on x axis", "code_input": "import matplotlib.pyplot as plt# Define the datax = [1, 2, 3, 4, 5]y = [1, 4, 9, 16, 25]# Create a new figureplt.figure()# Plot the dataplt.plot(x, y)# Set the x-axis limitplt.xlim(0, 5)# Show the plotplt.show()", "url": 3834, "gt": "def set_xlimits(self, min=None, max=None): self.limits['xmin'] = min self.limits['xmax'] = max"}, {"nl_input": "is python ssl socket connection thread safe", "code_input": "import sslimport socketimport threadingclass SSLConnection:    def __init__(self, host, port):        self.host = host        self.port = port        self.ssl_context = ssl.SSLContext(ssl.PROTOCOL_TLS_CLIENT)        self.ssl_context.load_verify_locations('cert.pem')        self.connection = None    def connect(self):        self.connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)        self.connection.connect((self.host, self.port))        self.connection = self.ssl_context.wrap_socket(self.connection, server_hostname=self.host)    def start_thread(self):        threading.Thread(target=self.connect).start()    def is_thread_safe(self):        # Check if the", "url": 2787, "gt": "def enable_ssl(self, *args, **kwargs): if self.handshake_sent: raise SSLError('can only enable SSL before handshake') self.secure = True self.sock = ssl.wrap_socket(self.sock, *args, **kwargs)"}, {"nl_input": "python3 encode decode bytes", "code_input": "def encode_bytes(input_str):    return input_str.encode()def decode_bytes(encoded_bytes):    return encoded_bytes.decode()# Test the functionsinput_str = \"Hello, World!\"encoded_bytes = encode_bytes(input_str)print(f\"Encoded bytes: {encoded_bytes}\")decoded_str = decode_bytes(encoded_bytes)print(f\"Decoded string: {decoded_str}\")", "url": 1377, "gt": "def to_bytes(value): vtype = type(value) if vtype == bytes or vtype == type(None): return value try: return vtype.encode(value) except UnicodeEncodeError: pass return value"}, {"nl_input": "xsd file to python object", "code_input": "from lxml import etreedef xsd_to_python(xsd_file, python_file):    # Load the XSD file    with open(xsd_file, 'r') as file:        xsd_content = file.read()    # Parse the XSD content    xsd_tree = etree.fromstring(xsd_content)    # Create a new Python object    python_object = type(str)([], {}, {})    # Get the namespaces from the XSD file    namespaces = dict([node for _, _, node in etree.iterparse(xsd_file, events=['start-ns'])])    # Iterate over the XSD elements    for element in xsd_", "url": 1677, "gt": "def from_file(cls, file_path, validate=True): return xmlmap.load_xmlobject_from_file(file_path, xmlclass=cls, validate=validate)"}, {"nl_input": "python expand a path", "code_input": "import osdef expand_path(path):    return os.path.expanduser(path)# Test the functionprint(expand_path('~'))", "url": 3524, "gt": "def expandpath(path): return os.path.expandvars(os.path.expanduser(path)).replace(\"//\", \"/\")"}, {"nl_input": "python flask template table example", "code_input": "from flask import Flask, render_templateapp = Flask(__name__)@app.route('/')def home():    data = [        {'name': 'John', 'age': 25},        {'name': 'Jane', 'age': 30},        {'name': 'Bob', 'age': 35},    ]    return render_template('index.html', data=data)if __name__ == '__main__':    app.run(debug=True)", "url": 4050, "gt": "def index(): global productpage table = json2html.convert(json = json.dumps(productpage), table_attributes=\"class=\\\"table table-condensed table-bordered table-hover\\\"\") return render_template('index.html', serviceTable=table)"}, {"nl_input": "how to check if object defined python", "code_input": "def check_object_defined(obj):    if hasattr(obj, 'attribute_name'):        print(\"Object is defined\")    else:        print(\"Object is not defined\")# Usagecheck_object_defined(my_object)", "url": 202, "gt": "def is_defined(self, objtxt, force_import=False): return self.interpreter.is_defined(objtxt, force_import)"}, {"nl_input": "s3 sync between bucket python", "code_input": "import boto3def sync_s3_bucket(src_bucket, dest_bucket):    s3 = boto3.resource('s3')    src_bucket = s3.Bucket(src_bucket)    dest_bucket = s3.Bucket(dest_bucket)    for src_file in src_bucket.objects.all():        dest_bucket.copy({'Bucket': src_bucket.name, 'Key': src_file.key}, src_file.key)    print(\"Sync completed.\")# Replace 'source-bucket' and 'destination-bucket' with your actual bucket namessync_s3_bucket('source-bucket', 'destination-bucket')", "url": 1312, "gt": "def s3(ctx, bucket_name, data_file, region): if not ctx.data_file: ctx.data_file = data_file if not ctx.bucket_name: ctx.bucket_name = bucket_name if not ctx.region: ctx.region = region ctx.type = 's3'"}, {"nl_input": "change the position of 3d coordinate in python", "code_input": "import numpy as np# Define the 3D coordinatecoord = np.array([1, 2, 3])# Print the original coordinateprint(\"Original Coordinate:\", coord)# Define the new positionnew_pos = np.array([4, 5, 6])# Change the position of the coordinatecoord = np.put(coord, [0, 1, 2], new_pos)# Print the new coordinateprint(\"New Coordinate:\", coord)", "url": 1270, "gt": "def list(self): return [self._pos3d.x, self._pos3d.y, self._pos3d.z]"}, {"nl_input": "python how to get the number of cores in a computer", "code_input": "import multiprocessingdef get_num_cores():    return multiprocessing.cpu_count()print(get_num_cores())", "url": 956, "gt": "def _num_cpus_darwin(): p = subprocess.Popen(['sysctl','-n','hw.ncpu'],stdout=subprocess.PIPE) return p.stdout.read()"}, {"nl_input": "python how to use pdb set trace", "code_input": "import pdbdef set_trace():    pdb.set_trace()set_trace()", "url": 900, "gt": "def set_trace(): # https://github.com/nose-devs/nose/blob/master/nose/tools/nontrivial.py pdb.Pdb(stdout=sys.__stdout__).set_trace(sys._getframe().f_back)"}, {"nl_input": "python dictionary url encode", "code_input": "import urllib.parsedef url_encode(url):    return urllib.parse.quote(url)# Test the functionurl = \"http://example.com/path?query=test#fragment\"print(url_encode(url))", "url": 2486, "gt": "def get_dict_to_encoded_url(data): unicode_data = dict([(k, smart_str(v)) for k, v in data.items()]) encoded = urllib.urlencode(unicode_data) return encoded"}, {"nl_input": "how to check whether a string is int in python", "code_input": "def is_int(s):    try:        int(s)        return True    except ValueError:        return False", "url": 5776, "gt": "def _isint(string): return type(string) is int or \\ (isinstance(string, _binary_type) or isinstance(string, _text_type)) and \\ _isconvertible(int, string)"}, {"nl_input": "python 3 change permission of file chmod", "code_input": "import osdef change_permission(file_path, permission):    try:        os.chmod(file_path, permission)        print(f\"Permission of {file_path} has been changed to {permission}\")    except Exception as e:        print(f\"An error occurred: {e}\")# Usagechange_permission('/path/to/your/file', 0o755)  # replace with your file path and permission", "url": 2659, "gt": "def add_exec_permission_to(target_file): mode = os.stat(target_file).st_mode os.chmod(target_file, mode | stat.S_IXUSR)"}, {"nl_input": "python gaussian filter array", "code_input": "import numpy as npdef gaussian_filter(image, sigma):    # Create a 2D Gaussian kernel    kernel_size = 6 * sigma + 1    kernel = np.zeros((kernel_size, kernel_size))    # Calculate the center of the kernel    center = kernel_size // 2    # Calculate the coordinates of the kernel    for i in range(kernel_size):        for j in range(kernel_size):            x = i - center            y = j - center            kernel[i, j] = np.exp(-(x**2 + y**2) / (2 * sigma**2))    # Normalize the kernel    kernel /= np.sum(kernel)    # Convolve the image with the kernel    image_filtered = np.zeros_like(image)    for i in range(kernel_size):        for j in", "url": 374, "gt": "def smooth_gaussian(image, sigma=1): return scipy.ndimage.filters.gaussian_filter(image, sigma=sigma, mode=\"nearest\")"}, {"nl_input": "how to cut off a calculated number to two decimals in python", "code_input": "def cut_off_to_two_decimals(num):    return round(num, 2)# Test the functionprint(cut_off_to_two_decimals(12.3456))  # Output: 12.35", "url": 5704, "gt": "def truncate(value: Decimal, n_digits: int) -> Decimal: return Decimal(math.trunc(value * (10 ** n_digits))) / (10 ** n_digits)"}, {"nl_input": "replace many value at once in python", "code_input": "def replace_values(text, old_values, new_values):    if len(old_values) != len(new_values):        return \"Error: The number of old values and new values should be the same.\"    for old_value, new_value in zip(old_values, new_values):        text = text.replace(old_value, new_value)    return text# Test the functiontext = \"I love Python programming\"old_values = [\"Python\", \"programming\"]new_values = [\"Java\", \"Coding\"]print(replace_values(text, old_values, new_values))", "url": 3362, "gt": "def replace_list(items, match, replacement): return [replace(item, match, replacement) for item in items]"}, {"nl_input": "python numpy conver to float64", "code_input": "import numpy as np# Create a numpy arrayarr = np.array([1, 2, 3, 4, 5])# Convert the numpy array to float64arr_float = arr.astype('float64')print(arr_float)", "url": 854, "gt": "def as_float_array(a): return np.asarray(a, dtype=np.quaternion).view((np.double, 4))"}, {"nl_input": "python how to rank a list object", "code_input": "def rank_list(lst):    return sorted(lst)# Test the functionlst = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]print(rank_list(lst))", "url": 4604, "gt": "def ranks(self, key, value): return [normalize_rank(el) for el in force_list(value.get('a'))]"}, {"nl_input": "how to check if file doesn't exist in python", "code_input": "import osdef file_exists(file_path):    return os.path.isfile(file_path)# Usagefile_path = \"/path/to/your/file.txt\"if file_exists(file_path):    print(\"File exists\")else:    print(\"File does not exist\")", "url": 2931, "gt": "def is_valid_file(parser, arg): arg = os.path.abspath(arg) if not os.path.exists(arg): parser.error(\"The file %s does not exist!\" % arg) else: return arg"}, {"nl_input": "how to get the parent directory in python", "code_input": "import osdef get_parent_dir(path):    return os.path.abspath(os.path.join(path, os.pardir))# Test the functionprint(get_parent_dir('/path/to/your/directory'))", "url": 415, "gt": "def get_parent_dir(name): parent_dir = os.path.dirname(os.path.dirname(name)) if parent_dir: return parent_dir return os.path.abspath('.')"}, {"nl_input": "resize an image python pil", "code_input": "from PIL import Imagedef resize_image(file_path, new_size):    with Image.open(file_path) as img:        img.resize(new_size).save('resized_image.jpg')# Usageresize_image('path_to_your_image.jpg', (new_width, new_height))", "url": 2018, "gt": "def resize(self, size): return Image(self.pil_image.resize(size, PIL.Image.ANTIALIAS))"}, {"nl_input": "python boxplot data frame", "code_input": "import pandas as pdimport matplotlib.pyplot as plt# Assuming df is your DataFrame and it has columns 'Column1', 'Column2', etc.# Create a boxplotplt.figure(figsize=(10,6))plt.boxplot(df)# Add title and labelsplt.title('Boxplot of DataFrame')plt.xlabel('Column Name')plt.ylabel('Value')# Show the plotplt.show()", "url": 2783, "gt": "def compute_boxplot(self, series): from matplotlib.cbook import boxplot_stats series = series[series.notnull()] if len(series.values) == 0: return {} elif not is_numeric_dtype(series): return self.non_numeric_stats(series) stats = boxplot_stats(list(series.values))[0] stats['count'] = len(series.values) stats['fliers'] = \"|\".join(map(str, stats['fliers'])) return stats"}, {"nl_input": "python glpk read from lp file", "code_input": "import glpk# Create a new LP problemlp = glpk.LP('mip.lp')# Solve the LP problemlp.solve()# Print the solutionprint('Solution:')print('Objective:', lp.objective.solution_value())for constraint in lp.constraints:    print(constraint.name, constraint.solution_value())", "url": 4588, "gt": "def glpk_read_cplex(path): from swiglpk import glp_create_prob, glp_read_lp problem = glp_create_prob() glp_read_lp(problem, None, path) return problem"}, {"nl_input": "python threadpool close join", "code_input": "import concurrent.futures# Create a thread pool with 5 threadswith concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:    # Submit tasks to the executor    future1 = executor.submit(some_function, arg1)    future2 = executor.submit(some_function, arg2)    # ...    # Wait for all futures to complete    concurrent.futures.wait(executor)", "url": 1252, "gt": "def join(self): self.inputfeeder_thread.join() self.pool.join() self.resulttracker_thread.join() self.failuretracker_thread.join()"}, {"nl_input": "python sklearn onehotencoder string values", "code_input": "from sklearn.preprocessing import OneHotEncoderimport numpy as np# Define the string valuesstring_values = ['apple', 'banana', 'cherry', 'apple', 'banana', 'cherry']# Create a OneHotEncoder objectencoder = OneHotEncoder()# One-hot encode the string valuesencoded_values = encoder.fit_transform(np.array(string_values).reshape(-1, 1))# Print the encoded valuesprint(encoded_values.toarray())", "url": 1405, "gt": "def one_hot2string(arr, vocab): tokens = one_hot2token(arr) indexToLetter = _get_index_dict(vocab) return [''.join([indexToLetter[x] for x in row]) for row in tokens]"}, {"nl_input": "python change to bytes", "code_input": "def string_to_bytes(s):    return s.encode('utf-8')# Test the functionprint(string_to_bytes(\"Hello, World!\"))", "url": 5708, "gt": "def to_bytes(data: Any) -> bytearray: # noqa if isinstance(data, int): return bytearray([data]) return bytearray(data, encoding='latin-1')"}, {"nl_input": "python json loads try", "code_input": "import jsondef load_json(file_path):    with open(file_path, 'r') as file:        data = json.load(file)    return data", "url": 2057, "gt": "def json(body, charset='utf-8', **kwargs): return json_converter.loads(text(body, charset=charset))"}, {"nl_input": "create an empty column in data frame python", "code_input": "import pandas as pd# Assuming df is your DataFramedf = pd.DataFrame()# Adding a new columndf['new_column'] = ''print(df)", "url": 27, "gt": "def add_blank_row(self, label): col_labels = self.df.columns blank_item = pd.Series({}, index=col_labels, name=label) # use .loc to add in place (append won't do that) self.df.loc[blank_item.name] = blank_item return self.df"}, {"nl_input": "remove whitespace at end of line in python", "code_input": "def remove_whitespace_at_end_of_line(text):    return text.rstrip()# Test the functiontext = \"Hello\\nWorld\\nPython\"print(remove_whitespace_at_end_of_line(text))", "url": 2581, "gt": "def clean(s): lines = [l.rstrip() for l in s.split('\\n')] return '\\n'.join(lines)"}, {"nl_input": "python file opening modes", "code_input": "# Open a file in read modefile = open('file.txt', 'r')print(file.read())file.close()# Open a file in write modefile = open('file.txt', 'w')file.write('Hello, World!')file.close()# Open a file in append modefile = open('file.txt', 'a')file.write(' This is appended.')file.close()", "url": 1796, "gt": "def open_file(file, mode): if hasattr(file, \"read\"): return file if hasattr(file, \"open\"): return file.open(mode) return open(file, mode)"}, {"nl_input": "python code input prompt for questions", "code_input": "# Take user inputname = input(\"Please enter your name: \")# Print a greetingprint(\"Hello, \" + name + \"!\")", "url": 63, "gt": "def string_input(prompt=''): v = sys.version[0] if v == '3': return input(prompt) else: return raw_input(prompt)"}, {"nl_input": "python parse a log file that is logging", "code_input": "from collections import defaultdictfrom datetime import datetimedef parse_log(log_file):    requests_per_hour = defaultdict(int)    with open(log_file, 'r') as f:        for line in f:            fields = line.split()            if len(fields) == 6:                ip, date, time, request, status, size = fields                hour = datetime.strptime(time, '%H:%M:%S').hour                requests_per_hour[hour] += 1    return requests_per_hourlog_file = 'access.log'requests_per_hour = parse_log(log_file)for hour, count in requests_per_hour.items():    print(f'Hour: {hour}, Requests: {count}')", "url": 1429, "gt": "def parse(self): f = open(self.parse_log_path, \"r\") self.parse2(f) f.close()"}, {"nl_input": "remove an entry from a dict python", "code_input": "def remove_entry(dictionary, key):    if key in dictionary:        del dictionary[key]    else:        print(\"Key not found in dictionary\")    return dictionary", "url": 5594, "gt": "def dictlist_wipe_key(dict_list: Iterable[Dict], key: str) -> None: for d in dict_list: d.pop(key, None)"}, {"nl_input": "new line statemnt pythong write", "code_input": "print(\"This is a new line.\")", "url": 2415, "gt": "def write_line(self, line, count=1): self.write(line) self.write_newlines(count)"}, {"nl_input": "python view as series column format string", "code_input": "import pandas as pd# Create a dataframedf = pd.DataFrame({   'A': ['foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'foo'],   'B': ['one', 'one', 'two', 'three', 'two', 'two', 'one', 'three'],   'C': [1, 2, 3, 4, 5, 6, 7, 8],   'D': [1.1, 2.2, 3.3, 4.4, 5.5, 6.6, 7.7, 8.8]})# View as seriesprint(df['A'])print(df['B'])print(df['C'])print(df['D'])", "url": 3291, "gt": "def format(x, format): # don't change the dtype, otherwise for each block the dtype may be different (string length) sl = vaex.strings.format(x, format) return column.ColumnStringArrow(sl.bytes, sl.indices, sl.length, sl.offset, string_sequence=sl)"}, {"nl_input": "python select not null column values", "code_input": "import pandas as pd# Assuming df is your DataFramedf = pd.DataFrame({    'A': [1, 2, None, 4],    'B': [5, None, 6, None],    'C': [7, 8, None, 9]})# Select rows where column 'A' is not nulldf_not_null = df[df['A'].notnull()]print(df_not_null)", "url": 1092, "gt": "def selectnotnone(table, field, complement=False): return select(table, field, lambda v: v is not None, complement=complement)"}, {"nl_input": "how do functions in python know the parametr type", "code_input": "import inspectdef function_info(arg):    # Get the current frame    frame = inspect.currentframe()    # Get the information about the caller frame    caller_info = inspect.getframeinfo(frame.f_back)    # Get the code object of the caller frame    code = frame.f_code    # Get the name of the function    function_name = code.co_name    # Get the argument name    arg_name = arg.__name__    # Return the function name and argument name    return function_name, arg_namedef test_function_info(arg):    function_name, arg_name = function_info(arg)    print(f\"In function {function_name}, the argument {arg_name} is of type {type(arg)}\")test_function_", "url": 4548, "gt": "def is_symbol(string): return ( is_int(string) or is_float(string) or is_constant(string) or is_unary(string) or is_binary(string) or (string == '(') or (string == ')') )"}, {"nl_input": "cursor positioning python windows", "code_input": "import pyautogui# Get the current position of the mousecurrent_pos = pyautogui.position()# Move the mouse to the position (100, 200)pyautogui.moveTo(100, 200)# Print the new position of the mouseprint(current_pos)", "url": 365, "gt": "def ensure_hbounds(self): self.cursor.x = min(max(0, self.cursor.x), self.columns - 1)"}, {"nl_input": "python how to equally space points in an ellipse", "code_input": "import numpy as npimport matplotlib.pyplot as pltdef equally_space_points_on_ellipse(a, b, n):    # Generate points on the ellipse    theta = np.linspace(0, 2*np.pi, n)    x = a * np.cos(theta)    y = b * np.sin(theta)    return x, y# Test the functiona = 1b = 0.5n = 100x, y = equally_space_points_on_ellipse(a, b, n)# Plot the ellipseplt.figure(figsize=(6, 6))plt.plot(x, y, 'b-')plt.title('Ellipse')plt.xlabel('x')pl", "url": 1016, "gt": "def create_ellipse(width,height,angle): angle = angle / 180.0 * np.pi thetas = np.linspace(0,2*np.pi,200) a = width / 2.0 b = height / 2.0 x = a*np.cos(thetas)*np.cos(angle) - b*np.sin(thetas)*np.sin(angle) y = a*np.cos(thetas)*np.sin(angle) + b*np.sin(thetas)*np.cos(angle) z = np.zeros(thetas.shape) return np.vstack((x,y,z)).T"}, {"nl_input": "how to see how similar two images are in python", "code_input": "import cv2import numpy as np# Load the imagesimg1 = cv2.imread('image1.jpg')img2 = cv2.imread('image2.jpg')# Convert the images to grayscalegray1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)gray2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)# Compute the structural similarity index (SSIM) between the two images(score, diff) = cv2.compareHist(gray1, gray2, cv2.HISTCMP_CLOSEST)print(\"Structural Similarity Index (SSIM) between the two images:\", score)", "url": 1294, "gt": "def _sim_fill(r1, r2, imsize): bbsize = ( (max(r1[\"max_x\"], r2[\"max_x\"]) - min(r1[\"min_x\"], r2[\"min_x\"])) * (max(r1[\"max_y\"], r2[\"max_y\"]) - min(r1[\"min_y\"], r2[\"min_y\"])) ) return 1.0 - (bbsize - r1[\"size\"] - r2[\"size\"]) / imsize"}, {"nl_input": "how to make a input to have no spaces in python\\", "code_input": "# Get input from the useruser_input = input(\"Enter a string: \")# Remove spaces from the inputno_spaces_input = user_input.replace(\" \", \"\")# Print the resultprint(\"Input without spaces: \", no_spaces_input)", "url": 3248, "gt": "def pass_from_pipe(cls): is_pipe = not sys.stdin.isatty() return is_pipe and cls.strip_last_newline(sys.stdin.read())"}, {"nl_input": "next line to read in python", "code_input": "line = input()", "url": 1590, "gt": "def __next__(self): # Retrieve the row, thereby incrementing the line number: row = super(UnicodeReaderWithLineNumber, self).__next__() return self.lineno + 1, row"}, {"nl_input": "move an item in list to front python", "code_input": "def move_to_front(lst, item):    if item in lst:        lst.remove(item)        lst.insert(0, item)    return lst# Test the functionlst = [1, 2, 3, 4, 5]item = 3print(move_to_front(lst, item))  # Output: [3, 1, 2, 4, 5]", "url": 1236, "gt": "def list_move_to_front(l,value='other'): l=list(l) if value in l: l.remove(value) l.insert(0,value) return l"}, {"nl_input": "python wrap (s,w) print", "code_input": "def wrap(s, w):    print(s.center(w))", "url": 4399, "gt": "def _wrap(text, columns=80): out = [] for cnt, char in enumerate(text): out.append(char) if (cnt + 1) % columns == 0: out.append(\"\\n\") return \"\".join(out)"}, {"nl_input": "how to check if missing values are blanks or nan or none in python", "code_input": "import pandas as pd# Assuming df is your DataFramedf = pd.DataFrame({    'A': [1, 2, None, 4],    'B': ['', 'test', None, ''],    'C': [5, None, 6, None]})def check_missing_values(df):    for col in df.columns:        if df[col].isnull().any():            return True    return Falseprint(check_missing_values(df))", "url": 5888, "gt": "def warn_if_nans_exist(X): null_count = count_rows_with_nans(X) total = len(X) percent = 100 * null_count / total if null_count > 0: warning_message = \\ 'Warning! Found {} rows of {} ({:0.2f}%) with nan values. Only ' \\ 'complete rows will be plotted.'.format(null_count, total, percent) warnings.warn(warning_message, DataWarning)"}, {"nl_input": "python to get the indices of bin edges", "code_input": "import numpy as npdef get_bin_edges(data, num_bins):    return np.linspace(np.min(data), np.max(data), num_bins+1)# Test the functiondata = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]num_bins = 3print(get_bin_edges(data, num_bins))", "url": 521, "gt": "def val_to_bin(edges, x): ibin = np.digitize(np.array(x, ndmin=1), edges) - 1 return ibin"}, {"nl_input": "python comma separated value", "code_input": "import csvdef read_csv_file(file_name):    with open(file_name, 'r') as file:        reader = csv.reader(file)        for row in reader:            print(row)# Call the functionread_csv_file('your_file.csv')", "url": 77, "gt": "def list_to_csv(value): if isinstance(value, (list, tuple, set)): value = \",\".join(value) return value"}, {"nl_input": "python requests disable ssl certificate verification", "code_input": "import requestsfrom requests.packages.urllib3.exceptions import InsecureRequestWarning# Suppress SSL certificate verification warningrequests.packages.urllib3.disable_warnings(InsecureRequestWarning)# Send a GET requestresponse = requests.get('https://www.google.com')# Print the responseprint(response.text)", "url": 2308, "gt": "def disable_insecure_request_warning(): import requests from requests.packages.urllib3.exceptions import InsecureRequestWarning requests.packages.urllib3.disable_warnings(InsecureRequestWarning)"}, {"nl_input": "python var and distribution of probability", "code_input": "import numpy as np# Define the variablevar = np.random.normal(0, 1, 1000000)# Calculate the distributiondistribution, bins = np.histogram(var, bins=100, density=True)# Print the distributionprint(distribution)", "url": 96, "gt": "def pdf(x, mu, std): return (1.0 / (std * sqrt(2 * pi))) * np.exp(-(x - mu) ** 2 / (2 * std ** 2))"}, {"nl_input": "how to determine it's a orthogonal matrix using python", "code_input": "import numpy as npdef is_orthogonal(A):    # Compute the transpose of A    AT = A.T    # Compute the product of A and the transpose    product = np.dot(A, AT)    # If the product is the identity matrix, then A is orthogonal    if np.allclose(product, np.eye(A.shape[0])):        return True    else:        return False", "url": 5774, "gt": "def is_orthogonal( matrix: np.ndarray, *, rtol: float = 1e-5, atol: float = 1e-8) -> bool: return (matrix.shape[0] == matrix.shape[1] and np.all(np.imag(matrix) == 0) and np.allclose(matrix.dot(matrix.T), np.eye(matrix.shape[0]), rtol=rtol, atol=atol))"}, {"nl_input": "strip html tags in python", "code_input": "from bs4 import BeautifulSoupdef strip_html_tags(text):    soup = BeautifulSoup(text, \"html.parser\")    stripped_text = soup.get_text()    return stripped_text", "url": 3792, "gt": "def do_striptags(value): if hasattr(value, '__html__'): value = value.__html__() return Markup(unicode(value)).striptags()"}, {"nl_input": "center align python text", "code_input": "def center_align(text):    # Calculate the length of the text    length = len(text)    # Calculate the number of spaces to be added at the beginning and end of the text    spaces = (100 - length) // 2    # Return the centered text    return \" \" * spaces + text# Test the functionprint(center_align(\"Hello, World!\"))", "url": 156, "gt": "def center_text(text, width=80): centered = [] for line in text.splitlines(): centered.append(line.center(width)) return \"\\n\".join(centered)"}, {"nl_input": "python get list of keys on an object", "code_input": "def get_keys(obj):    return list(obj.__dict__.keys())# Test the functionclass Test:    def __init__(self, name, age):        self.name = name        self.age = ageobj = Test('John', 25)print(get_keys(obj))", "url": 387, "gt": "def get_keys_from_class(cc): return [prop.name for prop in cc.properties.values() \\ if 'key' in prop.qualifiers]"}, {"nl_input": "is there any python function to check for nan valu", "code_input": "import numpy as npdef is_nan(value):    return np.isnan(value)", "url": 621, "gt": "def reduce_fn(x): values = x.values if pd and isinstance(x, pd.Series) else x for v in values: if not is_nan(v): return v return np.NaN"}, {"nl_input": "python get cookie for request", "code_input": "import requests# Define the URLurl = 'http://example.com'# Define the cookiecookie = {'name': 'value'}# Send the requestresponse = requests.get(url, cookies=cookie)# Print the responseprint(response.text)", "url": 3111, "gt": "def parse_cookies(self, req, name, field): return core.get_value(req.COOKIES, name, field)"}, {"nl_input": "python is list no na", "code_input": "numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]print(numbers)", "url": 755, "gt": "def is_listish(obj): if isinstance(obj, (list, tuple, set)): return True return is_sequence(obj)"}, {"nl_input": "python determine if a file is image", "code_input": "from PIL import Imagedef is_image(file_path):    try:        img = Image.open(file_path)        return True    except:        return False", "url": 1636, "gt": "def is_image(filename): # note: isfile() also accepts symlinks return os.path.isfile(filename) and filename.lower().endswith(ImageExts)"}, {"nl_input": "python reorganise a data frame", "code_input": "import pandas as pd# Assuming df is your DataFramedf = pd.DataFrame({    'A': ['foo', 'bar', 'foo', 'bar', 'foo', 'bar', 'foo', 'foo'],    'B': ['one', 'one', 'two', 'three', 'two', 'two', 'one', 'three'],    'C': [1, 2, 3, 4, 5, 6, 7, 8],    'D': [10, 20, 30, 40, 50, 60, 70, 80]})# Reorganize the DataFramedf_reordered = df[['A', 'B', 'C', 'D']]print(df_reordered)", "url": 4720, "gt": "def _preprocess(df): df = df.stack() df.index.rename([\"id\", \"time\"], inplace=True) # .reset_index() df.name = \"value\" df = df.reset_index() return df"}, {"nl_input": "read first line in txt file in python", "code_input": "with open('filename.txt', 'r') as file:    first_line = file.readline()print(first_line)", "url": 971, "gt": "def getfirstline(file, default): with open(file, 'rb') as fh: content = fh.readlines() if len(content) == 1: return content[0].decode('utf-8').strip('\\n') return default"}, {"nl_input": "pass defined parser object to subparser python", "code_input": "import argparse# Create the main parserparser = argparse.ArgumentParser(description='Main parser')# Add a subparsersubparsers = parser.add_subparsers(dest='subparser_name')# Create the subparsersubparser = subparsers.add_parser('subparser1', help='Subparser 1 help')subparser.add_argument('--arg1', type=int, help='Arg 1 help')subparser = subparsers.add_parser('subparser2', help='Subparser 2 help')subparser.add_argument('--arg2', type=str, help='Arg 2 help')# Parse the argumentsargs = parser.parse_args()#", "url": 2600, "gt": "def sub(name, func,**kwarg): sp = subparsers.add_parser(name, **kwarg) sp.set_defaults(func=func) sp.arg = sp.add_argument return sp"}, {"nl_input": "how to print generic error in python", "code_input": "try:    # Your code hereexcept Exception as e:    print(\"An error occurred:\", e)", "url": 3811, "gt": "def print_err(*args, end='\\n'): print(*args, end=end, file=sys.stderr) sys.stderr.flush()"}, {"nl_input": "python change the name of a key", "code_input": "def change_key_name(dictionary, old_key, new_key):    if old_key in dictionary:        dictionary[new_key] = dictionary.pop(old_key)    return dictionary# Test the functiondictionary = {'name': 'John', 'age': 25, 'city': 'New York'}print(change_key_name(dictionary, 'name', 'username'))", "url": 1602, "gt": "def unit_key_from_name(name): result = name for old, new in six.iteritems(UNIT_KEY_REPLACEMENTS): result = result.replace(old, new) # Collapse redundant underscores and convert to uppercase. result = re.sub(r'_+', '_', result.upper()) return result"}, {"nl_input": "moving mouse python click", "code_input": "import pyautogui# Define the coordinatesx = 100  # x-coordinatey = 200  # y-coordinate# Move the mouse to the coordinatespyautogui.moveTo(x, y)# Click at the coordinatespyautogui.click()", "url": 984, "gt": "def mouse_move_event(self, event): self.example.mouse_position_event(event.x(), event.y())"}, {"nl_input": "python to determine if services are running", "code_input": "import psutildef is_service_running(service_name):    # Iterate over all running processes    for proc in psutil.process_iter(['pid', 'name']):        # If the process name matches the service name, return True        if proc.info['name'] == service_name:            return True    # If no matching process is found, return False    return False# Test the functionprint(is_service_running('service_name'))  # replace 'service_name' with the name of the service you want to check", "url": 235, "gt": "def service_available(service_name): try: subprocess.check_output( ['service', service_name, 'status'], stderr=subprocess.STDOUT).decode('UTF-8') except subprocess.CalledProcessError as e: return b'unrecognized service' not in e.output else: return True"}, {"nl_input": "python set contains multiple items", "code_input": "# Create an empty setmy_set = set()# Add items to the setmy_set.add(1)my_set.add(2)my_set.add(3)# Print the setprint(my_set)", "url": 6019, "gt": "def issuperset(self, items): return all(_compat.map(self._seen.__contains__, items))"}, {"nl_input": "python protobyf parse from byte", "code_input": "import protobyf_pb2# Assume we have a byte stringbyte_string = b'...'# Parse the byte string into a Protocol Buffers messagemessage = protobyf_pb2.MyMessage()message.ParseFromString(byte_string)# Now you can access the fields of the messageprint(message.field1)print(message.field2)", "url": 5882, "gt": "def decode(self, bytes, raw=False): return struct.unpack(self.format, buffer(bytes))[0]"}, {"nl_input": "python check if a directory is writable", "code_input": "import osdef is_directory_writable(path):    try:        # Try to open a file in the directory        with open(os.path.join(path, 'testfile'), 'w'):            # If we got here, the directory is writable            return True    except (IOError, OSError):        # If we got here, the directory is not writable        return False# Test the functionprint(is_directory_writable('/path/to/directory'))", "url": 651, "gt": "def _writable_dir(path): return os.path.isdir(path) and os.access(path, os.W_OK)"}, {"nl_input": "object as list python", "code_input": "class MyObject:    def __init__(self):        self.list = []    def add_to_list(self, item):        self.list.append(item)    def get_list(self):        return self.list# Create an objectobj = MyObject()# Add items to the listobj.add_to_list('item1')obj.add_to_list('item2')obj.add_to_list('item3')# Get the listprint(obj.get_list())", "url": 633, "gt": "def as_list(self): return [self.name, self.value, [x.as_list for x in self.children]]"}, {"nl_input": "replace function nan python", "code_input": "import numpy as npdef replace_nan_with_value(lst, value):    return [x if np.isnan(x) else value for x in lst]# Test the functionlst = [1, 2, np.nan, 4, np.nan, 6]new_lst = replace_nan_with_value(lst, 0)print(new_lst)", "url": 1025, "gt": "def _replace_nan(a, val): mask = isnull(a) return where_method(val, mask, a), mask"}, {"nl_input": "python hash table check if key exist", "code_input": "class HashTable:    def __init__(self):        self.size = 10        self.table = [None] * self.size    def _hash(self, key):        return key % self.size    def set(self, key, value):        index = self._hash(key)        if self.table[index] is None:            self.table[index] = [(key, value)]        else:            for pair in self.table[index]:                if pair[0] == key:                    pair[1] = value                    break            else:                self.table[index].append((key, value))    def get(self, key):        index = self._hash(key)        if self.table[index] is not None:            for pair in self.table[index]:                if pair[0] == key:                    return pair[1]        return", "url": 5872, "gt": "def check_key(self, key: str) -> bool: keys = self.get_keys() return key in keys"}, {"nl_input": "take all points in box python", "code_input": "import pygame# Initialize Pygamepygame.init()# Set up some constantsWIDTH, HEIGHT = 640, 480# Set up the displayscreen = pygame.display.set_mode((WIDTH, HEIGHT))# Set up the colorsWHITE = (255, 255, 255)BLACK = (0, 0, 0)# Set up the boxbox_width, box_height = 100, 100box_x, box_y = 300, 200box = pygame.Rect(box_x, box_y, box_width, box_height)# Game looprunning = Truewhile running:    for event in pygame.event.get():        if event.type == pygame.QUIT:            running = False", "url": 5215, "gt": "def point8_to_box(points): p = points.reshape((-1, 4, 2)) minxy = p.min(axis=1) # nx2 maxxy = p.max(axis=1) # nx2 return np.concatenate((minxy, maxxy), axis=1)"}, {"nl_input": "python create enum by name", "code_input": "class MyEnum:    def __init__(self, name):        self._name = name    def __str__(self):        return self._name# Create an enumerationmy_enum = MyEnum('MyEnum')# Print the enumerationprint(my_enum)", "url": 4091, "gt": "def get_enum_from_name(self, enum_name): return next((e for e in self.enums if e.name == enum_name), None)"}, {"nl_input": "python matplotlib use arrow markers", "code_input": "import matplotlib.pyplot as plt# Create a figure and a set of subplotsfig, ax = plt.subplots()# Create a list of x-coordinatesx = [1, 2, 3, 4, 5]# Create a list of y-coordinatesy = [1, 4, 9, 16, 25]# Plot the data with arrow markersax.plot(x, y, marker='o', linestyle='-', color='b', markersize=10, label='Line')# Add a legendax.legend()# Show the plotplt.show()", "url": 3302, "gt": "def add_arrow(self, x1, y1, x2, y2, **kws): self.panel.add_arrow(x1, y1, x2, y2, **kws)"}, {"nl_input": "python function default args", "code_input": "def greet(name=\"World\"):    print(f\"Hello, {name}!\")# Call the function with a namegreet(\"Alice\")# Call the function without a namegreet()", "url": 139, "gt": "def get_default_args(func): args, varargs, keywords, defaults = getargspec_no_self(func) return dict(zip(args[-len(defaults):], defaults))"}, {"nl_input": "python how to select first 100 rows", "code_input": "import pandas as pd# Assuming you have a pandas DataFrame named 'df'df = pd.read_csv('your_data.csv')  # Read your data into a DataFrame# Select the first 100 rowsdf_first_100 = df.head(100)# Now df_first_100 contains the first 100 rows of your DataFrame", "url": 5650, "gt": "def genfirstvalues(cursor: Cursor, arraysize: int = 1000) \\ -> Generator[Any, None, None]: return (row[0] for row in genrows(cursor, arraysize))"}, {"nl_input": "removing columnsns in data frame python", "code_input": "import pandas as pd# Assuming df is your DataFramedf = pd.DataFrame({    'A': [1, 2, 3],    'B': [4, 5, 6],    'C': [7, 8, 9]})# To remove 'A' and 'C' columnsdf = df.drop(['A', 'C'], axis=1)print(df)", "url": 5616, "gt": "def clean_column_names(df: DataFrame) -> DataFrame: f = df.copy() f.columns = [col.strip() for col in f.columns] return f"}, {"nl_input": "python array to torch tensor", "code_input": "import torch# Define a Python listpython_list = [1, 2, 3, 4, 5]# Convert the list to a PyTorch Tensortensor = torch.tensor(python_list)# Print the Tensorprint(tensor)", "url": 5649, "gt": "def astensor(array: TensorLike) -> BKTensor: tensor = tf.convert_to_tensor(value=array, dtype=CTYPE) return tensor"}, {"nl_input": "how to turn a list into a csv python", "code_input": "import csvdef list_to_csv(input_list, output_file):    with open(output_file, 'w', newline='') as file:        writer = csv.writer(file)        writer.writerows(input_list)# Test the functioninput_list = [['Name', 'Age'], ['Alice', 25], ['Bob', 30]]list_to_csv(input_list, 'output.csv')", "url": 77, "gt": "def list_to_csv(value): if isinstance(value, (list, tuple, set)): value = \",\".join(value) return value"}, {"nl_input": "how do i unzip file in python", "code_input": "import zipfiledef unzip_file(file_path, dest_path):    with zipfile.ZipFile(file_path, 'r') as zip_ref:        zip_ref.extractall(dest_path)# Usageunzip_file('path_to_your_zip_file', 'destination_path')", "url": 1220, "gt": "def _unzip_handle(handle): if isinstance(handle, basestring): handle = _gzip_open_filename(handle) else: handle = _gzip_open_handle(handle) return handle"}]